# 데이터 사이언스 Data Scientist

// 데이터 엔지니어링 단계
1. 데이터 모으는 과정
2. 데이터를 옮기고 저장하는 과정
3. 데이터를 정리하는 과정

4. 분석
5. A/B 테스트
6. 인공지능


# R : 통계와 시각화를 위해 만들어진 언어
# Python : 다양한 분야에 사용할 수 있는 언어
// 웹사이트 개발, 업무 자동화, 게임 개발, 이미지 처리, 데이터 시각화, 앱 서버 개발

numpy, pandas, tensorFlow


# 데이터 사이언스 프로세스
데이터 사이언스에는 어떤 단계들이 있을까요? 물론 상황과 분야에 따라 조금의 변동은 있겠지만, 대략적으로는 이런 순서로 진행됩니다.

문제 정의하기
데이터 모으기
데이터 다듬기
데이터 분석하기
데이터 시각화 및 커뮤니케이션

# 문제 정의하기
해결하고자 하는 문제를 정의합니다.

이 단계에서는 해결하고자 하는 게 무엇인지, 언제까지 어떤 결과물을 얻을 것인지, 어떤 방식으로 데이터를 활용할 것인지 등을 설정합니다. 아무 목적 없이 데이터를 살펴 보면, 의미 있는 발견을 하기 어려우니까요!

목표 설정
기간 설정
평가 방법 설정
필요한 데이터 설정

# 데이터 모으기
필요한 데이터를 모을 수 있는 방법을 찾습니다.

누군가 이미 모아 놓은 데이터를 그대로 사용할 수도 있고, 공공 기관 등에서 배포한 자료를 찾아 볼 수도 있고, 혹은 웹사이트에서 직접 데이터를 수집할 수도 있습니다.

웹 크롤링
자료 모으기
파일 읽고 쓰기

# 데이터 다듬기
데이터의 퀄리티를 높여서 의미 있는 분석이 가능하게끔 합니다.

일반적으로 우리가 수집한 데이터에는 수많은 문제점들이 있습니다. 이런 문제점들로 인해 분석 자체가 불가능할 수도 있고, 혹은 분석을 하더라도 잘못된 결론으로 이어질 수도 있습니다.  “쓰레기를 넣으면 쓰레기가 나온다(garbage in, garbage out)”라는 표현이 있을 정도입니다.

데이터 관찰하기
데이터 오류 제거
데이터 정리하기

# 데이터 분석하기
준비된 데이터로부터 의미를 찾습니다.

이 과정은 통계를 이용해서 수치적으로도 할 수도 있고, 수십 가지의 그래프를 그려보면서 탐색할 수도 있습니다. 우리가 처음 설계했던 방식대로 데이터를 활용해서 원하는 결과를 도출해 내야 합니다!

데이터 파악하기
데이터 변형하기
통계 분석
인사이트 발견
의미 도출

# 커뮤니케이션
분석 결과를 다른 사람들에게 전달합니다.

어떤 문제를 해결하려 했는지, 어떻게 데이터를 모았는지, 어떤 방식으로 어떤 인사이트를 얻었는지 등을 다른 사람들에게 전달해야 합니다. 적절한 시각화를 통해 소통을 원활히 할 수 있습니다.

다양한 시각화
커뮤니케이션
리포트


## 비즈니스 룰
비즈니스 룰은 "특정 조직이 운영되기 위해 따라야 하는 정책, 절차, 원칙에 대한 간단 명료한 설명"입니다.

예를 들어 온라인 쇼핑몰 코팡의 비즈니스 룰에 대해서 생각해볼게요. 코팡 사이트를 운영할 때 아래와 같은 정책들을 정해볼 수 있을 겁니다.

유저는 상품을 주문할 수 있다. 하나의 주문에는 최대 10개의 상품까지만 가능하다.
동일한 주문 내역은 한 번의 배달로, 3일안에 유저가 지정한 배송지에 전달돼야 한다. 만약 그렇지 못할 시 유저에게 최대한 빨리 알려줘야 한다.
유저는 상품에 대한 평가를 줄 수 있다. 평가는 두 종류의 데이터: 1~5 사이 자연수의 별점, 그리고 유저에게 받은 200자 이내 줄 글을 통해 할 수 있다.
훨씬 더 많은 비즈니스 룰이 있겠지만, 일단은 여기까지만 볼게요.

비지니스 룰은 데이터 모델링의 핵심 기반이 되기 때문에, 비즈니스 룰을 만드는 기획자는 최대한 간단명료하게 만드는 게, 개발자는 만들어진 비지니스 룰을 정확하게 이해하는 게 중요합니다.

Entity, Relationship, Attribute 후보 찾기
비지니스 룰이 있을 때, Entity, Attribute, Relationship을 찾는 가장 기본적인 원칙에 대해서 알아보겠습니다.

모든 명사는 Entity 후보입니다.
모든 동사는 Relationship 후보입니다.
하나의 "값"으로 표현할 수 있는 명사는 attribute의 후보입니다.
이 세 가지 기본 원칙을 사용해서 비즈니스 룰에서 ERM 초안을 만들어냅니다. 위에서 본 비즈니스 룰이 있다면, 이렇게 ERM을 만들 수 있습니다.



Attribute 후보 찾기 예외 경우
위에서 배운 세 가지 기본 원칙은 절대적인 건 아니고요. 모델링을 하기 위한 시작점입니다. 다른 내용으로 넘어가기 전에 먼저 중요한 예외 경우에 대해서 알아보겠습니다.

바로 세 번째 원칙인 "하나의 값으로 표현할 수 있는 명사는 attribute 후보입니다"의 예외 경우인데요. 하나의 값으로 표현할 수 있더라도, 하나의 entity가 여러 개의 값을 가져야 하는 경우입니다. 테이블로 표현하면 이런 경우죠.



한 유저가 여러 개의 주소를 가질 수 있기 때문에 주소에 해당하는 컬럼 또는 attribute이 여러 개로 나눠졌습니다.

이렇게 모델링하게 되면,

NULL이 많이 생길 수 있게 된다
컬럼을 몇 개를 만들어야 되는지 애매해진다
조회가 비효율적이게 된다
라는 문제점들이 있습니다. 그렇기 때문에 이런 경우 이렇게:



주소를 컬럼이 아니라, 새로운 테이블(Entity)로 만듭니다. 이렇게 하면 방금 본 세 가지의 문제점이 생기지 않으며, 깔끔하게 모델링을 할 수 있게 됩니다.



## 

