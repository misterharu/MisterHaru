WSL이란?
WSL은 Windows Subsystem for Linux(리눅스용 윈도우 하위 시스템)의 약자인데요. WSL은 리눅스 커맨드와 커맨드라인 앱을 윈도우에서 실행할 수 있게 하는 가벼운 툴입니다. WSL과 리눅스 배포판을 설치하면 되는데요.

fh54an0gk-batch_wsl14.png

WSL과 우분투(Ubuntu)를 설치한 모습

그러면 커맨드라인으로 리눅스 환경을 사용할 수 있습니다.

듀얼 부팅이나 가상 머신을 활용해서 윈도우에 리눅스를 설치하는 방법도 있는데요. 그러면 많은 자원 (CPU, 메모리, 용량)을 소모하게 되고 설치하는 과정도 복잡합니다. WSL을 활용하면 그럴 필요 없이 보다 쉽게 리눅스 환경을 사용할 수 있습니다.

WSL 설치하기
1. 윈도우 메뉴에 'powershell'을 검색한 다음 '관리자로 실행'을 클릭해 주세요.



2. 아래 커맨드를 복사해서 PowerShell에 붙여넣은 다음 엔터를 눌러주세요. WSL 사용을 허용하는 겁니다.


dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
sbjiqsyhb-batch_wsl2.png

6o9yrvuva-batch_wsl3.png

3. 컴퓨터를 다시 시작해 주세요.

4. Microsoft Store로 들어가서 'Ubuntu'를 검색한 다음 설치해 주세요. (다른 리눅스 배포판을 설치하셔도 됩니다.)

85nj0hqam-batch_wsl4.png

여러 결과가 나오는데, 버전이 따로 없는 첫 번째 결과는 가장 최신 LTS(장기 지원 버전) 버전입니다. 특정 버전이 필요한게 아니라면 그냥 첫 번째 옵션을 선택하면 되겠죠?

85xwi019n-batch_wsl5.png

3tnefeves-batch_wsl6.png

'받기'를 클릭하면 아래와 같은 창이 뜨는데 로그인을 안 하셔도 상관없습니다. ('관심 없음' 클릭)

urgythhht-batch_wsl7.png

'시작' 버튼을 누르면 WSL이 실행됩니다.



메시지에 따라 사용자 이름과 비밀번호를 입력해 주세요. 참고로 추가 보안을 위해 비밀번호를 입력해도 별표(*)가 화면에 나타나지 않습니다.

3xnj89kyu-batch_wsl10.png

clf3p1ayr-batch_wsl11.png

gx4xu6wkx-batch_wsl12.png

1f9wl1nua-batch_wsl13.png

그럼 WSL을 사용할 준비가 완료되었습니다. $ 기호 뒤에 커맨드를 입력하면 됩니다.

vuk1o0psv-batch_wsl15.png

예를 들어 whoami를 입력하면 현재 로그인 돼있는 사용자가 출력됩니다.

참고로 WSL을 닫은 후 다시 실행하고 싶다면 윈도우 메뉴에 'ubuntu'를 검색하고 앱을 실행하시면 됩니다.

Installing, this may take a few minutes...
WslRegisterDistribution failed with error: 0x80370102
Please enable the Virtual Machine Platform Windows feature and ensure virtualization is enabled in the BIOS.
For information please visit https://aka.ms/enablevirtualization

# window 기능켜기
# Hyper 기능 체크




## 유닉스 커맨드

1000개가 넘게 있음.
핵심 10~20개

1. 커맨드라인 사용법
2. 파일과 폴더 다루기
3. 프로그램 설치

# Dynamic typing 언어
python, Ruby, JavaScript, php, Perl
// 간단하게 작성해서 컴퓨터가 연산함으로 시간이 소요됨

# Static typing 언어
C, C++, Java, Haskell, Kotlin
// 컴퓨터적 정의를 해줌으로써 작동 시간이 단축


# Dynamic typing과 Static typing의 장단점
Dynamic typing과 Static typing에 대해서 알아봤는데요. 한번 정리해 볼까요?

Dynamic typing	Static typing
코딩 속도가 빠르다.	코딩 속도가 느리다.
실행 속도가 느리다.	실행 속도가 빠르다.
코드의 내용이 눈에 잘 들어온다.	코드의 구조가 눈에 잘 들어온다.
배우기 쉽다.	배우기 어렵다.
혼자서 빠르게 하는, 작고 단순한 프로젝트에 적합	여러 사람이 협업하는, 크고 복잡한 프로젝트에 적합

# 총 정리
# Dynamic typing 언어
Dynamic typing 언어는 간편함과 편리함을 추구하며, 컴퓨터적 구조를 생략하기 때문에 코드의 내용(로직)이 눈에 잘 들어오고 사람이 코드를 이해하기 편해서 학습하기가 쉽습니다.  
다만 컴퓨터적 구조를 생략하기 때문에 실행 속도에 민감한 곳이나 성능이 좋지 않은 환경에서는 활약하기 힘듭니다.

# Static typing 언어
Static typing 언어는 안정성과 정교함을 추구하며, 컴퓨터적 구조를 코드에 적어주기 때문에 코드의 구조가 눈에 잘 들어오지만 코드가 복잡해져서 배우기 어렵습니다.  
다만 코드의 컴퓨터적 구조 덕분에 컴퓨터가 고민을 덜 하게 되고, 실행 속도가 중요한 곳에서 활약할 수 있습니다. 이런 특징을 살려 Static typing 언어는 임베디드, 실시간 투자, 인공 지능 분야에서 활약하고 있습니다.

# 프로그램 언어 구분
1. 객체 지향 프로그래밍 여부
2. 코드의 자료형 명시 여부

# 컴퓨터에 가까우면 low-level
Machine code - Assembly language - C - C++, Java - Ruby, Python
# 사람에 가까우면 high-level


## 프로그래밍 언어의 종류 총정리
이전 챕터에서 프로그래밍 언어를 분류하는 두 가지 기준을 살펴봤었는데요.

객체 지향 프로그래밍 언어인가? (객체를 지향하는 언어 vs. 객체를 지향하지 않는 언어)
변수의 데이터 타입을 어떻게 사용하는가? (Dynamic Typing 언어 vs. Static Typing 언어)
이 두 가지 기준으로 현재 사용되고 있는 프로그래밍 언어들을 나눠보면, 크게 세 가지 부류가 있습니다. 이름을 붙여보자면 '자세한 언어', '체계적인 언어', '쉬운 언어'라고 할 수 있을 것 같네요.

이 세 가지 부류에 이번 챕터에서 배운 내용들을 적용해 보면, 프로그래밍 언어의 시대별 흐름을 파악할 수 있는데요. 이 시대별 흐름은 다음 레슨에서 살펴보고, 이번 레슨에서는 세 부류의 언어에 대해 하나씩 살펴봅시다.

# 자세한 언어
첫 번째는 '자세한 언어' 입니다.

자세한 언어로는 Low-level에 가까운 어셈블리 언어나 C 언어 등이 있습니다. 객체 지향 개념이 적용되지 않고, 코드를 작성할 때 자료형 등의 컴퓨터적 구조를 다 고려해줘야 하는 언어입니다.

이 언어들은 사람보다는 컴퓨터의 논리적인 사고방식에 맞추어져 있다는 특징이 있어서 사람들이 작성하기는 어렵지만, 컴퓨터가 실행하기는 좋습니다. 프로그램을 빠르고 효율적으로 만드는데 최적화되어 있죠. 그래서 스마트 워치, TV, 스피커, 전광판, 가전제품 등, 컴퓨터가 메인이 아닌 기계에 자주 사용됩니다. 이런 기계들은 보통 이런 작은 칩에서 돌아갑니다. 그래서 저장 공간이나 성능이 컴퓨터보다 상당히 열악합니다. 여기서 C 같은 '자세한 언어'가 핵심적으로 사용됩니다.

참고로, 이런 곳에 들어가는 시스템을 임베디드 시스템이라고 부릅니다. IoT라고 해서, 이런 임베디드 시스템을 연결해서, 스마트홈을 만들거나, 기계들 사이의 통신을 할 수 있게 하기도 합니다.



임베디드 시스템 말고도 자세한 언어가 활약할 수 있는 분야가 있습니다.
예를 들어 수많은 문자를 거의 실시간으로 전송해야 하는 텔레그램 같은 채팅 애플리케이션이나 트위치 같은 동영상 스트리밍 서비스, 검색 엔진, 개발자들이 코드 관리를 위해 사용하는 github, 머신 러닝 같은 빅데이터 처리 속도와 알고리즘이 중요한 그런 분야의 회사에서 많이 사용됩니다.
사람이 코딩하는 시간은 길어지지만, 컴퓨터가 실행하는 시간은 조금이라도 빠르게 하고 싶은 그런 경우들이죠.

자세한 언어의 장단점을 정리해볼까요?

단점: 코드를 작성하거나 고치는 게 힘들고 오래 걸린다.
장점: 프로그램을 만들기만 하면 컴퓨터가 실행하는 속도는 매우 빠르다. 성능이 안 좋은 컴퓨터에 적용하기 좋다.

# 체계적인 언어
두 번째는 '체계적인 언어' 입니다.

자세한 언어와 마찬가지로 static typing 언어이지만, 객체 지향 개념이 적용된 언어인데요. Java나 C++ 같은 언어들이 여기에 속하고, 체계가 잡혀있기 때문에, 여러 사람이 함께 작업하기에 가장 적합하고, 협업 과정에서 오류가 적어서 주로 큰 규모의 프로젝트에 적합합니다.

규모가 큰 기업들에서는 Java를 많이 사용하고 있는데요. 구글, 에어비앤비, 우버 뿐 아니라 이베이, 핀터레스트, 스포티파이, 트립 어드바이저, 아마존, 인텔, 필립스, 회사 이름으로 나열하려면 끝도 없습니다. 그래서 취업을 하려면 Java를 해라. 이런 얘기도 있죠.

체계적인 언어의 장,단점을 정리해 볼게요.

단점: '자세한 언어'보다는 낫지만, 여전히 문법이 완전 쉽지는 않다. 코드를 작성하는 시간보다도 체계적으로 설계하는 데에 시간이 오래 걸릴 수 있다.
장점: 짜임새와 협업이 중요한, 규모가 큰 프로젝트에 적합하다. 객체 지향 개념이 적용되어서, “자세한 언어”보다 유지보수 하기가 편하다.

# 쉬운 언어
세 번째는 '쉬운 언어'입니다.

객체 지향 개념이 적용된, dynamic typing 언어를 말하며, 프로그래머가 아닌 사람도 비교적 쉽게 배우고 사용할 수 있는 Python, Ruby 등의 언어가 여기에 속합니다.

이 언어들은 최대한 간결하고, 짧은 코드를 추구하죠, 문법도 간편해서, 코드를 작성하는 시간이 가장 짧습니다. 귀찮은 건 다 컴퓨터에 맡겨버리는 거죠.
파이썬에는 이런 말이 있습니다.“life is short you need python” 인데요. 인생이 짧은 만큼 빨리빨리 개발할 수 있는 파이썬을 사용하라는 말입니다. 또, "Simple is better than complex" 이런 말도 있는데요. 간결한 것이 복잡한 것보다 낫다는 뜻인데요. 복잡하게 하지말고 간편하게 코딩하자.이런 뜻입니다.  
Ruby의 개발자 마츠모토 유키히로는 “루비는 스트레스가 없는 쉬운 프로그래밍 언어입니다. 프로그래밍 언어는 컴퓨터가 아닌 인간 중심으로 설계되어야 합니다” 라고 하기도 했습니다.

쉬운 언어가 어떤 철학을 가졌는지 이해되시나요? 쉬운 언어는 빠르게 개발이 필요한, 변화가 많고 잦은 분야에서 많이 사용되고, 데이터 사이언스, 업무 자동화와 같이 개인 규모의 프로젝트에서도 가장 많이 사용됩니다.

장점: 진입 장벽이 낮다. 배우기 쉽다. 코드를 읽거나 수정하기가 가장 간편하다. 코드를 빨리 작성할 수 있다.
단점: 코드 작성 시간은 짧지만, 컴퓨터의 코드 실행 속도가 느리다. 성능 제약이 심한 곳에서 빠른 속도를 내야 하는 경우는 사용할 수 없다. 프로그래밍 코드 문법에 제약이 너무 없어서, 큰 규모의 프로젝트에서 실수를 방지하기가 어렵다. 많은 사람들의 협업에는 부적합할 수 있다.
여러분들이 어떤 언어를 배워야 할지 어렵다면, 기본적으로 이 세 가지 부류의 언어를 기억하고, 내가 희망하는 분야는 어떤 언어들이 주로 사용되는지 살펴보세요.


# R
R은 주로 통계 소프트웨어 개발과 데이터 분석 및 시각화에 널리 사용되고 있습니다.
특히 통계나 빅데이터 분석에 필요한 데이터 전처리, 분석, 수학적인 계산과 그래프를 그리는 등의 기능에 특화되어 있습니다.

# SQL
SQL은 데이터베이스를 관리하기 위한 목적의 프로그래밍 언어입니다.
데이터베이스란 데이터를 모아둔 공간을 의미하는데요. 프로그래머들은 SQL을 사용해서 데이터베이스를 설계하거나 운영하고 관리합니다.
요즘에는 데이터가 워낙 많이 활용되기 때문에, 개발자 뿐 아니라 마케터나 데이터 분석가들이 SQL을 사용하여 서비스의 데이터(매출, 고객 정보 등)를 분석하곤 합니다.

예를 들어, 아래는 USA 국가의 인구를 1 증가시키는 SQL 코드입니다.



# HTML, CSS
HTML과 CSS는 웹 페이지를 만들 때 사용합니다.
HTML는 주로 웹 페이지의 구조와 레이아웃을 담당하고, CSS는 웹 페이지의 시각적인 표현을 담당합니다.

주로 여기에 JavaScript를 함께 사용해서, 웹 페이지가 사용자와 상호 작용할 수 있게 만들기도 합니다.

MATLAB - 공학 시뮬레이션용 프로그래밍 언어
Csound - 소리와 음악 합성에 사용되는 프로그래밍 언어
Scratch - 블록을 조립하여 쉽게 자기 자신의 이야기나 게임 그리고 애니메이션을 만들 수 있는 교육용 프로그래밍 언어


# snake 표기법 : math_score
# pascal 표기법 : MathScore
# camel 표기법 : mathScore

## python style guide 검색 참고


## 스타일 가이드 정리
가독성 좋은 코드를 작성하는 데 있어서 굉장히 중요한 부분 중 하나가 “스타일 가이드”입니다. (Convention이라고도 합니다) 스타일 가이드를 잘 적용시키면 가독성이 좋을 뿐 만 아니라, 여러 사람들이 동시에 작업을 할 때 생길 수 있는 혼선을 막을 수 있습니다.

어떤 스타일 가이드가 있는지 간단하게 정리해 봅시다.

# Python 스타일 가이드
Python의 경우 PEP8(Python Enhance Proposal 8)이라는 스타일 가이드가 있습니다.  
Python 공식 스타일 가이드(일명: PEP8)  
https://www.python.org/dev/peps/pep-0008/

# Google Python 스타일 가이드  
글로벌 IT 기업인 Google에서 사용하는 스타일 가이드입니다. 
PEP8과 비교해서 가장 다른 점은 “Docstring”을 작성하는 법에 대해 좀 더 깊이 다루고 있습니다.  
https://github.com/google/styleguide/blob/gh-pages/pyguide.md

# JavaScript 스타일 가이드
JavaScript 표준 스타일 가이드  
https://standardjs.com/

# Airbnb JavaScript 스타일 가이드  
https://github.com/airbnb/javascript

# Google JavaScript 스타일 가이드  
https://google.github.io/styleguide/jsguide.html

# Java 스타일 가이드
Java를 소유한 회사 오라클의 스타일 가이드  
https://www.oracle.com/technetwork/java/codeconvtoc-136057.html

# Google Java 스타일 가이드  
https://google.github.io/styleguide/javaguide.html

여러분이 원하는 언어의 스타일 가이드를 직접 찾아보고, 많이 보면서 눈에 익혀보세요!


# 규칙 1: 함수 호출, 함수 파라미터 등에서 불필요한 공백을 넣지 않는다.
No:
spam( ham[ 1 ], { eggs: 2 } )
bar = (0, )
spam (1)
    
Yes:
spam(ham[1], {eggs: 2})
bar = (0,)
spam(1)

# 규칙 2: , 다음에는 하나의 공백을 넣어줘야 한다.
No:
function(a,b,c)
    
Yes:
function(a, b, c)

# 규칙 3: 변수에 값을 저장할 때 사용하는 등호(=) 앞뒤로 하나의 공백을 넣는다.
No: i=i+1
    
Yes: i = i + 1

# 규칙 4: 함수, 변수는 소문자로 쓰고, 단어 간은 밑줄(_)을 사용하여 연결한다.
No: TotalNumbers
    
Yes: total_numbers

# 도서 추천 // 오류 발생 패턴에 대한 책
Design Patterns
Elements of Reusable
Object-Oriented Software


# 라이브러리

# 프레임워크

## 남의 코드에서 배우기
# 프로그래머의 가장 좋은 스승
그동안 프로그래밍 언어를 잘 활용할 수 있는 방법들을 살펴봤습니다.
하지만 이게 바로 내 코드에 적용시키는게 어려울 수 있는데요.
아무래도 처음 배우는 거다 보니, 낯설어서 그렇겠죠.

개발자에게 있어서 가장 좋은 스승은 잘 짜여진 좋은 코드입니다.

훌륭한 개발자들의 코드를 잘 살펴보고, 그 코드는 어떻게 구조가 짜여져 있는지, 스타일 가이드는 어떻게 적용하고 있는지, 변수 이름이나 주석은 어떻게 쓰고 있는지, 어떤 라이브러리나 프레임워크를 사용하고 있는지, 이런 것들을 잘 살펴볼 필요가 있습니다.

이 코드를 계속 관찰하고 마주칠 때마다 유심히 살펴보아야 좋은 코드를 눈에 익히고 내 것으로 만들어 실력을 늘릴 수 있습니다.

# 좋은 코드를 찾을 수 있는 곳 1: 라이브러리
좋은 코드는 어디서 찾을 수 있을까요?
프로그래밍 특유의 공유 문화 때문에, 금세 좋은 코드들을 많이 찾을 수 있는데요.
먼저, 라이브러리 내부의 코드들이 있습니다.

여러 사람이 공유해서 함께 쓰려고 만든 라이브러리라면, 그 코드의 퀄리티가 높아야겠죠?
그만큼 훌륭한 사람들이 신경도 많이 써서 만들었을 겁니다.

프로그래밍을 하다가 라이브러리를 쓰게 됐다면, 그 라이브러리의 내부를 한번 살펴 보세요.

예를 들어, 데이터 사이언스에 사용하는 파이썬 라이브러리로 pandas, seaborn 같은 걸 아까 소개해 드렸죠? 이건 파이썬 라이브러리이니까, 그 내부도 파이썬 언어로 되어 있습니다. 모든 걸 다 이해하긴 어렵겠지만, '아! 이름은 이렇게 지었구나', '코멘트는 이렇게 달았구나' 하면서 유심히 살펴보시면 좋습니다.

코드를 공부할 만한 라이브러리를 몇 개 소개시켜드리겠습니다. 라이브러리 공식 홈페이지에는 라이브러리 사용법과 예시가 잘 나와있습니다.  
Seaborn 라이브러리 - https://seaborn.pydata.org/tutorial.html  
Pandas 라이브러리 - https://pandas.pydata.org/docs/user_guide/10min.html

# 좋은 코드를 찾을 수 있는 곳 2: 개발 문서
프로그래밍에서는 개발 문서가 매우 많이 등장합니다.
라이브러리나 프레임워크 같은 걸 만들 때도, "이렇게 쓰면 됩니다!" 라며 알려주는 문서들이 있고, 언어 자체에도 공식 설명 문서들이 있습니다.

공식 문서에서는 매우 신중하게 예시를 작성해서 공유합니다. 그 예시가 곧 가장 엄선된 정석 코드여야 하기 때문이죠. 이런 문서들을 자주 읽으면서, 사람들이 어떤 방식으로 코드를 공유하는지 잘 살펴 보세요.

몇 가지 언어의 공식 사이트 링크를 공유드립니다.   
Python - https://docs.python.org/ko/3/  
Javascript - https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide  
Ruby- https://www.ruby-lang.org/ko/documentation/  
Java- https://docs.oracle.com/en/java/

# 좋은 코드를 찾을 수 있는 곳 3: 커뮤니티
특정 상황에 대한 좋은 예시가 궁금하다면, 인터넷에 검색해 보세요.
개발자들이 이미 여러 방식의 장단점을 고민하고 논의해둔 기록들이 있을 겁니다.

그리고 프로그래밍에는 공유의 문화가 잘 되어 있기 때문에, 좋은 사례와 이유 같은 걸 적어둔 사이트, 블로그 등도 많습니다.

구글 검색을 할 때 Best Practice라는 키워드로 검색을 해보면, 어떤 게 가장 좋은 코드인지 사람들의 논의 혹은 예시 코드들을 발견할 수 있을 겁니다.


## 버그 관리 툴
Jira, asana, Trello

// 이슈(issue) 트레킹 툴

open : 이슈 발생
- In-progress : 개발자가 개선 작업 진행
- Resolved : 문제가 해결됨(개발자가 작업 완료)
- Closed : 테스트 결과 버그가 잘 해결됨
- Reopen :  추가적인 문제 발생시 다시 Open으로 돌아감

Assign: 담당자 지정

# IDE (Integrated Development Environment): 개발자들이 코딩할 떄 도움이 되는 기능을 모아둔 프로그램!
IJ, Eclrips, 비쥬얼 스튜디오

# 유용한 프로그램들
IDE 외에도 개발자들이 많이 사용하는 프로그램들을 살펴보자면

프로젝트 관리 툴인 Jira, Trello, Asana, Confluence
메신저인 Slack, Skype, Jandi
디자인 협업 툴인 Sketch

이런 것들이 있는데요.

회사마다 쓰는 것들이 다르긴 하지만, 대략적으로 파악하고 있으면 나중에 일할 때 더 적응하기 쉽고 편하겠죠? 
시간 내서 이런 툴들을 한번씩 살펴보는 걸 추천합니다.

StackShare에 가면, 개발자 혹은 개발팀에서 사용하는 다양한 툴을 찾아볼 수도 있습니다.

# 커뮤니티
# stackoverflow
# Quora

# stackshare // 기업들의 스택
medium, reddit, Quora, Naver, kakao, woowahan // 자료 공유


##  모든 연락처에 이메일 보내기
# main.py
import yagmail

email = "xxxxxx"
name = "기쁨"
subject = f'{name}님 수료를 축하해요!'
body = f'{name}님 본문'

yag = yagmail.SMTP(
    user="xxxxxx",
    password="xxxxxx"
)
yag.send(
    to=email,
    subject=subject,
    contents=body,
)


# send.py
import pandas as pd
import yagmail
from time import sleep

yag = yagmail.SMTP(
    user="xxxxxx",
    password="xxxxxx"
)

contacts_df = pd.read_csv('./contacts.csv')
print(contacts_df.head())

for index, contact in contacts_df.iterrows():
    name = contact["Given Name"]
    email = contact["E-mail 1 - Value"]
    subject = f'{name}님 수료를 축하드려요!'
    body = (
        f'{name}님 안녕하세요.\n'
        f'캠프 매니저 김우주입니다.\n'
        f'\n'
        f'코딩 첫걸음 캠프 수료 축하드려요!\n'
        f'수료증은 다음 주 중에 우편으로 발송될 예정입니다 :)\n'
        f'\n'
        f'좋은 하루되세요.\n'
        f'감사합니다.\n'
        f'\n'
        f'김우주 드림\n'
    )
    yag.send(
        to=email,
        subject=subject,
        contents=body,
    )
    print(f'{name}님 전송 완료')
    sleep(30)


## 이력서 300개 폴더로 분류하기
# main.py
import os
from shutil import copy

for root, dirs, files in os.walk("./data"):
    for file in files:
        src = os.path.join(root, file)

        file, ext = file.split(".")
        name, position = file.split("__")

        dest_path = f"./data/{position}"
        if not os.path.exists(dest_path):
            os.makedirs(dest_path)
        dest = f"{dest_path}/{name}.{ext}"

        # copy(src, dest)

## 파이썬 티켓팅 매크로
# main.py
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from time import sleep

options = webdriver.ChromeOptions()
options.binary_location = "./chromedriver"
driver = webdriver.Chrome()
wait = WebDriverWait(driver, 10)


# 티켓 예매 페이지
driver.get('http://localhost:5500/0101_web_automation/ticket-site/index.html')
date_element = driver.find_element(
    By.CSS_SELECTOR, '[data-date="2025-08-18 (월)"]')
date_element.click()
time_element = driver.find_element(By.CSS_SELECTOR, '[data-time="19:30"]')
time_element.click()
submit_element = driver.find_element(By.CSS_SELECTOR, '#book-button')
submit_element.click()

# 로그인 페이지
wait.until(EC.url_matches('/login'))
username_element = driver.find_element(By.CSS_SELECTOR, '#username')
password_element = driver.find_element(By.CSS_SELECTOR, '#password')
username_element.send_keys('codeit')
password_element.send_keys('love2learn')
submit_element2 = driver.find_element(By.CSS_SELECTOR, '[type="submit"]')
submit_element2.click()

# 좌석 선택 페이지
wait.until(EC.url_matches('/seat'))
seat_element = driver.find_element(By.CSS_SELECTOR, '[data-seat="r"]')
seat_element.click()
submit_element3 = driver.find_element(By.CSS_SELECTOR, '#book-button')
submit_element3.click()

# 예매 완료 페이지
sleep(5)



## 단축키
Ctrl + A // 줄 앞 부분으로 이동
Ctrl + E // 줄 뒷 부분으로 이동
Alt + <- // 이전 단어 이동
Alt + -> // 다음 단어 이동
Ctrl + C // 입력이 취소 되고 새로운 프론트가 뜬다, 작업을 취소도 가능하다.
clear // 화면 지우기
Tab // 자동 완성
Tab X2 // 자동 완성 리스트를 보여준다.



Ubuntu
Windows Subsystem for Linux
Windows PowerShell

## 유닉스 폴더 구조와 파일 경로
# 파일과 디렉토리를 다루는 커맨드

# 유닉스 디렉토리 구조
상위 부모 디렉토리
하위 자식 디렉토리

사용자의 홈 디렉토리 HOME / USERS

# 파일 경로 : 디렉토리나 폴더의 위치를 문자열로 표기할 줄 알아야 함.
현재 사용자의 홈 디렉토리: ~
~/Documents/taeho

1. pwd : 현재의 디렉토리 위치를 알려준다.
# Print Working Directory
2. cd : 다른 디렉토리로 이동
# Change Directory
    cd ~ : home 디렉토리로 이동
    cd  : home 디렉토리로 이동
    cd / : root 디렉토리로 이동
    cd - :이전 디렉토리로 이동
3. ls : 리스트를 불러온다.
# List
ls /[폴더명]


## 절대 경로와 상대 경로

# 절대 경로
루트 디렉토리를 기준으로 어떤 파일이나 디렉토리의 고유한 경로를 표시하는 것

# 상대 경로
현재 자신이 위치해 있는 디렉토리 기준으로 경로를 나타내는 것

현재 디렉토리를 .으로 표시 cd.
상위 디렉토리를 ..으로 표시 cd..
cd../..  # 상위 상위 디렉토리로 이동
cd ../폴더명  # 상위 디렉토리로 올라갔다가 하위 디렉토리로 내려옴

cd ./폴더명 # ./를 제외해도 cd 폴더명과 동일하다.
cd 폴더명

Ctrl + A : 커서를 앞으로 이동

cd ../../../../Pictures/ # 복잡하게 상위 디렉토리로 이동하지 말고 ~(home)으로 이동후 디렉토리 이동
cd ~/Pictures/


## 주의: 파일이나 디렉토리 이름에 공백이 있을 경우

지금까지 경로와 pwd, cd, ls 커맨드에 대해 알아봤는데요. 만약 파일/디렉토리 이름에 공백이 있으면 어떻게 해야 할까요?

예를 들어 홈 디렉토리 안에 hello world라는 디렉토리가 있다고 합시다. 홈 디렉토리에서 아래 커맨드를 실행하면 오류가 나는데요.


cd hello world
ls hello world 
hello world가 두 개의 아규먼트로 인식되기 때문입니다. 이름에 공백이 들어갈 때는 특수 기호를 사용해야 합니다.

1. '' 사용

작은따옴표('')를 사용합니다.


cd 'hello world'
2. "" 사용

큰따옴표("")를 사용합니다.


cd "hello world"
3. \ 사용

역슬래시(\)를 사용합니다. (한국어 키보드에서는 ₩ 키를 사용하시면 됩니다.)


cd hello\ world
꼭 cd 커맨드뿐만이 아니라 파일 경로를 아규먼트로 받는 모든 커맨드에 적용합니다.

자 그런데, 사실 파일이나 디렉토리 이름에는 애초에 공백을 안 사용하는게 더 바람직합니다. 위에서 볼 수 있듯이 공백이 들어가게 되면 커맨드를 입력할 때 쉽게 실수를 할 수 있고, 커맨드가 제대로 작동하도록 따로 신경을 써 줘야 합니다. 그래서 이름에 여러 단어를 사용하고 싶을 때는 공백 대신 _같은 기호를 사용하는게 좋습니다. (hello world → hello_world)


## ls의 중요한 옵션들

# A 옵션 : 파일을 전부 보여준다.
-a : ALL
ls -a # 숨겨진 파일까지 모두 보여준다.

# L 옵션 : 파일의 자세한 정보를 보여준다.
ls -l
ls -al

# 파일 종류 (ls -al 파일정보를 불러오고)
total : 파일이 차지 하고 있는 공간
drwxr-xr-x+
-r----
d : 디렉토리
- : 일반파일
나머지 내용은 파일의 권한 관련 정보.

2번째 컬럼 20(숫자) : 파일과 연결된 링크 갯수
3번째 컬럼 (codeit 문자): 파일의 소유자
4번째 컬럼 : 소유자가 속한 그룹
5번째 컬럼 : 파일의 용량 바이트 (디렉토리 일 경우 우리가 생각하는 디렉토리의 용량이 아니다. 유닉스 파일 시스템과 관련이 있는데 용량의 숫자를 신경 쓸 필요는 없다.)
6번째 컬럼 : 파일의 수정 일시
7번째 컬럼 : 파일의 이름



## 루트(Root) 디렉토리 안에는 어떤 것들이 있을까?

루트 디렉토리(/) 아래에는 수많은 디렉토리들이 있는데요. 이번 레슨에서는 그중에서 알아두면 좋은 디렉토리 몇 개를 살펴볼 겁니다. 노트를 읽어보시면서 각 디렉토리 안에 어떤 것들이 있는지 살펴보셔도 재미있을 겁니다.


ls [-al] [PATH]
/bin
bin은 'binaries'의 약자인데요. binary는 간단히 말해서 컴퓨터가 실행할 수 있는 프로그램을 뜻합니다. 여기서 중요한 사실을 하나 알려드릴게요. 우리가 커맨드를 입력하면 마법같이 어떤 동작이 일어나는데요. 커맨드도 결국 어떤 프로그램입니다. 커맨드를 입력하면 커맨드에 해당하는 프로그램이 실행되는 거죠. 그리고 그 프로그램들의 일부는 바로 이 /bin 디렉토리 안에 있습니다.


ls -l /bin



/bin 디렉토리의 내용을 살펴보면, ls 같은 파일들이 보이죠? ls 커맨드를 입력하면 /bin 안에 있는 ls 프로그램이 실행되는 겁니다.

/sbin
sbin은 bin과 비슷한데, 관리자 전용 프로그램들이 있습니다.

/etc
etc에는 컴퓨터 설정 파일들이 있는데요. 각종 프로그램의 설정 파일, 관리자 권한 설정 파일 같은 것들이 있습니다.

/home 또는 /Users
/home(리눅스) 또는 /Users(맥 OS) 디렉토리에는 사용자들의 홈 디렉토리가 있습니다. 사용자의 홈 디렉토리는 사용자의 모든 파일을 저장해 놓는 곳입니다.

사실 맥 OS에도 /home 디렉토리가 있기는 한데요. 이 디렉토리는 사용되지 않습니다. 안을 확인해 보셔도 아무 파일도 없을 거에요.

/usr
usr은 사용자(user)에게 필요한 파일들을 저장하고 있습니다. /usr 안에도 각종 binary(프로그램 파일)를 저장하고 있는 bin 디렉토리가 있는데요. /bin에는 컴퓨터가 시작하거나 자신을 수리하기 위해서 꼭 필요한 커맨드들이 있고, /usr/bin에는 컴퓨터가 필요하기보다는 사용자가 필요한 커맨드들이 있습니다.



그리고 /usr 안에는 local이라는 디렉토리도 있는데요. 여기에는 사용자가 직접 설치한 프로그램과 관련된 파일들이 있습니다.

이렇게 루트 안에 있는 중요한 디렉토리 몇 개에 대해 알아봤는데요. 더 알아보고 싶으시다면 아래 링크들을 참고해 보세요!

https://www.tuwlab.com/ece/11309
https://averagelinuxuser.com/linux-root-folders-explained/




## 디렉토리와 파일 만들기: mkdir, touch

mkdir ~/unix_practice  # 디렉토리 생성
mkdir unix_practice

mkdir [디렉토리명] [디렉토리명]
mkdir Jul Aug

touch finances.txt performance.txt  # 파일 생성 
touch Aug/finances.txt Aug/performance.txt  # Aug 디렉토리 안에 파일 생성 

touch # 파일을 최근 시간으로 수정하거나 파일을 생성할 때 사용


## CLI 텍스트 에디터 vim

V : 줄 선택
커서 : 여러줄 선택
y : 복사
p : 붙여넣기
v : 선택
d : 잘라내기

# 한줄 바로 적용
yy : 복사
dd : 잘라내기

# 저장하기
:w
# 종료하기
:q

# 저장하고 나가기
:wq
// 내용을 수정 했으면 저장하고 나가기

# 파일 열기
vim [파일명.확장자]
vim hello_world.txt


## vim 사용법 정리

# vim 실행하기
vim 커맨드를 사용하면 됩니다.


vim
파일 경로를 아규먼트로 주면 해당하는 파일을 열거나, 존재하지 않으면 새로 만들어 줍니다.


vim path/to/file

# vim의 4 가지 사용 모드
vim에는 4가지 사용 모드가 있습니다:

일반 모드
입력 모드
비주얼 모드
명령 모드
각 모드에서는 아래와 같은 작업을 할 수 있습니다.

그리고 아래와 같은 단축키를 이용해서 모드를 전환할 수 있습니다.

# 단축키 정리
텍스트 입력: 입력 모드(i) → 텍스트 입력
텍스트 한 줄 복사: 일반 모드 → 복사하고 싶은 줄에 커서 위치 → yy
텍스트 한 줄 잘라내기: 일반 모드 → 잘라내고 싶은 줄에 커서 위치 → dd
특정 영역 복사: 비주얼 모드(V는 줄 단위, v는 글자 단위) → 복사하고 싶은 영역 커서로 설정 → y
특정 영역 잘라내기: 비주얼 모드(V는 줄 단위, v는 글자 단위) → 잘라내고 싶은 영역 커서로 설정 → d
텍스트 붙여넣기: 일반 모드 → 붙여넣고 싶은 위치에 커서 위치 → p
파일 저장: 명령 모드(:) → w + enter
파일 저장 + vim 종료: 명령 모드(:) → wq + enter
vim 종료 (내용 저장되지 않음): 명령 모드(:) → q! + enter


## 파일 내용 살펴보기: cat, less, head, tail

# cat (concatenate : 이어붙이다)
조회할 파일의 경로를 입력

# less ()
페이지 단위로 보여준다

커서 위아래 : 위 아래 줄로 이동
f / 스페이스 : 다음 페이지
b : 이전 페이지
G : 마지막 페이지로 이동
g : 첫 페이지로 이동
q : 종료

# head
파일의 처음 10줄을 보여준다.

# -n 옵션 (보여줄 줄수를 선택)
head -n 5 [파일명] : 처음 5줄만 보여준다.

# tail
파일 마지막 10줄을 보여준다.


## 디렉토리와 파일 옮기기, 이름 변경하기: mv

mv [작업대상] [변경할 이름]
mv path1 path2

mv [디렉토리명][디렉토리명] : 이름이 다르면 수정. # 기존에 있는 이름의 디렉토리면 해당 디렉토리로 이동

mv Aug/Jul . : Aug 안의 Jul 디렉토리를 상위 디렉토리로 이동


## mv 커맨드 사용시 주의할 점

같은 파일이름으로 mv 할경우 덮어쓰기가 된다.

# mv -i test1.txt test2.txt
파일을 덮어 쓸건지 물어본다.



## 디렉토리와 파일 복사 붙여넣기: cp
# cp path1 path2

# 파일 복사
cp -i finances.txt ../Aug

# 디렉토리 복사 (r 옵션 사용 필수)
cp -r Jul Jul_copy


## 디렉토리와 파일 삭제하기: rm

# 파일 삭제
rm [파일명]

# 디렉토리 삭제
rm -r [디렉토리명]

# i 옵션
rm -ri [파일명 또는 디렉토리명]

# f 옵션 (물어보지 않고 바로 삭제)
rm -rf [파일명 또는 디렉토리명]


## 파일과 디렉토리 커맨드 정리

# pwd (print working directory)
사용법:pwd
예:pwd
현재 디렉토리 (working directory)의 경로를 출력합니다.

# cd (change directory)
사용법:cd [PATH]
예:cd dir1
PATH 경로에 해당하는 디렉토리로 이동합니다.

아무 아규먼트 없이 cd를 하면 사용자의 홈 디렉토리로 이동합니다.

-을 사용하면 이전 경로로 돌아갑니다.

cd path/to/foo    (foo 디렉토리로 이동)
cd path/to/bar    (bar 디렉토리로 이동)
cd -              (다시 foo 디렉토리로 이동)

# ls (list)
사용법:ls [-al] [PATH]
예:ls -al dir1
PATH에 해당하는 디렉토리 / 파일 정보를 보여줍니다. PATH 아규먼트를 안 주면 현재 디렉토리 정보를 보여줍니다.

a 옵션: 숨겨진 파일을 포함한 모든 파일을 보여줍니다.

l 옵션: long format을 사용해서 더 자세한 정보를 보여줍니다.

a, l 외에도 많은 옵션이 있습니다. man ls를 통해 확인해 보세요!

# mkdir (make directory)
사용법:mkdir PATH1 PATH2 ...
예:mkdir dir2
디렉토리를 생성합니다. 여러 경로를 한꺼번에 줘서 여러 디렉토리를 한꺼번에 만들 수도 있습니다.

# touch (touch file)
사용법:touch PATH1 PATH2 ...
예:touch file1.txt
경로에 해당하는 파일을 생성합니다. (원래는 파일의 마지막 접근 시간 / 수정 시간을 업데이트하는데 쓰이지만 파일이 존재하지 않으면 새로 생성하기 때문에 파일 생성 용도로도 쓰입니다.)

# vim
사용법:vim [PATH]
예:vim file1.txt
vim 텍스트 에디터를 실행합니다. 이 레슨을 참고하세요.

# cat (concatenate)
사용법:cat PATH1 PATH2 ...
예:cat file1.txt
경로에 해당하는 파일들의 내용을 출력합니다. 파일이 여러 개인 경우 내용을 모두 붙여서 출력합니다.

# less
사용법:less PATH
예:less file1.txt
PATH에 해당하는 파일을 페이지 단위로 나눠서 보여줍니다.

단축키:
줄 이동: 위쪽 / 아래쪽 방향키
다음 페이지: space 아니면 f
이전 페이지: b
마지막 페이지: G
처음 페이지: g

# head
사용법:head [-n count] PATH
예:head -n 5 file1.txt
PATH에 해당하는 파일의 처음 10줄을 출력합니다.

n 옵션: 출력되는 줄 개수를 바꿉니다.

# tail
사용법:tail [-n count] PATH
예:tail -n 5 file1.txt
PATH에 해당하는 파일의 마지막 10줄을 출력합니다.

n 옵션: 출력되는 줄 개수를 바꿉니다.

# mv (move)
사용법:mv [-i] SOURCE_PATH DEST_PATH
예:mv -i file1.txt file2.txt

mv -i file1.txt dir1
디렉토리/파일을 이동하거나 이름을 변경합니다. 두 번째 아규먼트(DEST_PATH) 가 이미 존재하는 디렉토리의 경로일 경우 SOURCE_PATH에 해당하는 디렉토리/파일을 그 안으로 이동하고, 그렇지 않으면 DEST_PATH로 이름 변경합니다.

i 옵션: 이동/이름 변경을 할 때 똑같은 이름의 디렉토리/파일이 있으면 덮어씌워집니다. 확인을 하면서 mv를 하려면 i 옵션을 사용하면 됩니다.

# cp (copy)
사용법:cp [-ri] SOURCE_PATH DEST_PATH
예:cp -i file1.txt file2.txt

cp -ri dir1 dir2
디렉토리/파일을 복사합니다. 두 번째 아규먼트(DEST_PATH) 가 이미 존재하는 디렉토리의 경로일 경우 SOURCE_PATH에 해당하는 디렉토리/파일을 그 안으로 복사하고, 그렇지 않으면 DEST_PATH라는 이름으로 복사합니다.

r 옵션: 디렉토리를 복사할 때는 꼭 r 옵션을 써야 합니다.

i 옵션: 복사할 때 똑같은 이름의 파일이 있으면 덮어씌워집니다. 확인을 하면서 cp를 하려면 i 옵션을 사용하면 됩니다.

# rm (remove)
사용법:rm [-rif] PATH1 PATH2 ...
예:rm file1.txt file2.txt

rm -rf dir1
경로에 해당하는 파일/디렉토리들을 지워줍니다.

r 옵션: 디렉토리를 삭제할 때는 꼭 r 옵션을 써야 합니다.
i 옵션: 복사할 때 각 파일을 정말 지울 것인지 물어봅니다.
f 옵션: 지울 것인지 절대 확인하지 않고 바로 지웁니다.


## 외부 프로그램을 설치하는 방법
우분투에서는 apt라는 커맨드
맥 OS에서는 homebrew라는 커맨드


## Ubuntu에서 외부 프로그램 설치하기: apt

ex) 
apt update
sudo : 관리자 모드 비밀번호를 묻는다.
sudo apt update

sudo apt install mc

# macOS에서 외부 프로그램 설치하기: homebrew

# sudo가 뭘까?
각종 튜토리얼이나 온리인 자료를 참고하다 보면 sudo라는 커맨드를 마주칠 수도 있습니다. ('Ubuntu에서 외부 프로그램을 설치하기' 영상을 보신 분들은 이미 마주쳐봤죠?)

sudo는 뭘 하는 커맨드일까요?

유닉스 운영 체제에서 특정 작업을 하려면 관리자 권한이 필요할 때가 있습니다. 특히 설치 관련 작업을 할 때 필요한 경우가 많은데요. 우리가 보통 컴퓨터에서 사용하는 계정은 일반 계정이기 때문에 관리자 권한이 없습니다. 그래서 관리자 권한이 필요한 커맨드를 실행하려고 하면 권한 오류(permission denied)가 나는 거죠. 하지만, 잠시 관리자 권한을 획득할 수는 있습니다. 바로 sudo 커맨드를 통해서죠.


sudo command
sudo 뒤에 command를 쓰면, 관리자 권한을 가지고 command가 실행됩니다. 그러면 권한 문제없이 command를 실행할 수 있는 거죠. sudo를 처음 실행하면 현재 계정의 비밀번호를 물어보는데, 한 번 입력하면 10분~15분 정도는 다시 입력하지 않아도 됩니다.

예)
sudo ls /path/to/file

sudo cat /path/to/file

sudo apt install mc  # Ubuntu 예시
사실 sudo 커맨드를 자세히 이해하려면 유닉스의 사용자 권한(permissions)을 잘 이해하고 있어야 하는데요. 일단 지금은, 설치 튜토리얼 같은 걸 따라 하다 보면 sudo라는 커맨드를 마주칠 수 있고, sudo 커맨드는 일시적으로 일반 유저에게 관리자 권한을 부여하는 커맨드라는 것 정도만 기억해 두시면 좋을 것 같습니다!


## WSL로 윈도우에 있는 파일 접근하기

WSL을 사용하면 듀얼 부팅이나 가상 머신을 사용하는 것보다 더 가볍게 리눅스 환경을 이용할 수 있었습니다. 사실 WSL을 사용하는 데에는 또 다른 장점이 있는데요. 바로 윈도우에 있는 파일에 쉽게 접근할 수 있다는 겁니다. 듀얼 부팅이나 가상 머신을 사용하면 별도의 리눅스 환경이 생성되기 때문에 리눅스를 사용할 때는 윈도우에 있는 파일에 접근하기 어려운데요. WSL은 윈도우 안에 존재하는 '하위 시스템'이기 때문에 윈도우 파일에 쉽게 접근할 수 있습니다. 어떻게 접근하는지 바로 알아볼게요.

윈도우 파일은 /mnt/c 경로에 있습니다. /mnt/c 가 윈도우의 C: 드라이브입니다.



(ls를 했을 때 접근 권한이 없는 파일들이 있을 수도 있습니다.)

사용자의 홈 디렉토리는 C: 드라이브의 Users 디렉토리 안에 있는데요. Users 뒤에 윈도우 사용자 이름을 붙이면 됩니다. 그러니까 사용자 이름이 username이라면 username 사용자의 홈 디렉토리는 /mnt/c/Users/username이 되는 거죠.



이미 /mnt/c에 있었으니까 상대 경로를 사용해서 Users/codeit 안으로 들어갔습니다.

홈 디렉토리에서 원하는 위치로 이동하면 되겠죠?





윈도우에 있는 파일과 디렉토리가 WSL에서도 똑같이 나오는 걸 확인하실 수 있습니다.

cd나 ls같은 커맨드뿐만이 아니라 이번 토픽에서 배운 모든 커맨드, 그리고 아직 배우지 않은 더 복잡한 커맨드들도 사용할 수 있습니다. 이건 개발을 할 때 아주 유용한데요. 윈도우 환경에서 개발을 하면 프로젝트 파일들이 모두 윈도우 파일 시스템에 있겠죠? 리눅스 툴을 활용해서 프로젝트에 대한 테스트나 작업을 해보고 싶다면 WSL을 켜서 윈도우 파일에 바로 접근하면 됩니다. 지금은 그렇게 와닿지 않더라도 일단 윈도우 파일은 /mnt/c  안에 있다는 사실 기억해 두시면 좋을 것 같습니다!

*참고로 윈도우에서 리눅스 파일에 접근하는 것도 가능은 하지만 윈도우 툴로 리눅스 파일을 열거나 수정하면 리눅스 파일 시스템이 손상될 수 있기 때문에 권장되지 않습니다.


## 윈도우 PowerShell 알아보기

PowerShell이란?
윈도우에도 윈도우 전용 커맨드라인 툴들이 있습니다. 그 중 하나가 PowerShell이라는 툴인데요. 시스템 관리, 자동화, 개발 등 다양한 작업을 할 수 있고 기본 유닉스 커맨드도 지원합니다.

이번 레슨에서는 PowerShell에 대해 간단히 설명드릴게요.

PowerShell vs cmd(명령 프롬프트)
윈도우 유저라면 cmd(명령 프롬프트/Command Prompt)를 들어보셨을 수도 있는데요. cmd도 윈도우 전용 커맨드라인 툴입니다.

하지만 PowerShell에 비해 기능이 적고 cmd에서 할 수 있는 모든 건 PowerShell에서도 할 수 있습니다. 간단한 작업을 할 때는 cmd를 써도 되지만, PowerShell이 더 복잡한 것도 아니니까 그냥 PowerShell을 쓰는게 무방합니다.

PowerShell 도움말 업데이트하기
PowerShell을 처음 사용한다면 도움말을 업데이트하는 것을 추천드립니다. 그래야 나중에 커맨드의 도움말을 제대로 확인할 수 있습니다. 도움말 업데이트도 PowerShell에서 할 수 있습니다.

윈도우 메뉴에 'powershell'을 검색하고 관리자로 실행해 주세요.


이게 PowerShell인데요. 여기 Update-Help라고 입력한 다음 엔터를 누르세요.

Update-Help

위와 같은 오류가 발생할 수도 있는데요. 무시하시고 넘어가셔도 괜찮습니다.

PowerShell 사용해보기
관리자 권한이 필요할 때는 관리자로 실행하지만, 보통은 일반 사용자로 실행합니다.

기존의 PowerShell 창을 닫고 일반 사용자로 PowerShell을 실행해 주세요.


PowerShell의 배경색이나 글자색, 글자 크기 등을 바꾸고 싶다면 환경 설정으로 들어가면 됩니다.

PowerShell은 기본 유닉스 커맨드를 지원한다고 했는데요. 어떤 커맨드를 지원하는지 알아보겠습니다.

PowerShell과 유닉스 커맨드
PowerShell에서는 아래 유닉스 커맨드를 사용할 수 있습니다:

man
pwd
cd
ls
mkdir
cat
mv
rm
cp
date
clear
이 외에 다른 것들도 사용할 수 있는데, 이 링크를 참고하시면 됩니다.

PowerShell에서는 기본적으로 cmdlet이라고 하는 커맨드들을 사용하는데요. cmdlet은 보통 아래와 같이 생겼습니다.

Action-Object  
하고 싶은 동작과 대상 사이에 - 를 넣는 거죠.

PowerShell에 ls같은 걸 입력하면 ls는 Get-ChildItem이라는 cmdlet을 가리키고 있기 때문에 ls를 사용할 수 있는 겁니다 (이럴 때 ls를 Get-ChildItem의 alias(에일리어스)라고 합니다). 하지만 결국 유닉스의 ls가 아닌 Get-ChildItem이 호출되는 것이기 때문에 옵션을 주는 방법과 커맨드의 동작은 조금 다를 수 있습니다.

실제 유닉스 커맨드와 차이점
경로
우선 윈도우에서는 경로를 표시할 때 / 대신 \(한국 키보드는 ₩)를 사용하는데요. PowerShell에서 /를 입력해도 되지만 프롬프트에 경로를 표시할 때나 자동완성을 활용할 경우 \가 사용됩니다.

옵션
cmdlet 옵션은 한 글자가 아닌 전체 단어입니다 (예: -Recurse). 유닉스 커맨드처럼 한 글자(예: -r)로 줄여 쓸 수 있는 옵션들도 있지만 그럴 수 없는 옵션들도 많고, 일일이 외워야 하기 때문에 PowerShell 옵션을 그대로 사용하는 것을 추천드립니다. 자주 필요한 옵션들은 각 커맨드를 살펴보면서 설명해 드릴게요.

지금부터 유닉스 환경과 PowerShell 환경에서 실행했을 때 차이가 있는 커맨드들을 정리해 드릴 겁니다.

man
man 커맨드를 실행하면 aliasing 하고 있는 cmdlet에 대한 도움말을 보여줍니다.

man ls

ls는 Get-ChildItem을 aliasing 하고 있기 때문에 Get-ChildItem에 대한 도움말이 나옵니다. 여기서 커맨드에 사용할 수 있는 옵션들을 확인할 수 있겠죠?

더 자세한 정보를 보고 싶다면 -Full 옵션을 사용하면 됩니다.


man -Full ls
ls
PowerShell에서 ls를 하면 파일/폴더 이름뿐만이 아닌 다양한 정보가 나옵니다. .으로 시작하는 파일들도 보이고요.

유닉스의 ls -al과 비슷하죠?

touch
PowerShell에 touch라는 alias는 없습니다. 그래서 파일을 생성할 때는 다른 방법을 사용해야 하는데요. 예를 들어 아래와 같은 방법을 사용할 수 있습니다.


$null > filename
filename 이름을 가진 빈 파일이 생성됩니다.

cat
PowerShell의 cat은 아규먼트를 하나만 받습니다. 여러 파일을 아규먼트로 주면 오류가 나니까 주의해 주세요.

cat testfile.txt testfile2.txt # 오류

mv
bash/zsh에서 mv를 했을 때 목적지에 똑같은 이름의 파일/폴더가 있으면 그걸 덮어써버립니다. 하지만 PowerShell에서는 파일이 이미 존재한다는 오류가 납니다.

mv testfile.txt testfile2.txt # 오류

만약 파일을 덮어쓰고 싶다면 -Force 옵션을 사용하면 됩니다.

mv -Force testfile.txt testfile2.txt

cp
mv와 마찬가지로 PowerShell에서는 파일/폴더를 덮어쓰지 않고 오류가 나는데요. -Force 옵션을 사용하면 파일/폴더를 덮어쓸 수 있습니다.

그리고 폴더를 복사할 때는 -Recurse 옵션을 사용해야 합니다.

cp -Recurse foo bar


foo 폴더를 bar라는 이름으로 복사했습니다.

참고로 -Recurse 옵션을 안 줘도 오류 없이 실행되는데, 이런 경우 폴더 자체만 복사되고 안의 내용물은 복사되지 않습니다.


이번에는 foo 폴더를 baz라는 이름으로 복사했는데 baz 안에는 아무것도 없죠?

rm
폴더를 삭제할 때는 -Recurse 옵션을 사용해야 합니다.

사실 -Recurse 안 줘도 되는데, 그러면 안에 있는 파일을 지울 것인지 물어봅니다.

유닉스와 다르죠? 유닉스에서 -r 옵션 없이 폴더를 지우려고 하면 오류가 납니다.

IDE(통합 개발 환경)와 PowerShell
개발을 하다 보면 커맨드라인이 필요한 경우가 많은데요. 따로 터미널을 열지 않고 작업할 수 있도록 대부분의 IDE에서는 IDE 내부에서 터미널을 열 수 있습니다. Visual Studio Code(VScode)나 PyCharm 같은 경우 PowerShell을 기본 터미널로 사용하기 때문에(윈도우의 경우) PowerShell에 익숙하면 좋겠죠?

VSCode의 터미널

PyCharm의 터미널

IDE 안에서 코드 작성과 커맨드 실행을 동시에 할 수 있는 거죠. PowerShell에서 기본 유닉스 커맨드를 실행할 수 있기 때문에 아주 편리할 겁니다.


## 





