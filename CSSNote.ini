## CSS
<link rel="stylesheet" href="style.css">

id : 하나의 요소에 지정
class : 다수의 요소에 지정


색상 이름(Color Names) 색상 코드(Color Codes)
물감(CMYK) : yellow, magenta, cyan
빛(RGB) : red, green, blue
#ff0000 : red
#ffff00 : red + green = yellow
#ffffff : red + green + blue = white

# RGB
16진수 대신 평소에 쓰는 10진수로 각 빛의 세기를 표시
0~255 사이의 값을 쓴다.

red = rgb(255, 0, 0)
yellow = rgb(255, 255, 0)
white = rgb(255, 255, 255)

# RGBA
RGB 표기에다가 불투명도(Aplha)를 추가한 것
불투명도는 0~1 사이의 소수점 숫자
red = rgb(255, 0, 0, 1)
red alpha 50% = rgb(255, 255, 0, 0.5)
white = rgb(255, 0, 0, 0)


# 픽셀(px)
# em 
인쇄에서 전통적으로 대문자 M의 크기
CSS에서 1em = 부모 태그의 font-size
# rem
1rem = <html>태그의 font-size

h1 {
  font-size: 2rem;
  margin: 1rem 0;
}


## 이브 클랭의 파란색
html {
  font-size: 16px;
}

body {
  font-family: 'Noto Sans KR', sans-serif;
  margin: 40px 0;
  text-align: center;
}

.artist {
  color: rgb(0, 47, 167);
  font-family: Rajdhani;
  font-size: 3rem;
  font-weight: 700;
  letter-spacing: 8px;
  margin: 0;
}

.title {
  color: #747780;
  font-size: 1.25em;
  font-weight: 400;
  margin: 0 0 24px 0;
}

.ikb {
  background-color: rgb(0, 47, 167);
  height: 320px;
  margin: 2.5em auto;
  width: 320px;
}

.info {
  font-size: 24px;
}

.location {
  font-size: 24px;
  margin: 8px 0;
}

.date {
  color: rgba(0, 0, 0, 0.5);
  font-family: 'Cormorant Garamond', serif;
  font-size: 18px;
  margin: 8px 0;
}


## 기본 개념 정리
# CSS 규칙
선택자 {
  속성: 속성값;
  속성: 속성값;
}
CSS 속성을 하나하나 태그에 넣기보다는 CSS 규칙을 정해 놓고 사용하는 걸 권장합니다.

# CSS 선택자
규칙에서 요소를 선택하는 데 사용하는 부분입니다.

# 태그 이름
h1, div 같은 걸 쓰면 그 태그에 해당하는 요소들에 모두 스타일을 적용합니다. 예를 들어서 모든 h3 태그의 글자 크기를 24px로 하려면 아래와 같이 씁니다.

h3 {
  font-size: 24px;
}

# 아이디 (id)
맨 앞에 샵을 붙여서 #아이디_이름과 같은 문법으로 씁니다. 참고로 아이디는 한 페이지 안에서 중복으로 쓰면 안 됩니다. 예를 들어서 아이디 이름이 hallasan인 태그에 글자색을 넣으려면 아래와 같이 씁니다.

<h3>우도</h3>
<h3 id="hallasan">한라산 국립공원</h3>
<h3>성산 일출봉</h3>
<h3>군산 오름</h3>
#hallasan {
  color: #f56513;
}

# 클래스 (class)
아이디는 여러 개의 요소에 중복해서 쓸 수 없기 때문에 클래스를 사용합니다. 맨 앞에 마침표를 붙여서 .클래스_이름과 같은 문법으로 씁니다. 예를 들어서 클래스 이름이 place인 모든 태그에 글자 크기와 굵기를 넣으려면 아래와 같이 씁니다.

<h3 class="place">우도</h3>
<h3 class="place" id="hallasan">한라산 국립공원</h3>
<h3 class="place">성산 일출봉</h3>
<h3 class="place">군산 오름</h3>
.place {
  font-size: 16px;
  font-weight: 400;
}

# 색상 단위
# 색상 이름
red, green, yellow 같은 영어로 된 색상 이름입니다. 세세한 색 표현이 어려워서 자주 쓰지는 않으니까 이런 게 있구나 정도만 알고 넘어갑시다.

# 색상 코드
샵(#)으로 시작하는 여섯 글자의 코드인데요. 빨강, 초록, 파랑 값을 0 ~ 255 사이 정수로 표현한 다음, 이걸 16진수로 만들어서 각각 두 글자씩, 총 여섯 글자를 연속으로 써놓은 값입니다. 예를 들어서 노란색은 아래와 같이 씁니다.

#FFFF00

# RGB
빨강, 초록, 파랑 값을 우리가 평소에 쓰는 10진수로 써서 색상을 나타냅니다. 빨강, 초록, 파랑은 0 ~ 255 사이 정수 값입니다. 예를 들어서 노란색은 아래와 같이 씁니다.

rgb(255, 255, 0)

# RGBA
빨강, 초록, 파랑, 알파 값을 순서대로 써서 색상을 나타냅니다. 빨강, 초록, 파랑은 0 ~ 255 사이 정수 값이고, 알파는 0 ~ 1 사이의 소수 값입니다. 알파 값은 1에 가까울수록 불투명해지고, 0에 가까울수록 투명해집니다. 예를 들어서 반투명한 노란색은 아래와 같이 씁니다.

rgba(255, 255, 0, 0.5)

# 절대적인 크기 단위
# 픽셀 px
절대적인 단위입니다. 화면을 표시하는 기준이 되는 크기입니다.

# 상대적인 크기 단위
# 퍼센트 %
부모 태그의 크기에 상대적으로 지정할 때 씁니다. 예를 들어서 부모 태그의 height의 절반 값을 쓰고 싶다면, height: 50%처럼 쓸 수 있습니다.

<div id="parent">
  저는 높이가 320px입니다.
  <div id="child">
    저는 높이가 160px이에요!
  </div>
</div>
#parent {
  background-color: #A655ED;
  height: 320px;
}

#child {
  background-color: #6942D6;
  height: 50%;
}

# em
em은 전통적으로 인쇄술에서 대문자 M의 크기를 나타내는 단위입니다. CSS에서 em은 부모 태그 font-size의 크기인데요. 예를 들어서 부모 태그 글자 크기의 4배를 하고 싶다면, 4em처럼 쓰면 됩니다. 아래 예시에서 #child는 #parent의 자식인데요, #parent의 글자 크기가 16px이기 때문에 4em이라고 하면 16px * 4 = 64px이 됩니다.

<div id="parent">
  저는 16px입니다.
  <div id="child">
    저는 64px이에요!
  </div>
</div>
#parent {
  font-size: 16px;
}

#child {
  font-size: 4em;
}

# rem
rem은 루트(root) em이라는 의미의 단위입니다. CSS에서 rem은 <html> 태그의 font-size  크기입니다. 예를들어서 <html> 태그 글자 크기에서 2배를 하고 싶다면, 2rem이라고 쓰면 됩니다. 아래 예시에서 #other는 글자 크기가 2rem인데요. <body>는 18px이지만 <html>은 16px이기 때문에 16px * 2 = 32px이 됩니다.

<html>
  <body>
        저는 18px 입니다.
        <div id="other">
      저는 32px이에요!
        </div>
  </body>
</html>
html {
  font-size: 16px;
}

body {
  font-size: 18px;
}

#other {
  font-size: 2rem;
}






























# CSS 레이아웃
Position
Flexbox
Grid

블록(block) // 위에서 아래로
<h1>, <div>, <p>

인라인(inline) // 글쓰기 처럼 순차적으로
<a>, <span>, <img>

인라인 블록(inline-block) // 크기 값을 주고 싶을때 사용

# Position
static : Position 속성의 기본 값, 원래 있어야 할 위치에 배치
top, right, bottom, left // 값이 커질수록 안쪽 방향, 값이 작아질수록 바깥쪽 방향

relative : 기본 위치에서 설정한 위치로 이동한다. 다른 요소 위쪽으로 이동 시킬수 있다.
absolute : 부모 요소를 기준으로 위치를 변경 할 수 있다. 
# inset: 0; // (top: 0; left: 0; bottom: 0; right: 0;) 동일
# inset: 10px; //테두리에 10px 만큼 안쪽으로 줄어든다.

fixed : 브라우저를 기준으로 위치를 설정하고 드레그로 내리더라도 화면의 위치에서 고정된다.
# 메뉴 nav 에서 사용된다.
메인 내용이 겹치면 main에 margin 값을 줘서 위치를 수정한다.


sticky : 


# 템플릿 코드 설명
커버 이미지는 .cover 클래스 <div> 안에 있고, 재생 버튼에는 .cover-play-icon이라는 클래스를 씁니다.

<div class="cover">
  <img
    class="cover-image"
    src="images/img_cafe.png"
    alt="카페에서 일할 때 커버 이미지"
 >
  <img
    src="images/icon_play.png"
    alt="재생 아이콘"
    class="cover-play-icon"
 >
</div>
.cover 클래스에서는 252px의 정사각형으로 이미지를 꽉 채워서 보여 주고 있습니다. overflow: hidden과 border-radius: 24px을 사용해서 둥근 모서리로 처리해 주고 있습니다.

.cover-play-icon이라는 클래스는 기본적으로 display: none으로 화면에서 안 보이다가 .cover에 마우스를 올리는 경우 display: block으로 화면에 보여 줍니다.

.cover {
  width: 252px;
  height: 252px;
  border-radius: 24px;
  overflow: hidden;
}

.cover-image {
  width: 100%;
  height: 100%;
}

.cover-play-icon {
  display: none;
  width: 72px;
  height: 72px;
}

.cover:hover .cover-play-icon {
  display: block;
}

# 해설
absolute 포지션을 사용하면 가장 가까운 포지셔닝이 된 조상 요소를 기준으로 배치할 수 있습니다. 그리고 왼쪽에서 28px 만큼 배치하려면 left: 28px 아래쪽에서 28px 만큼 배치하려면 bottom: 28px을 쓰면 되겠죠?

position: absolute;
left: 28px;
bottom: 28px;
일단 .cover-play-icon 선택자에서 이 코드들을 추가해 줄게요.

.cover-play-icon {
  display: none;
  width: 72px;
  height: 72px;
  position: absolute;
  left: 28px;
  bottom: 28px;
}
이렇게 했더니 문제가 있습니다. 아래처럼 화면을 기준으로 왼쪽 28px, 아래쪽 28px에 배치되는 건데요.

실행 예시 3

앞에서 배웠던 absolute 포지션의 정의에 대해서 다시 생각해 봅시다. 가장 가까운 포지셔닝이 된 조상 요소를 기준으로 배치된다고 했죠? .cover 클래스 <div> 를 기준으로 배치해야 우리가 원하는 대로 배치할 수 있을 거 같은데, 이 <div> 는 static 포지션입니다. 포지셔닝이 되지 않은 상태죠. 그래서 static 대신에 relative로 바꿔주겠습니다. relative는 원래 위치를 기준으로 배치하기 때문에, 포지션만 바꾸고 위치를 지정하지 않으면 그 자리에 그대로 있습니다.

.cover {
  width: 252px;
  height: 252px;
  border-radius: 24px;
  overflow: hidden;
  position: relative;
}
이렇게 하면 원하는 대로 잘 배치되네요! 이런식으로 요소에 뭔가를 겹쳐서 배치하고 싶을 때 absolute 포지션은 정말 많이 활용하는데요. 이것도 참고로 알아 두시면 좋을 거 같습니다.


## 
html {
  font-family: Pretendard, sans-serif;
  word-break: keep-all;
}

body {
  background-color: #000;
  color: #fff;
  margin: 0;
}

.hero {
  position: relative;
}

.bg {
  width: 100%;
  opacity: 0.5;
}

.hero-heading {
  position: absolute;
  inset: 0;
  margin: 0;
  padding: 24px;
  background-image: linear-gradient(rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 1) 100%);
}

.hero-heading h1 {
  margin: 0;
  font-weight: 400;
  font-size: 80px;
  line-height: 95px;
  text-align: center; 
  color: #ffffff;
}

.hero-heading .small {
  font-size: 48px;
  line-height: 57px;
  text-align: center;
  color: rgba(217, 217, 217, 0.5);
}

.hero-heading .big {
  font-weight: 700;
}



## 내비게이션 바 1
# 템플릿 코드 설명
<body> 태그 안에 있는 태그들 중 가장 위쪽에 <header> 라는 태그가 있습니다. 여러 가지 스타일을 적용하고 있는데, 그중에서도 높이가 90px입니다. 이점을 눈여겨 봐주세요.

# index.html

<header>
  <div class="wrap">Codeit Music</div>
</header>
style.css

header {
  height: 90px;
  padding: 16px;
  background-image: linear-gradient(
    180deg,
    #000000 15.1%,
    rgba(0, 0, 0, 0) 100%
  );
  font-weight: 700;
}


# 해설
fixed 포지션은 브라우저 화면을 기준으로 배치합니다. 화면을 기준으로 고정된 위치에 요소를 배치해서 항상 떠 있는 것 같은 효과를 만들 수 있죠. 실습 결과처럼 보통 내비게이션은 브라우저 화면 위쪽에 꽉 차도록 배치해서, 스크롤에 상관없이 항상 쓸 수 있도록 만듭니다. 왼쪽에서 0px, 위쪽에서 0px로 배치하고 width: 100% 를 하거나, 오른쪽에서 0px로 하면 되는데요. 저는 width: 100% 로 작성해 볼게요. 즉, header 선택자에 이런 코드를 추가할 겁니다.

header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 90px;
  padding: 16px;
  background-image: linear-gradient(
    180deg,
    #000000 15.1%,
    rgba(0, 0, 0, 0) 100%
  );
  font-weight: 700;
}
그런데 이렇게만 하면 문제가 하나 있습니다. 맨 위로 스크롤했을 때 본문이랑 내비게이션이 겹쳐서 보이는 문제인데요.

실행 예시 2

본문 내용이랑 겹치지 않으려면 내비게이션 높이만큼 여백을 추가하면 됩니다. 내비게이션의 높이는 90px이고요, 저는 <body> 태그에 위쪽 마진을 90px만큼 추가해 줄게요.

body {
  margin: 90px 0 0;
  background-color: #000;
  color: #fff;
}



## sticky 포지션
// 지정한 위치로 이동하기 전까지는 static처럼 작동한다.
// 지정한 위취로 이동하면 fixed 처럼 고정되지만 부모 요소가 화면을 벗어 나면 함께 벗어난다.
// 부모 요소 밖에서는 동작하지 않는다.
// 부모 요소가 화면 위로 올라 갈 경우 함께 올라간다.


## z-index
// z-index: 1;   // 숫자가 높을수록 위로 올라와서 요소들을 덮는다.
// 숫자가 같은 경우 코드의 아래쪽에 있는 요소가 위쪽으로 올라온다.


# 해설
여러 요소를 포지셔닝할 때 앞뒤 순서를 정하려면 z-index 속성을 쓰면 됩니다. 일단 z-index를 설정해야겠다 생각하셨다면 이미 절반은 해결한 겁니다.

기본적으로 z-index를 정하지 않으면 기본값은 auto 인데, 이 값은 0이랑 마찬가지입니다. 지금 포지셔닝된 요소들을 생각해 보면 내비게이션, 커버 이미지, 배지 이렇게 있는데요. 일단은 z-index 값이 모두 똑같다고 할 수 있습니다.

z-index의 값이 같다면 코드 상에서 아래 줄에 있을수록 앞쪽에 보이는데요. HTML 코드에서는 내비게이션, 커버 이미지, 배지 순서대로 코드가 적혀 있기 때문에 커버 이미지랑  배지가 내비게이션 앞쪽에 보이는 것입니다.

그럼 이 문제를 해결하려면 두 가지 방법이 있겠죠? 내비게이션 코드를 아래쪽으로 옮기거나, z-index를 바꿔 줘야 합니다. 그런데 내비게이션은 sticky 포지션을 활용하고 있기 때문에 위치를 바꿀 수 없습니다.

그래서 z-index 값을 다른 요소들(커버 이미지랑 배지) 보다 높은 값으로 바꿔 주면 되겠네요. z-index를 0보다 큰 값인 1로 정하면 다른 요소들 보다 앞에 보일 겁니다.

header {
  position: sticky;
  top: 0;
  z-index: 1;
  height: 90px;
  padding: 16px;
  background-image: linear-gradient(
    180deg,
    #000000 15.1%,
    rgba(0, 0, 0, 0) 100%
  );
  font-weight: 700;
}



## z-index가 내 맘대로 안될 때
앞에서 z-index에 대해서 간단하게 배워 봤습니다. 사용법은 어렵지 않지만 실제로 z-index를 쓰다 보면 종종 마음대로 동작하지 않을 때가 있는데요. 이럴 때 도움이 되는 쌓임 맥락(Stacking Context)이라는 개념에 대해 알아보겠습니다. 처음에는 조금 복잡하게 느껴질 수도 있으니까, 일단 쌓임 맥락의 큰 개념만이라도 잡고 넘어가는 걸 목표로 해 봅시다.

z-index: 9999로도 해결이 안 되는 이유
빨강, 초록, 파랑 사각형 세 개를 배치했는데, 원하는 대로 배치가 안 되는 경우를 한번 예를 들어 보겠습니다. 아래 코드를 천천히 읽어 보고 어떤 게 앞에 보이고 어떤게 뒤에 보일지 한번 예상해 보세요. 일부러 여백을 좀 두었으니 스크롤을 천천히 내리면서 생각해 봅시다. 종이랑 펜을 가지고 생각한 모습을 그려 보셔도 좋습니다.

<div class="red">
  <div class="green"></div>
</div>
<div class="blue"></div>
.red {
  background-color: #e46e80;
  position: absolute;
  width: 100px;
  height: 100px;
  top: 100px;
  left: 100px;
  z-index: 1;
}

.green {
  background-color: #32b9c1;
  position: absolute;
  width: 50px;
  height: 50px;
  top: 25px;
  left: 25px;
  z-index: 3;
}

.blue {
  background-color: #5195ee;
  position: absolute;
  width: 100px;
  height: 100px;
  top: 150px;
  left: 150px;
  z-index: 2;
}
.red, .green, .blue는 모두 absolute 포지션이고, z-index가 1, 3, 2니까 초록, 파랑, 빨강 순서로 앞에 보일 거 같습니다. 하지만 이 코드의 실행 결과는 의외인데요.

0

z-index: 2인 .blue가 z-index: 3인 .green 보다 앞 쪽에 보입니다. 분명 z-index 값이 크면 앞 쪽에 보인다고 배웠는데, 이러니까 이상합니다. 심지어 z-index: 3을 z-index: 9999로 바꿔도 안 됩니다. 이렇게 되는 이유는 z-index 값은 단순히 서로 비교만 하는 게 아니라, 쌓임 맥락(Stacking Context) 안에서 비교하기 때문인데요.

쌓임 맥락
쌓임 맥락을 간단히 설명하자면, z-index를 묶어서 생각하는 범위라고 할 수 있는데요. 앞에서 코드로 살펴본 예시를 가지고 다시 생각해보죠.

<body> 태그 아래에 이렇게 .red, .green 그리고 .blue가 배치되어 있습니다. 그리고 각각 z-index 값이 있죠. 여기서 .green 태그의 위치를 잘 보세요. .red 태그의 자식인데요. 마침 조건이 맞아서 .red에는 쌓임 맥락이 만들어진 상태입니다.

.red 태그에서 쌓임 맥락이 만들어졌기 때문에 .red의 모든 자손 태그들은 (빗금 친 영역) 마치 .red와 마찬가지로 z-index: 1로 묶어서 생각할 수 있습니다. 그래서 항상 .blue 뒤쪽에 배치되는 거죠.

심지어 .green에서 z-index: 9999라고 하더라도, 바깥에서 보면 쌓임 맥락 때문에 z-index: 1과 마찬가지로 처리해서, 아무런 효과가 없는 것입니다. 왜 이런 식으로 동작하는 걸까요?

쌓임 맥락을 쓰면 좋은 점이 하나 있는데요, 쌓임 맥락 안에서는 바깥을 신경 쓰지 않고 z-index 값을 쓸 수 있다는 점입니다. 이게 간단한 코드에서는 와닿지 않는데, HTML 태그가 수백 개, 수천 개, 수만 개 있다고 생각해보시면 이것들의 z-index를 고려해서 CSS 코드를 쓰는 게 만만치 않겠죠? 쌓임 맥락만 분명하다면 바깥은 신경 쓰지 않고 코드를 쉽게 쓸 수 있습니다. 덕분에 내비게이션 같은 걸 만들 때도 z-index 숫자를 무한정 크게 하지 않아도 깔끔하게 값을 쓸 수 있죠.

쌓임 맥락 만들기
쌓임 맥락이라는 개념 자체는 복잡하지 않지만 쌓임 맥락이 만들어지는 조건은 굉장히 복잡합니다. 몇 가지만 소개해드리자면 이렇습니다:

문서의 루트 요소(<html>)
position이 absolute이거나 relative이고, z-index가 auto가 아닌 경우
position이 fixed이거나 sticky인 경우
플렉스박스(우리가 다음 챕터에서 배울 개념)나 그리드(우리가 다음 다음 챕터에서 배울 내용)의 자식 중 z-index가 auto가 아닌 경우
opacity가 1보다 작은 요소
…

앞서 봤던 예시에서는 두 번째 조건인 "position이 absolute이거나 relative이고, z-index가 auto가 아닌 경우"에 해당했기 때문에 쌓임 맥락이 만들어진 겁니다.

솔직히 말씀드리면 저도 이 내용을 외우고 있지는 않습니다. 정말 많은 조건이 있는데, 혹시 궁금하신 분들은 MDN 문서의 쌓임 맥락 페이지를 참고해 보세요. 이 조건들을 모두 외우고 쓰면 좋겠지만 쉬운 일이 아닙니다. 사실 이런 조건들은 웹 브라우저를 만드는 사람들이 꼼꼼하게 챙기면 되고, 우리는 좀 더 실용적으로 접근해 보겠습니다.

쌓임 맥락은 언제 쓸까요? 아까처럼 의도와 다르게 내가 원하는 대로 z-index가 동작하지 않거나, z-index 값이 너무 많아지고 복잡해져서 코드가 헷갈릴 때 필요하겠죠.

z-index가 원하는 대로 동작하지 않을 때
거의 90%의 확률로 쌓임 맥락이 만들어져서 그럴 겁니다. 이럴 때 가장 손쉬운 방법은 해당 요소를 쌓임 맥락 바깥으로 옮기는 겁니다. 예를 들어서 앞에서 본 코드를 예로 들자면, .green의 <div>를 상위 태그로 옮기고 CSS도 약간 수정해 주는 거죠.

<div class="red"></div>
<div class="green"></div>
<div class="blue"></div>
.green {
  background-color: #32b9c1;
  position: absolute;
  width: 50px;
  height: 50px;
  top: 125px;
  left: 125px;
  z-index: 3;
}
5

z-index 값이 너무 많아지고 복잡해질 때
적절하게 쌓임 맥락을 만들어주면 됩니다. 위에 소개한 조건들 중에서 두 번째 조건(relative 포지션)을 이용하면 간단하게 쌓임 맥락을 만들 수 있는데요. 예를 들어서 .container라는 <div> 안에 쌓임 맥락을 만들고 싶으면 아래처럼 position 속성과 z-index를 추가해 줍니다.

<div class="container">
  ...
</div>
.container {
  position: relative;
  z-index: 0;
}
position: relative는 원래 위치를 기준으로 요소를 배치하는 거였죠? 이때 따로 위치를 정하지 않으면 그냥 원래 위치에 있습니다. 그리고 z-index의 기본 값은 auto인데, 0으로 지정한다고 해서 요소들 사이에 쌓이는 순서가 바뀌지는 않습니다. (auto 와 0의 가장 큰 차이는 쌓임 맥락을 만드느냐 아니냐의 차이입니다.)

이 코드를 활용하면 기존 배치를 바꾸지 않으면서도 손쉽게 쌓임 맥락을 만들 수 있을 겁니다.

예를 들어서 내비게이션 바를 만든다고 해 볼게요. <header> 태그와 <main> 태그로 일단 영역을 크게 두 개로 나누고, <main>에 쌓임 맥락을 만들어 놓으면 <header> 태그는 무슨 일이 있어도 <main> 태그 안에 있는 것들 보다 앞쪽에 보일 겁니다.

<header>
  ...내비게이션
</header>
<main>
  ...본문 내용
</main>
header {
  position: sticky;
  top: 0;
  z-index: 1;
}

main {
  position: relative;
  z-index: 0;
}



## 포지셔닝 정리
# position 속성
글의 흐름에서 벗어나서 요소를 자유롭게 배치할 때 쓰는 속성입니다. position에 따라서 위치를 정하는 기준이 달라집니다.

기본 값은 static이고, static인 경우 원래 있어야 할 위치에 배치됩니다.

# 위치 정하기
위치를 정하는 기준에 대해서 top, right, bottom, left 속성으로 위치를 정할 수 있습니다.

0

값이 모두 똑같은 경우  inset 속성을 씁니다.

1

# relative 포지션
요소의 원래 위치를 기준으로 배치합니다. 이때 요소의 원래 자리는 그대로 차지하고 있습니다.

2

.green {
    position: relative;
  top: 15px;
  left: 10px;
}

# absolute 포지션
가장 가까운 포지셔닝이 된 조상 요소를 기준으로 배치됩니다. 이때 포지셔닝이 되었다는 건 static이 아니라는 (position 속성을 지정했다는) 의미입니다. 아래 예시에서는 .red가 relative 포지션이어서 .blue는 .red를 기준으로 배치됩니다. 이때 글의 흐름에서 완전히 빠져서, 요소의 원래 자리는 차지하지 않습니다.

3

.red {
  position: relative;
  top: 0;
  left: 10px;
}

.blue {
  position: absolute;
  right: 10px;
  bottom: 15px;
}

# fixed 포지션
브라우저 화면을 기준으로 고정된 배치입니다. 글의 흐름에서 완전히 빠져서, 요소의 원래 자리는 차지하지 않습니다. 그래서 내비게이션을 만들거나 할 때 겹치지 않도록 마진을 넣어주기도 했었죠.

.red {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
}

# sticky 포지션
static처럼 원래 위치에 배치되어 있다가, 정해진 위치에 브라우저가 스크롤되면 그때부터 fixed처럼 고정되어 배치됩니다. 기본적으로는 static처럼 배치되기 때문에 요소의 원래 자리를 차지합니다.

.red {
  position: sticky;
  top: 0;
  left: 0;
  width: 100%;
}

# z-index값
앞뒤 순서를 정할 때 쓰는 값입니다. 순서기 때문에 단위 없이 씁니다. 값이 높을수록 화면에서 앞쪽입니다. 값이 같으면 코드에서 아래 줄에 있는 요소가 앞쪽에 보입니다.


## Flexbox
# 배치할 방향
flex-direction
row : 가로, 횡
column : 세로 
// display: flex; 왼쪽에서 오른쪽
  flex-direction: row;
// flex-direction: column; 위에서 아래로
// flex-direction: column-reverse; 아래에서 위로 

# 정렬하기
justify-content, align-items

# 요소가 넘칠 때
flex-wrap

# 요소 간격
gap

# 크기 늘이거나 줄이기
flex-grow, flex-shrink, flex-basis


## 정렬
기본축 Main Axis
교차축 Cross Axis

# justify-content: center;
justify-content: flex-end;  // 우측 끝에 기본 정렬
justify-content: flex-start;  // 좌측 끝에 기본 정렬
justify-content: space-around;  // 띄엄띄엄 사이 공간을 주고 정렬
justify-content: space-between;  // 양쪽으로 벌려서 일정한 간격으로 정렬
justify-content: space-evenly;  // 요소 사이의 공간을 같은 width 값을 주고 정렬

# align-items: center;  // 교차 방향의 센터에 정렬, 세로의 중간
align-items: stretch;  // 지정된 높이 값이 없으면 세로로 늘려서 정렬

# flex-direction: column; 세로로 정렬


## 요소가 넘칠 때
flex-wrap: wrap;  // 요소가 넘칠때 박스 밖에 요소는 아래로 나열
flex-direction: column; //세로로 정렬후 우측으로 넘어가서 아래로 정렬

// 마지막 박스를 제외한 나머지 요소에 30px 마진을 준다. 
#gap: 30px 이 더욱 간단하다.

.box:not(:last-child) {
  margin-right: 30px;
}

# margin, gap 두개의 값을 줄때는 세로 가로
gap: 30px 60px; // 세로 30px 가로 60px


## 요소 꽉 채우기
flex-grow: 1;  //값이 클수록 늘어 난다.
flex-shrink: 0; //값이 클수록 줄어 든다.

## 플렉스 요소의 크기
# flex-basis 속성
앞에서 flex-grow와 flex-shrink를 쓰면서 요소들의 크기를 정할 때 특이한 점이 있었습니다. 우리가 정한 width나 height 값으로 크기가 결정되는 게 아니란 거였는데요. 플렉스박스에서는 요소들의 크기가 유연하게 늘어나거나 줄어들었습니다.

사실 플렉스박스에서는 고정된 크기가 있는 게 아니라 시작 크기와 최종 크기가 있습니다. 앞에서 정렬에 대해서 배울 때 기본 축(Main Axis)과 교차 축(Cross Axis)에 대해 배웠던 거 기억나시나요? 기본 축에서는 시작 크기를 정해 놓으면 플렉스박스 안에서 유연하게 최종 크기가 결정됩니다. 크롬 개발자 도구에서 플렉스박스의 요소를 검사해 보면 빗금을 친 부분만큼의 시작 크기에서, 화살표만큼 최종 크기로 늘어나거나 줄어드는 걸 볼 수 있습니다.

개발자 도구로 살펴 본 flex-shrink

(위 예시에서는 width 값이 큰 값이지만, flex-shrink에 의해서 줄어들었습니다.)

플렉스박스에서 요소의 시작 크기는 flex-basis라는 속성으로 지정할 수 있는데요. flex-basis 값을 따로 정해 주지 않으면 기본값은 auto입니다. 그럼 width나 height를 참고해서 시작 크기를 정하는데요. 기본 축의 방향이 가로 방향이면 width를, 세로 방향이면 height를 참고해서 시작 크기를 정합니다. 그래서 사실 대부분의 경우 width나 height만 잘 정해주면 별문제 없이 동작하죠. 하지만 플렉스박스에서 크기를 정하고 싶을 때는 보다 정확하게 flex-basis를 사용하는 걸 추천드립니다.

# flex 속성
flex-basis를 사용하면  좋은 점이 하나 있는데요. 바로 flex라는 속성으로 코드를 짧게 쓸 수 있다는 것입니다. 아래 세 코드는 모두 같은 역할을 하는 코드인데요. flex 속성은 순서대로 flex-grow, flex-shrink, flex-basis 값을 한 번에 쓸 수 있는 속성입니다. 코드가 훨씬 깔끔해지죠?

# width 속성으로 시작 크기를 지정하기
flex-grow: 1;
flex-shrink: 0;
width: 100px;

# flex-basis 속성으로 시작 크기를 지정하기
flex-grow: 1;
flex-shrink: 0;
flex-basis: 100px;

# flex 속성으로 짧게 쓰기
flex: 1 0 100px;


#### Flexbox - 14. 곡목록 부터 복습 필요 ####

## Flexbox 정리
# 플렉스박스 만들기
display: flex;

# 기본 축과 교차 축
1

# 배치 방향
flex-direction을 사용하면 기본 축의 방향을 정할 수 있습니다. 이때 기본 값은 row입니다.

2

# 기본 축 정렬: justify-content
justify-content를 사용하면 기본 축 방향으로 정렬할 수 있습니다. 기본 값은 flex-start입니다.

3

4

5

6

# 교차 축 정렬: align-items
교차 축 방향으로 정렬할 때는 align-items를 사용합니다. 기본 값은 stretch(늘려서 배치하기) 입니다.

7

8

9

10

# 요소가 넘칠 때: flex-wrap
요소가 넘치는 경우 flex-wrap: wrap을 지정해주면 교차 축 방향으로 넘어가서 배치됩니다.

11

# 간격: gap
12

숫자를 하나만 쓰면, 모든 방향의 간격을 지정할 수 있습니다.

13

세로, 가로 순서대로 숫자를 두 개 쓰면 세로 간격, 가로 간격을 지정할 수 있습니다. 이때 세로와 가로는 기본 축 방향이랑은 상관없습니다.

# 요소 늘려서 채우기: flex-grow
기본 값은 0입니다. flex-grow 값이 클수록 많이 늘어납니다.

flex-grow-00

flex-grow-01

flex-grow-02

17

# 요소 줄여서 채우기: flex-shrink
만약 요소들의 크기가 커서 넘치는 경우, 요소의 크기를 줄여서 플렉스박스 안에 가득 채웁니다. flex-shrink의 기본 값이 1이기 때문에 기본적으로 요소를 줄여서 배치하고, 0으로 지정하면 크기가 줄어들지 않습니다. 그리고 flex-shrink 값이 클수록 상대적으로 많이 줄어듭니다.


## 인라인 안에서 Flexbox 만들기
인라인 요소 안에서 플렉스박스를 쓰는 방법에 대해 준비해 보았습니다. 이 내용은 앞으로 배울 내용에 필수적이지 않으니까, 건너뛰셔도 좋고 부담 없이 읽으시면 됩니다.

가끔씩 인라인 안에서 세로 정렬을 하고 싶을 때가 있습니다. 예를 들어서 이렇게 링크 안에 작은 새 창 열기 아이콘을 하나 넣는다고 해 볼게요.

<p>
  코딩, 쉬워질 때도 됐다. 
  <a class="new-window-link" href="https://codeit.kr">
    코드잇
    <img class="icon" src="new-window-link.svg" alt="새 창 열기" width="13" height="13">
  </a>
  에서 지금 바로 시작해보세요.
</p>
.logo {
  width: 13px;
  height: 13px;
}

.new-window-link {
}


여기서 새 창 열기 아이콘을 정확히 글 가운데다가 세로로 정렬하고 싶은데요. <a> 태그에 적용된 .new-window-link 클래스에다가 display: flex로 플렉스박스를 만들고, 여기다 정렬이랑 간격을 넣어 줄게요.

.new-window-link {
  display: flex;
  align-items: center;
  gap: 4px;
}


그러면 이런 식으로 아예 줄이 넘어가 버립니다. .new-window-link 클래스에서 <a> 태그의 display: inline이라는 기본 값을 display: flex로 바꿔 줬기 때문인데요. display: flex라고 하면 그 안에서는 플렉스박스의 규칙에 따라 배치되고, 그 바깥에서 플렉스박스 전체에 대해서는 마치 display: block처럼 위에서 아래로 배치되기 때문입니다.

이럴 때는 display: inline-flex를 쓰면 되는데요. 플렉스박스를 만들면서 동시에 플렉스박스 전체를 마치 display: inline처럼 배치하는 방식입니다.

.new-window-link {
  display: inline-flex;
  align-items: center;
  gap: 4px;
}


이제 "코드잇"이라는 링크랑 "-에서 지금 바로 시작해 보세요."가 한 줄로 붙었죠? 플렉스박스가 인라인처럼 배치된 겁니다. 앞으로 인라인 안에서 플렉스박스를 만들고 싶을 때는 display: inline-flex를 활용해 보세요.


## Flexbox 안에서 포지셔닝하기

플렉스박스와 포지션을 함께 쓸 때 어떻게 하면 좋을지에 대한 내용을 준비해 봤습니다. 이 내용은 앞으로 배울 내용에 필수적이지 않은 내용인데요, 건너뛰셔도 괜찮고 부담 없이 읽으시면 됩니다.

자, 앞에서 position 속성을 배우면서 relative, absolute, fixed 그리고 sticky까지 다양한 포지션을 배웠습니다. 이번에는 플렉스박스의 요소에 position을 지정하면 어떻게 되는지 알아보겠습니다.

결론부터 말씀드리면, 자기 자신의 원래 위치를 기준으로 배치되는 static(기본값), relative, sticky를 제외하고는 플렉스박스의 흐름에서 벗어나서 배치됩니다. 흐름에서 벗어난다는 건, 플렉스박스 바깥에 있는 요소처럼 동작한다는 건데요.

앞에서 absolute랑 fixed는 원래 자리를 차지하지 않고, 글의 흐름에서 아예 빠졌었죠? 플렉스박스에서도 마찬가지로 플렉스박스의 영향을 받지 않습니다.

구체적으로 어떻게 동작하는지 코드로 한번 살펴보죠.

플렉스박스에 배치되는 경우: relative, sticky
index.html

<div class="container">
    <div class="red box">RED</div>
    <div class="green box">GREEN</div>
    <div class="blue box">BLUE</div>
</div>
style.css

.container {
  border: 5px dashed #cacfd9;
  width: 100%;
  height: 500px;
  display: flex;
  position: relative;
  align-items: flex-start;
}

.box {
  border-radius: 15px;
  color: #f9fafc;
  padding: 10px;
}

.red {
  background-color: #e46e80;
}

.green {
  background-color: #32b9c1;
  flex-grow: 1;
    position: relative;
  top: 100px;
  left: 100px;
}

.blue {
  background-color: #5195ee;
}
relative 포지션은 요소의 원래 위치를 기준으로 배치하는 거라고 했습니다. 일단 플렉스박스 안에서 다른 요소들처럼 배치된 다음에 그 위치를 기준으로 배치됩니다. 즉, 원래 자리를 차지하고 있습니다.

0

sticky로 바꿔도 마찬가지입니다. sticky 포지션은 기본적으로 static처럼 원래 위치에 있다가, 지정한 위치에 스크롤되면 fixed처럼 화면에 고정되는데요.  그렇기 때문에 일단은 플렉스박스 안에서 배치되고 그다음에 sticky로 배치됩니다.

.green {
  background-color: #32b9c1;
  flex-grow: 1;
    position: sticky;
  top: 0;
}

(스크롤 하는 경우 sticky로 동작합니다.)

플렉스박스에서 벗어나는 경우: absolute, fixed
absolute 포지션은 포지셔닝된 가장 가까운 조상을 기준으로 배치되고, fixed는 브라우저 화면을 기준으로 배치된다고 배웠는데요. 이 둘의 공통점은 요소의 원래 자리를 차지하지 않는다는 겁니다. 즉, 글의 흐름에서 벗어나는 건데요. 마찬가지로 플렉스박스 안에서도 아예 벗어납니다. 그래서 이런 경우에는 마치 플렉스박스와 상관없는 요소처럼 배치됩니다.

index.html

<div class="container">
  <div class="red box">RED</div>
  <div class="green box">GREEN</div>
  <div class="blue box">BLUE</div>
</div>
style.css

.container {
  border: 5px dashed #cacfd9;
  width: 100%;
  height: 500px;
  display: flex;
  position: relative;
  align-items: flex-start;
}

.box {
  border-radius: 15px;
  color: #f9fafc;
  padding: 10px;
}

.red {
  background-color: #e46e80;
}

.green {
  background-color: #32b9c1;
  flex-grow: 1;
    position: absolute;
  top: 100px;
  left: 100px;
}

.blue {
  background-color: #5195ee;
}

우선 absolute 포지션부터 살펴보면 플렉스박스 안에서는 마치 .green <div>가 없는 것처럼 배치됐죠? 아예 흐름에서 벗어난 겁니다. 그리고 flex-grow: 1도 적용이 안 됐습니다. (만약 적용되었더라면 플렉스박스 너비만큼 꽉 채웠을 겁니다.)

마찬가지로 fixed 포지션을 살펴 봅시다.

.green {
  background-color: #32b9c1;
  flex-grow: 1;
    position: fixed;
  top: 100px;
  left: 100px;
}

(스크롤 했을 때)

fixed는 브라우저 화면을 기준으로 배치되기 때문에 마찬가지로 플렉스박스와 상관없이 배치됩니다. 보시면 나머지 요소들은 마치 .green <div>가 없는 것처럼 배치됐고, flex-grow도 적용이 안 됐습니다.

정리
간단히 정리하자면 relative, sticky는 요소의 원래 자리를 차지하기 때문에 플렉스박스의 영향을 받고요, absolute랑 fixed는 요소의 원래 자리에서 쏙 빠져버리기 때문에 글의 흐름에서 빠지는 거랑 마찬가지로, 플렉스박스랑 상관없이 배치됩니다.



## Grid
격자 나누기 : gird-template-rows(columns)
간격 : gap
크기 미리 정하기 : grid-auto-rows(columns)
원하는 위치에, 여러 칸에 걸쳐서 배치 : grid-row(column), span
이름으로 배치 : grid-area, grid-template-areas


# 격자 나누기
gird-template-columns: 100px 200px 300px  // 세로 grid로 너비를 구분하는 그리드가 생성
gird-template-row: 200px 200px 100px  // 가로 grid로 높이를 구분하는 그리드가 생성

# 격자 함께 나누기 1
gird-template: 200px 200px 100px / 100px 200px 300px  // row / columns를 쓰면 된다 (세로값/가로값)
# 격자 함께 나누기 2
gird-template: 
200px 200px 100px / 
100px 200px 300px  //한줄이 아닌 구분해서 쓸수도 있다.


## 느낌 별 스테이션 I
인기 스테이션 아홉 개를 3 x 3 그리드로 배치해 보세요. 각 셀의 크기는 너비 240px, 높이 240px이 되도록 해 주세요.

# 템플릿 코드 설명
모든 스테이션들을 감싸는 <div> 태그에는 .stations라는 클래스를 미리 추가해 두었습니다. 자식 요소로는 아홉 개의 이미지 태그가 있고, 각각 .station 이라는 태그로 스타일링하고 있습니다.

# index.html

<section>
  <h2 class="section-title">느낌 별 스테이션</h2>
  <div class="stations">
    <img class="station" src="images/img_station_1.png">
    <img class="station" src="images/img_station_2.png">
    <img class="station" src="images/img_station_3.png">
    <img class="station" src="images/img_station_4.png">
    <img class="station" src="images/img_station_5.png">
    <img class="station" src="images/img_station_6.png">
    <img class="station" src="images/img_station_7.png">
    <img class="station" src="images/img_station_8.png">
    <img class="station" src="images/img_station_9.png">
  </div>
</section>

# style.css

.stations {

}

.station {
  width: 100%;
  border-radius: 16px;
}

# 해설
우선 이미지를 감싸고 있는 .stations 클래스를 그리드로 만들죠. display 속성을 grid로 하면 됩니다.

.stations {
  display: grid;
}
그리드에서 컬럼을 나누려면 grid-template-columns 속성을 씁니다. 240px로 세 칸을 나누려면 240px을 세 번 써 주면 되고요.

grid-template-columns: 240px 240px 240px;
그리드에서 로우를 나누려면 grid-template-rows 속성을 쓰는데, 마찬가지로 240px로 세 칸을 나누려면 240px을 세 번 써 주면 됩니다.

grid-template-rows: 240px 240px 240px;
코드를 정리하자면 이렇습니다.

.stations {
  display: grid;
  grid-template-columns: 240px 240px 240px;
  grid-template-rows: 240px 240px 240px;
}
이 코드를 grid-template를 사용해서 간단하게 쓰려면 아래처럼 쓸 수도 있습니다.

.stations {
  display: grid;
  grid-template: 240px 240px 240px / 240px 240px 240px;
}

# 모범 답안
* {
  box-sizing: border-box;
}

html {
  word-break: keep-all;
  font-family: Pretendard, sans-serif;
  font-size: 16px;
  line-height: 19px;
}

body {
  background-color: #000;
  color: #d9d9d9;
  margin: 0;
}

section {
  max-width: 1120px;
  width: 100%;
  margin: 80px auto;
  padding: 0 36px;
}

.stations {
  display: grid;
  grid-template: 240px 240px 240px / 240px 240px 240px;
}

.station {
  width: 100%;
  border-radius: 16px;
}


# 반복해서 그리드 그리기 
  grid-template: 1fr 2fr 1fr / 1fr 1fr 1fr;
  grid-template: 1fr 2fr 1fr / minmax(200px, 300px) minmax(200px, 300px);
  grid-template: 1fr 2fr 1fr / minmax(200px, 1fr) minmax(200px, 2fr);
  // 최대값에만 fr을 쓸수 있다.

repeat(6, 1fr)  // 1fr을 6번 반복, 1fr 그리드가 6개로 나눈다.


## 느낌 별 스테인션 II
앞에서 3 x 3 그리드로 만든 느낌 별 스테이션의 배치를 좀 더 발전시켜 봅시다. 다음 순서에 따라 수정해 보세요.

세 번 반복해서 쓴 값을 함수를 활용해서 간단하게 만든다.
각 셀의 크기를 화면 너비에서 1 : 1 : 1 이 되도록 유연하게 바꾼다.
셀의 최소 크기는 너비 200px, 높이 200px이 되도록 바꾼다.
템플릿 코드 설명
모든 스테이션들을 감싸는 <div> 태그에는 .stations라는 클래스로 3 x 3 그리드를 만들었습니다. 자식 요소로는 아홉 개의 이미지 태그가 있고, 각각 .station이라는 태그로 스타일링하고 있습니다.

# index.html

<section>
  <h2 class="section-title">느낌 별 스테이션</h2>
  <div class="stations">
    <img class="station" src="images/img_station_1.png">
    <img class="station" src="images/img_station_2.png">
    <img class="station" src="images/img_station_3.png">
    <img class="station" src="images/img_station_4.png">
    <img class="station" src="images/img_station_5.png">
    <img class="station" src="images/img_station_6.png">
    <img class="station" src="images/img_station_7.png">
    <img class="station" src="images/img_station_8.png">
    <img class="station" src="images/img_station_9.png">
  </div>
</section>

# style.css

.stations {
  display: grid;
  grid-template: 240px 240px 240px / 240px 240px 240px;
}

.station {
  width: 100%;
  border-radius: 16px;
}

# 해설
세 번 반복해서 쓴 값을 함수를 활용해서 간단하게 만든다.
반복적인 코드를 깔끔하게 쓸 때 repeat() 함수를 활용할 수 있습니다. 주어진 코드에서 세 번 240px을 반복해서 적었는데요. 240px 240px 240px은 깔끔하게 repeat(3, 240px)로 바꿔서 쓸 수 있습니다.

.stations {
  display: grid;
  grid-template: repeat(3, 240px) / repeat(3, 240px);
}
각 셀의 크기를 화면 너비에서 1 : 1 : 1 이 되도록 유연하게 바꾼다.
플렉스박스처럼 그리드에서도 fr 단위를 쓰면 유연한 크기를 지정할 수 있는데요. fr 단위를 써서 같은 크기를 지정하면 같은 비율로 늘어나고 줄어듭니다.

.stations {
  display: grid;
  grid-template: repeat(3, 1fr) / repeat(3, 1fr);
}
셀의 최소 크기는 너비 200px, 높이 200px이 되도록 바꾼다.
최대 최소 크기를 정하려면 minmax() 함수를 활용할 수 있습니다. 예를들어서 minmax(200px, 1fr)이라고 하면 최소 200px까지만 줄어드는데요. 1fr 대신에 minmax(200px, 1fr)으로 바꿔 보죠. 그럼 창 크기가 아무리 작아져도 셀의 크기는 200px 보다 작아지지 않습니다.

.stations {
  display: grid;
  grid-template: repeat(3, minmax(200px, 1fr)) / repeat(3, minmax(200px, 1fr));
}

# 모범 답안
# style.css
* {
  box-sizing: border-box;
}

html {
  word-break: keep-all;
  font-family: Pretendard, sans-serif;
  font-size: 16px;
  line-height: 19px;
}

body {
  background-color: #000;
  color: #d9d9d9;
  margin: 0;
}

section {
  max-width: 1120px;
  width: 100%;
  margin: 80px auto;
  padding: 0 36px;
}

.stations {
  display: grid;
  grid-template: repeat(3, minmax(200px, 1fr)) / repeat(3, minmax(200px, 1fr));
}

.station {
  width: 100%;
  border-radius: 16px;
}

# index.html
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="utf-8">
  <title>Codeit Music</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <section>
    <h2 class="section-title">느낌 별 스테이션</h2>
    <div class="stations">
      <img class="station" src="images/img_station_1.png">
      <img class="station" src="images/img_station_2.png">
      <img class="station" src="images/img_station_3.png">
      <img class="station" src="images/img_station_4.png">
      <img class="station" src="images/img_station_5.png">
      <img class="station" src="images/img_station_6.png">
      <img class="station" src="images/img_station_7.png">
      <img class="station" src="images/img_station_8.png">
      <img class="station" src="images/img_station_9.png">
    </div>
  </section>
</body>
</html>


## 그리드 간격 넣기
gap: 15px 30px;  // 세로, 가로 간격

## 크기 미리 정해두기
  grid-template-columns: repeat(3, minmax(200px, 1fr));
  grid-auto-rows: 200px;

# 다양한 크기로 미리 설정
  grid-auto-rows: 200px 100px 300px;  //미리 지정한 간격을 번갈아가며 사용
  grid-auto-columns: 200px 100px 300px;  //세로 간격도 미리 정해 놓을수 있다.


## 원하는 위치에 요소 배치하기
grid-row: 3;
grid-column: 2;

grid-row: 3 / 5;  //3~5까지 세로로 공간을 가져간다.
grid-column: 2 / -2; //가로 2에서 -2까지 공간을 가져간다.

grid-row: 3 / span 2;  //세로 그리드 3에서 2칸의 세로로 공간을 가져간다.
grid-column: 2 / span 3; //가로 그리드 2에서 3칸의 공간을 가져간다.



## 요금제
#실습 설명

이번 레슨에서는 사이트 메인 화면에 들어갈 요금제 섹션을 배치해 봅시다. 실습 결과를 참고해서 멤버십 혜택 중에 마지막에 있는 요소를 두 컬럼에 걸쳐서 배치해 보세요.

템플릿 코드 설명
요금제 섹션 안에는 두 개의 클래스가 있습니다. 하나는 .plans 클래스이고 다른 하나는 .benefits 클래스인데요.  .plans는 3 x 1 그리드로 되어있고, 간격은 24px입니다. 그리고 .benetfits는 2 x 2 그리드이고 간격은 24px입니다. 여기에 각 셀의 너비는 전체 너비에서 골고루 나눠서 가져가고 있습니다. 마지막 멤버십 혜택 요소는 .benefit.wide라는 선택자로 스타일링할 수 있습니다.

# index.html

<section class="wrap">
  <h2 class="plans-title">요금제</h2>
  <div class="plans">
    <div class="card event">
      <div class="event-badge">EVENT</div>
      <h3>
        첫 구독<br>
        3개월 33% 할인
      </h3>
      <p>
        월 3,500원부터<br>
        (부가세 포함)
      </p>
    </div>
    <div class="card">
      <h3>
        모든 음원<br>
        무제한 듣기
      </h3>
      <p>
        월 5,500원부터<br>
        (부가세 포함)
      </p>
    </div>
    <div class="card">
      <h3>
        무제한 듣기<br>
        + 다운로드
      </h3>
      <p>
        월 8,800원부터<br>
        (부가세 포함)
      </p>
    </div>
  </div>
  <h2 class="benefits-title">멤버십 정보</h2>
  <div class="benefits">
    <div class="card">
      <h3>무제한 듣기</h3>
      <ul>
        <li>모든 기기에서 재생</li>
        <li>최대 40% 할인</li>
        <li>뮤직비디오 무제한</li>
      </ul>
    </div>
    <div class="card">
      <h3>다운로드</h3>
      <ul>
        <li>모든 기기에서 재생</li>
        <li>데이터 없이 마음껏 재생</li>
        <li>뮤직비디오 소장</li>
      </ul>
    </div>
    <div class="card wide">
      <h3>유의사항</h3>
      <p class="caution">
        3개월 동안 33% 할인된 가격으로 결제되고 3개월 후부터 매달 정상 가격으로 결제됩니다.
        멤버십은 언제든지 해지하실 수 있고, 추가로 부담해야 할 금액은 없습니다.
        모든 가격은 부가가치세가 포함된 가격입니다.
      </p>
    </div>
  </div>
</section>

# style.css

.plans {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 24px;
  margin-bottom: 120px;
}

/* ... */

.benefits {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 24px;
}

.benefits .wide {
}


# 해설
마지막 멤버십 혜택은 .benefit.wide 선택자로 스타일링하면 되니까, 여기에 코드를 추가해 볼게요. 우선 여러 컬럼에 걸쳐서 배치하려면 그리드 라인 번호를 기준으로 grid-column 속성을 사용하면 됩니다. 여러가지 방법으로 배치해 볼게요.

그리드 라인 번호로 배치하기
우선 그리드 라인 번호를 가지고 배치할 수 있는데요. 그리드 라인 번호는 맨 왼쪽에서부터 오른쪽으로 1, 2, 3, … 이고 맨 위에서부터 아래로 1, 2, 3 입니다. 2 x 2니까, 1, 2, 3번 라인이 있겠네요. 테두리가 그리드 라인에 포함된다는 것, 꼭 기억해 주세요. 1번 라인에서 시작해서 3번 라인에 끝나도록 배치하려면 1/3이라고 쓰면 됩니다.

.benefit.wide {
  grid-column: 1 / 3;
}
그리드 라인 번호는 반대 방향으로도 붙일 수 있는데요, 맨 오른쪽에서 왼쪽으로는 -1, -2, -3, … 이고 맨 아래에서부터 위로는 -1, -2, -3 입니다. 만약에 맨 마지막 라인 번호를 반대 방향으로 쓴다면 이렇게도 쓸 수 있겠죠.

.benefit.wide {
  grid-column: 1/-1;
}
셀의 크기로 배치하기
span이라는 키워드를 쓰면 그리드 라인 번호가 아니라 차지할 셀의 크기로 배치할 수 있습니다. 두 칸을 차지하니까 span 2라고 쓰면 되는데요. 시작할 그리드 라인 번호는 1번이고, 여기에 span 2를 써 주면 됩니다.

.benefit.wide {
  grid-column: 1/span 2;
}

# 모범 답안
html {
  font-family: Pretendard, sans-serif;
  word-break: keep-all;
}

body {
  background-color: #000;
  color: #fff;
  margin: 0;
}

.wrap {
  max-width: 1080px;
  width: 100%;
  margin: 0 auto;
  padding: 32px;
}

.plans-title,
.benefits-title {
  font-weight: 500;
  font-size: 24px;
  line-height: 29px;
  margin: 32px 0;
}

.plans {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 24px;
  margin-bottom: 120px;
}

.card {
  padding: 56px 96px;
  border: 2px solid #ffffff;
  border-radius: 16px;
  text-align: center;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.card.event {
  border-color: #7f5fff;
}

.card h3 {
  font-weight: 700;
  font-size: 24px;
  line-height: 29px;
  margin: 0 0 16px;
}

.card.event h3 {
  color: #7f5fff;
}

.card p {
  line-height: 24px;
}

.card ul {
  text-align: left;
  line-height: 19px;
}

.card.event .event-badge {
  background-color: red;
  position: absolute;
  top: 16px;
  right: 16px;
  font-weight: 700;
  padding: 8px 12px;
  background: #7f5fff;
  color: #000000;
  border-radius: 8px;
}

.benefits {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 24px;
}

.benefits .wide {
  grid-column: 1 / span 2;
}

.caution {
  text-align: left;
}



## 피트 몬드리안 I

# index.html
<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
      <title>빨강, 파랑, 노랑의 구성 II</title>
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <div class="painting">
      <div id="box1"></div>
      <div id="box2"></div>
      <div id="box3"></div>
      <div id="box4"></div>
      <div id="box5"></div>
      <div id="box6"></div>
      <div id="box7"></div>
    </div>
  </body>
</html>


# style.css
body,
html {
  background-color: #f5f6f2;
}

.painting {
  background-color: black;
  display: grid;
  grid-template: repeat(6, 1fr) / repeat(4, 1fr);
  width: 460px;
  height: 540px;
  gap: 16px;
}

#box1 {
  background-color: white;
  grid-row: 1 / 3;
}

#box2 {
  background-color: white;
  grid-row: 3 / 5;
}

#box3 {
  background-color: blue;
  grid-row: 5 / 7;
  grid-column: 1 / span 1;
}

#box4 {
  background-color: red;
  grid-row: 1 / 5;
  grid-column: 2 / span 3;
}

#box5 {
  background-color: white;
  grid-row: 5 / span 2;
  grid-column: 2 / span 2;
}

#box6 {
  background-color: white;
  grid-row: 5 / span 1;
  grid-column: 4 / span 1;
}

#box7 {
  background-color: yellow;
  grid-row: 6 / span 1;
  grid-column: 4 / span 1;
}


# style.css 2
body,
html {
  background-color: #f5f6f2;
}

.painting {
  background-color: black;
  display: grid;
  grid-template: repeat(6, 1fr) / repeat(4, 1fr);
  width: 460px;
  height: 540px;
  gap: 16px;
}

#box1 {
  grid-column: 1 / 2;
  grid-row: 1 / 3;
  background-color: white;
}

#box2 {
  grid-column: 1 / 2;
  grid-row: 3 / 5;
  background-color: white;
}

#box3 {
  grid-column: 1 / 2;
  grid-row: 5 / 7;
  background-color: blue;
}

#box4 {
  grid-column: 2 / 5;
  grid-row: 1 / 5;
  background-color: red;
}

#box5 {
  grid-column: 2 / 4;
  grid-row: 5 / 7;
  background-color: white;
}

#box6 {
  grid-column: 4 / 5;
  grid-row: 5 / 6;
  background-color: white;
}

#box7 {
  grid-column: 4 / 5;
  grid-row: 6 / 7;
  background-color: yellow;
}


## 이름으로 배치하기
grid-area: [이름];
grid-template-areas:
"r g" 
"r b";  // 요소에 이름을 붙이고 배치 한다.

". g"; // .을 입력하면 공간을 비워 놓을수 있다.


## 피트 몬드리안 II
# 실습 설명
이번에는 앞에서 CSS 그리드로 만들었던 피트 몬드리안의 그림을 수정해 보겠습니다. 이번 실습에서는 그리드 라인 넘버 대신에 CSS 그리드에서 각 영역에 이름을 붙이고, 이 이름을 사용해서 각 영역을 배치해 봅시다.

# 해설
저는 grid-area 속성을 사용해서 각각 하얀색 영역을 w1, w2, w3, w4라고 이름 붙이고, 빨간색 영역을 r1, 파란색 영역을 b1, 그리고 노란색 영역을 y1이라고 이름 붙였습니다. 그리고 이미지를 참고해서 grid-template-areas로 아래처럼 배치해 주었습니다.

grid-template-areas:
    "w1 r1 r1 r1"
    "w1 r1 r1 r1"
    "w2 r1 r1 r1"
    "w2 r1 r1 r1"
    "b1 w3 w3 w4"
    "b1 w3 w3 y1";

# 모범 답안
body,
html {
  background-color: #f5f6f2;
}

.painting {
  background-color: black;
  display: grid;
  grid-template: repeat(6, 1fr) / repeat(4, 1fr);
  grid-template-areas:
    "w1 r1 r1 r1"
    "w1 r1 r1 r1"
    "w2 r1 r1 r1"
    "w2 r1 r1 r1"
    "b1 w3 w3 w4"
    "b1 w3 w3 y1";
  width: 460px;
  height: 540px;
  gap: 16px;
}

#box1 {
  grid-area: w1;
  background-color: white;
}

#box2 {
  grid-area: w2;
  background-color: white;
}

#box3 {
  grid-area: b1;
  background-color: blue;
}

#box4 {
  grid-area: r1;
  background-color: red;
}

#box5 {
  grid-area: w3;
  background-color: white;
}

#box6 {
  grid-area: w4;
  background-color: white;
}

#box7 {
  grid-area: y1;
  background-color: yellow;
}


## 미니 프로젝트: Chainit

# 실습 설명
앞에서 배운 포지션, 플렉스박스, 그리고 그리드를 사용해서 요소들을 위 스크린샷처럼 배치해 보세요. 필요하면 <div> 태그를 추가하면서 정렬하셔도 좋습니다. 이번 레슨에서는 포지션, 플렉스박스, 그리드를 사용해서 사이트 전체를 배치해 보는 것이 목표이니까 세세한 여백이나 크기는 다르더라도 괜찮습니다.

# 해설
저는 우선 <body> 태그에서 전체적으로 3 x 2 그리드를 나누어주었습니다. 그리고 각각의 영역에 이름을 붙여서 이름으로 배치해 봤는데요. 크기는 grid-template- 속성들을 사용해서 우측 상단의 영역에만 너비 437px, 높이 307px이 되도록 하고, 나머지는 유연하게 늘어나도록 1fr로 지정했습니다. 그리고 그리드 셀 사이의 간격은 gap 속성을 사용해서 24px로 했고요.


main {
  display: grid;
  margin: 24px 0;
  grid-template-areas:
    'prices assets'
    'prices order'
    'prices .';
  grid-template-rows: 307px 1fr 1fr;
  grid-template-columns: 1fr 437px;
  gap: 24px;
}

/* ... */

.prices {
  grid-area: prices;
}

/* ... */

.assets {
  min-width: 430px;
  min-height: 300px;
  background-color: #fff1db;

  grid-area: assets;
}

/* ... */
.order {
  grid-area: order;
}
그러고 나서 각각의 영역에서 배치를 해줬습니다(자세한 코드는 아래 모범 답안을 참고해 주세요).

제가 특히 고민했던 부분은 .prices 우측 상단에 있는 별 모양입니다. .bookmark라는 클래스로 스타일링하고 있는데요. 저는 이걸 absolute 포지션으로 배치하기로 했습니다. 위쪽에서 0px, 오른쪽에서 0px에 배치하면 되겠죠? 물론 이때도 부모 요소 영역을 기준으로 배치되어야 하니까 어딘 가에서는 포지셔닝해 줘야 하는데요. 저는 .detail이라는 클래스에 position: relative를 추가하기로 했습니다. 물론 이런 방법 말고도 플렉스박스로 정렬을 다르게 하거나, 그리드를 나눠줄 수도 있으니까 다양한 방법으로 시도해보시는 걸 추천해 드려요.

.detail {
  position: relative;
}

/* ... */

.bookmark {
  position: absolute;
  top: 0;
  right: 0;
  width: 20px;
  height: 20px;
}

# 모범 답안
# index.html

<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
    <title>Chainit</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&family=Poppins:wght@400;700&display=swap"
      rel="stylesheet">
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <div class="logo"><span class="accent">CHAIN</span>IT</div>
      <ul class="site menu">
        <li class="active">포트폴리오</li>
        <li>환전하기</li>
        <li>코인 뉴스</li>
      </ul>
      <ul class="auth menu">
        <li>로그인</li>
        <li class="active">가입하기</li>
      </ul>
    </header>
    <main>
      <section class="prices">
        <div class="detail">
          <div class="crypto-name">
            <img class="crypto-logo" src="images/icon_bitcoin.png" alt="네트코인 심볼">
            네트코인
            <span class="ticker-symbol">NTC/KRW</span>
          </div>

          <div class="current-price">
            22,785,000<span class="change">-9.43%⬇</span>
          </div>
          <img
            class="chart-image"
            src="images/img_chart.png"
            alt="네트코인 차트"
            >
          <img
            src="images/icon_star.png"
            alt="네트코인을 관심 코인에 추가하기"
            class="bookmark"
            >
        </div>
        <ul class="categories">
          <li class="category active">전체 192</li>
          <li class="category">일반 9</li>
          <li class="category">일반 179</li>
          <li class="category">투자유의 3</li>
        </ul>
        <table class="price-table">
          <thead>
            <tr>
              <th></th>
              <th>가상자산</th>
              <th>현재가(원)</th>
              <th>변동률</th>
              <th>시가총액</th>
            </tr>
          </thead>
          <tr>
            <td>
              <img
                src="images/icon_star.png"
                alt="관심 코인에 추가하기"
                class="table-item-bookmark"
              >
            </td>
            <td>네트코인<br><span class="ticker">NTC</span></td>
            <td>22,785,000 원</td>
            <td class="fall">-9.43% ⬇</td>
            <td>432조 원</td>
          </tr>
          <tr>
            <td>
              <img
                src="images/icon_star.png"
                alt="관심 코인에 추가하기"
                class="table-item-bookmark"
              >
            </td>
            <td>이즈리얼<br><span class="ticker">EZR</span></td>
            <td>1,713,000 원</td>
            <td class="rise">+10.10% ⬆</td>
            <td>230조 원</td>
          </tr>
          <tr>
            <td>
              <img
                src="images/icon_star.png"
                alt="관심 코인에 추가하기"
                class="table-item-bookmark"
              >
            </td>
            <td>이즈리얼 2<br><span class="ticker">EZR2</span></td>
            <td>133.0 원</td>
            <td class="rise">+1.43% ⬆</td>
            <td>12조 원</td>
          </tr>
          <tr>
            <td>
              <img
                src="images/icon_star.png"
                alt="관심 코인에 추가하기"
                class="table-item-bookmark"
              >
            </td>
            <td>네트코인 골드<br><span class="ticker">NTG</span></td>
            <td>522.5 원</td>
            <td class="fall">-7.43% ⬇</td>
            <td>1320억 원</td>
          </tr>
          <tr>
            <td>
              <img
                src="images/icon_star.png"
                alt="관심 코인에 추가하기"
                class="table-item-bookmark"
              >
            </td>
            <td>코드코인<br><span class="ticker">CDC</span></td>
            <td>458.2 원</td>
            <td class="fall">-9.43% ⬇</td>
            <td>120억 원</td>
          </tr>
        </table>
      </section>

      <section class="assets">
        <p class="login-message">
          자산을 확인하려면<br>
          로그인해 주세요.
        </p>
        <a href="#" class="login">로그인</a>
      </section>

      <section class="order">
        <div class="order-types">
          <a href="" class="order-type active">매수</a>
          <a href="" class="order-type">매도</a>
        </div>
        <div class="available">
          <div class="label">거래가능</div>
          <span>0 <span class="label">KRW</span></span>
        </div>
        <div class="price">
          <label class="label" for="price">가격 (KRW)</label>
          <div class="input-container">
            <img class="icon" src="images/icon_subtract.png" alt="감소">
            <input name="price" type="text" value="22,795,000원">
            <img class="icon" src="images/icon_add.png" alt="추가">
          </div>
        </div>
        <div class="quantity">
          <label class="label" for="quantity">수량 (BTC)</label>
          <div class="input-container">
            <img class="icon" src="images/icon_subtract.png" alt="감소">
            <input name="quantity" type="text" value="1주">
            <img class="icon" src="images/icon_add.png" alt="증가">
          </div>
        </div>
        <hr>
        <div class="total">
          <span class="label big">총액</span>
          <span class="total-price">22,795,000</span>
          <span class="label big">KRW</span>
        </div>
        <button class="order-button">매수하기</button>
      </section>
    </main>
  </body>
</html>


# style.css

* {
  box-sizing: border-box;
}

html {
  font-size: 16px;
  font-family: 'Noto Sans KR', sans-serif;
}

body {
  margin: 0 auto;
  padding: 24px;
  max-width: 1360px;
  width: 100%;
  background-color: #e5e5e5;
  color: #161346;
}

header {
  display: flex;
  align-items: center;
}

.logo {
  font-weight: 500;
  font-size: 20px;
  font-family: Poppins, sans-serif;
  line-height: 30px;
}

.logo .accent {
  font-weight: 700;
}

ul.menu {
  display: flex;
  list-style: none;

  gap: 24px;
}

ul.menu > li {
  display: block;
}

.menu {
  color: #717f8e;
}

.menu > .active {
  color: #161346;
}

.site.menu {
  flex: 1 1 auto;
}

main {
  display: grid;
  margin: 24px 0;
  grid-template-areas:
    'prices assets'
    'prices order'
    'prices .';
  grid-template-rows: 307px 1fr 1fr;
  grid-template-columns: 1fr 437px;
  gap: 24px;
}

section {
  padding: 32px;
  border-radius: 16px;
  background-color: #ffffff;
}

.prices {
  grid-area: prices;
}

.detail {
  position: relative;
}

.crypto-name {
  display: flex;
  align-items: center;
  color: #161346;
  font-weight: 500;
  font-size: 24px;
  line-height: 35px;
}

.crypto-logo {
  margin-right: 16px;
  width: 32px;
  height: 32px;
}

.ticker-symbol {
  margin-left: 8px;
  color: #787e8e;
  font-weight: 400;
}

.current-price {
  margin: 8px 48px 16px;
  color: #497cff;
  font-weight: 700;
  font-size: 40px;
  line-height: 58px;
}

.current-price .change {
  margin-left: 16px;
  font-weight: 500;
  font-size: 16px;
  line-height: 23px;
}

.bookmark {
  position: absolute;
  top: 0;
  right: 0;
  width: 20px;
  height: 20px;
}

.chart-image {
  width: 100%;
}

ul.categories {
  margin: 0;
  padding: 0;
  list-style: none;
}

.categories {
  display: flex;

  gap: 8px;
}

.category {
  padding: 8px 16px;
  border-radius: 8px;
  background-color: #f9f9fb;
  color: #a5a5b3;
}

.category.active {
  background-color: #161346;
  color: #ffffff;
}

table.price-table {
  margin-top: 24px;
  width: 100%;
  border-collapse: collapse;
}

table.price-table thead {
  background: #f9f9fb;
}

table.price-table thead th {
  padding: 14px 0;
  font-weight: 500;
  font-size: 16px;
  line-height: 23px;
}

table.price-table thead th:first-child {
  border-radius: 8px 0 0 8px;
}

table.price-table th,
table.price-table td {
  text-align: right;
}

table.price-table th:first-child,
table.price-table td:first-child {
  padding-right: 14px;
  text-align: center;
}

table.price-table th:nth-child(2),
table.price-table td:nth-child(2) {
  text-align: left;
}

table.price-table thead th:last-child,
table.price-table td:last-child {
  padding-right: 14px;
}

table.price-table thead th:last-child {
  border-radius: 0 8px 8px 0;
}

table.price-table td {
  padding: 12px 0;
}

.table-item-bookmark {
  width: 24px;
  height: 24px;
  vertical-align: middle;
}

.price-table .ticker {
  color: #787e8e;
  font-weight: 400;
}

.price-table .rise {
  color: #e7566c;
}

.price-table .fall {
  color: #497cff;
}

.assets {
  display: flex;
  align-items: center;
  flex-direction: column;
  justify-content: center;
  background-color: #fff1db;
  grid-area: assets;
}

.login-message {
  text-align: center;
  font-size: 24px;
  line-height: 35px;
}

.login {
  padding: 8px 32px;
  border-radius: 8px;
  background: #ffffff;
  color: #161346;
  text-decoration: none;
  font-weight: 500;
  font-size: 21px;
  line-height: 30px;
}

.order {
  grid-area: order;
}

.order-types {
  display: flex;
}

.order-type {
  flex: 1 1 auto;
  padding: 8px;
  border-bottom: 2px solid #d1d1dc;
  color: #d1d1dc;
  text-align: center;
  text-decoration: none;
  font-weight: 500;
  font-size: 20px;
  line-height: 29px;
}

.order-type.active {
  border-bottom: 4px solid #e7566c;
  color: #e7566c;
}

.order .available,
.order .price,
.order .quantity,
.order .total {
  margin: 24px 0;
}

.order-button {
  display: block;
  margin-top: 50px;
  padding: 12px 8px;
  width: 100%;
  border: none;
  border-radius: 8px;
  background-color: #e7566c;
  color: #ffffff;
  font-weight: 500;
  font-size: 21px;
  line-height: 30px;
}

.order .label {
  color: #a5a5b3;
}

.order .label.big {
  font-weight: 500;
  font-size: 20px;
  line-height: 29px;
}

.order .available {
  display: flex;
  justify-content: space-between;
}

.input-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin: 8px 0;
  padding: 14px 24px;
  border-radius: 8px;
  background-color: #f9f9fb;

  gap: 24px;
}

.input-container .icon {
  width: 16px;
  height: 16px;
}

.input-container input {
  flex: 1 1 auto;
  border: none;
  background-color: transparent;
  color: #161346;
  text-align: center;
  font-size: 16px;
}

.order .total {
  display: flex;
  align-items: center;

  gap: 16px;
}

.order .total-price {
  flex: 1 1 auto;
  text-align: right;
  font-weight: 700;
  font-size: 24px;
  line-height: 35px;
}

.order hr {
  border: 1px solid #d1d1dc;
}



## Grid 정리

# 그리드 나누기
display 속성을 grid 로 하고 grid-template-columns 속성으로 컬럼을, grid-template-rows 속성으로 로우를 나눌 수 있습니다. 예를 들어서 3 x 2 그리드를 만드는데, 컬럼 너비는 각각 100px, 200px 100px이고 로우 너비는 150px 200px이라면 아래와 같이 쓸 수 있죠.

display: grid;
grid-template-columns: 100px 200px 100px;
grid-template-rows: 150px 200px;

# 유연한 크기 단위
fr 이라는 단위를 사용하면 플렉스박스처럼 전체 크기에 대해 상대적인 값을 지정할 수 있습니다. 예를 들어서 3 x 2 그리드에서 컬럼의 너비를 1 : 1 : 1로 하고 싶다면 아래처럼 할 수 있습니다.

display: grid;
grid-template-columns: 1fr 1fr 1fr;
grid-template-rows: 150px 200px;

# 반복되는 값을 한 번에 쓰기
repeat()으로 반복할 횟수와 값을 쓰면 코드를 깔끔하게 쓸 수 있습니다.

display: grid;
grid-template-columns: repeat(3, 1fr);
grid-template-rows: 150px 200px;

# 최소, 최대값으로 크기 정하기
최솟값과 최댓값을 지정해두면 이 사이에서 유연하게 크기가 조절되도록 할 수 있습니다. 예를 들어서 아래 코드는 컬럼의 너비가 최소 200px인데요. 화면 너비가 작아지더라도 컬럼의 너비는 200px보다 작아지지는 않고, 화면 너비가 넓어지면 컬럼의 너비는 1 : 1 : 1 비율로 늘어납니다.

display: grid;
grid-template-columns: repeat(3, minmax(200px, 1fr));
grid-template-rows: 150px 200px;

# 간격 넣기
gap 속성으로 간격을 넣습니다. 플렉스박스와 마찬가지로 값을 한 개만 쓰면 세로 가로 모두 간격을 지정할 수 있고, 세로 그리고 가로 순으로 숫자를 두 개 쓰면 세로 간격이랑 가로 간격을 지정할 수 있습니다. 예를 들어서 아래 코드는 세로 간격 20px, 가로 간격 10px로 지정한 코드입니다.

display: grid;
grid-template-columns: repeat(3, minmax(200px, 1fr));
grid-template-rows: 150px 200px;
gap: 20px 10px;

# 원하는 위치로 배치하기
grid-column 과 grid-row 속성을 사용하면 원하는 위치에 요소를 배치할 수 있습니다.

# 그리드 라인 번호
컬럼 라인은 왼쪽에서부터 오른쪽으로 1, 2, 3, … 이렇게 번호를 붙이고, 로우 라인은 위에서부터 아래로 1, 2, 3, … 이렇게 번호를 붙입니다. 이때 테두리도 그리드 라인에 포함된다는 점에 주의하세요. 테두리부터 1번입니다. 예를 들어서 3 x 2 그리드리드에서는 컬럼 라인은 1, 2, 3, 4 이렇게 네 개가 있고, 로우 라인은 1, 2, 3 이렇게 세 개가 있습니다.

1

2

# 배치하기
예를 들어서 2번 컬럼 라인에서 시작해서 4번 컬럼 라인에서 끝나고, 1번 로우 라인에서 시작해서 3번 로우 라인에서 끝나는 배치를 생각해 보겠습니다. 시작 라인과 끝 라인을 슬래시로 구분해서 적어주면 됩니다.

3

음수 값의 라인 넘버를 섞어서 써도 됩니다.

4

span 이라는 키워드를 쓰면 시작하는 라인 번호와 차지할 크기를 적어 줄 수 있습니다. 예를 들어서 아래의 경우 컬럼 2칸, 로우 2칸을 차지하니까 각각 span 2로 써 줬습니다.

5

# 이름으로 배치하기
grid-area 로 영역에 이름을 붙이고, grid-template-areas 로 이름을 사용해 배치할 수 있습니다. 아래 코드는 2 x 2 그리드를 만들고 .sidebar 와 .main 그리고 .player 를 배치한 예시입니다. 참고로 셀을 비워놓고 싶다면 이름 대신 마침표(.)를 쓰면 됩니다.

body {
  grid-template-areas:
    's m'
    'p p';
}

.sidebar {
  grid-area: s;
}

.main {
  grid-area: m;
}

.player {
  grid-area: p;
}


## 랜딩 페이지
# index.html
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="utf-8">
  <title>Codeit Music</title>
  <link rel="stylesheet" as="style" crossorigin href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.6/dist/web/static/pretendard.css">
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <header>
    <div class="wrap">Codeit Music</div>
  </header>
  <section class="hero">
    <video src="videos/bg.mp4" class="bg" autoplay loop muted></video>
    <div class="hero-heading">
      <h1>
        <span class="small">코딩을 넘어</span><br>
        <span class="big">음악의 즐거움</span>까지.
      </h1>
    </div>
  </section>
  <section class="headline wrap">
    <img class="headline-image" src="images/phone.png" alt="앱 실행 화면" width="504" height="520">
    <div>
      <h2 class="headline-heading">
        내 손안의<br>
        작은 파티,
      </h2>
      <p class="headline-description">
        Codeit Music에서 인기있는 음악을 3개월 동안 무료로 들어보세요.
      </p>
    </div>
  </section>
  <section class="promotion">
    <div class="promotion-content">
      <h2>모든 음악과 뮤직 비디오<br>3개월 내내 33% 할인</h2>
      <p>평색 오직 한 번 뿐인 혜택</p>
    </div>
    <button class="promotion-button">멤버십 가입하고 혜택 받기</button>
  </section>
  <section class="wrap">
    <h2 class="plans-title">요금제</h2>
    <div class="plans">
      <div class="card event">
        <div class="event-badge">EVENT</div>
        <h3>
          첫 구독<br>
          3개월 33% 할인
        </h3>
        <p>
          월 3,500원부터<br>
          (부가세 포함)
        </p>
      </div>
      <div class="card">
        <h3>
          모든 음원<br>
          무제한 듣기
        </h3>
        <p>
          월 5,500원부터<br>
          (부가세 포함)
        </p>
      </div>
      <div class="card">
        <h3>
          무제한 듣기<br>
          + 다운로드
        </h3>
        <p>
          월 8,800원부터<br>
          (부가세 포함)
        </p>
      </div>
    </div>
    <h2 class="benefits-title">멤버십 정보</h2>
    <div class="benefits">
      <div class="card">
        <h3>무제한 듣기</h3>
        <ul>
          <li>모든 기기에서 재생</li>
          <li>최대 40% 할인</li>
          <li>뮤직비디오 무제한</li>
        </ul>
      </div>
      <div class="card">
        <h3>다운로드</h3>
        <ul>
          <li>모든 기기에서 재생</li>
          <li>데이터 없이 마음껏 재생</li>
          <li>뮤직비디오 소장</li>
        </ul>
      </div>
      <div class="card wide">
        <h3>유의사항</h3>
        <p class="caution">
          3개월 동안 33% 할인된 가격으로 결제되고 3개월 후부터 매달 정상 가격으로 결제됩니다.
          멤버십은 언제든지 해지하실 수 있고, 추가로 부담해야 할 금액은 없습니다.
          모든 가격은 부가가치세가 포함된 가격입니다.
        </p>
      </div>
    </div>
  </section>
  <footer>
    <div class="footer-content wrap">
      <a href="#">코드잇 소개</a>
      <a href="#">사용자 이용 약관</a>
      <a href="#">개인정보 취급방침</a>
      <a href="#">자주 묻는 질문</a>
      <a href="#">고객 센터</a>
      <div class="footer-info">
        (주) 코드잇<br>
        대표 KANG YOUNG HOON, 이윤수<br>
        개인정보보호책임자 강영훈
      </div>
      <div class="footer-info">
        사업자 번호 313-86-00797<br>
        통신판매업 제 2019-서울중구-1034 호<br>
        서울특별시 중구 청계천로 100 시그니쳐타워 동관 10층 코드잇
      </div>
    </div>
  </footer>
</body>
</html>

# style.css
html {
  font-family: Pretendard, sans-serif;
  word-break: keep-all;
}

body {
  background-color: #000;
  color: #fff;
  margin: 0;
}

.wrap {
  max-width: 1080px;
  width: 100%;
  margin: 0 auto;
  padding: 32px;
}

header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  background-image: linear-gradient(
    180deg,
    #000000 15.1%,
    rgba(0, 0, 0, 0) 100%
  );
  padding: 16px;
  z-index: 1;
  font-weight: 700;
}

.hero {
  position: relative;
}

.bg {
  width: 100%;
  opacity: 0.5;
}

.hero-heading {
  position: absolute;
  inset: 0;
  margin: 0;
  padding: 24px;
  display: flex;
  justify-content: center;
  align-items: center;
  background-image: linear-gradient(rgba(0, 0, 0, 0) 50%, rgba(0, 0, 0, 1) 100%);
}

.hero-heading h1 {
  margin: -160px 0 0;
  font-weight: 400;
  font-size: 80px;
  line-height: 95px;
  text-align: center; 
  color: #ffffff;
}

.hero-heading .small {
  font-size: 48px;
  line-height: 57px;
  text-align: center;
  color: rgba(217, 217, 217, 0.5);
}

.hero-heading .big {
  font-weight: 700;
}

.headline {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 176px;
}

.headline-image {
  width: 504px;
  height: 520px;
}

.headline-heading {
  font-weight: 700;
  font-size: 56px;
  line-height: 67px;
  margin: 32px 0;
}

.headline-description {
  font-size: 24px;
  line-height: 29px;
}

.promotion {
  background-color: #280357;
  margin: 200px 0;
  padding: 80px 180px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.promotion-content h2 {
  font-weight: 400;
  font-size: 40px;
  line-height: 48px;
  margin: 24px 0;
}

.promotion-content p {
  font-size: 24px;
  line-height: 29px;
}

.promotion-button {
  background-color: transparent;
  border: 1px solid #fff;
  padding: 24px;
  border-radius: 16px;
  font-size: 24px;
  line-height: 29px;
  color: #fff;
}

.plans-title,
.benefits-title {
  font-weight: 500;
  font-size: 24px;
  line-height: 29px;
  margin: 32px 0;
}

.plans {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  gap: 24px;
  margin-bottom: 120px;
}

.card {
  padding: 56px 96px;
  border: 2px solid #ffffff;
  border-radius: 16px;
  text-align: center;
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.card.event {
  border-color: #7f5fff;
}

.card h3 {
  font-weight: 700;
  font-size: 24px;
  line-height: 29px;
  margin: 0 0 16px;
}

.card.event h3 {
  color: #7f5fff;
}

.card p {
  line-height: 24px;
}

.card ul {
  text-align: left;
  line-height: 19px;
}

.card.event .event-badge {
  background-color: red;
  position: absolute;
  top: 16px;
  right: 16px;
  font-weight: 700;
  padding: 8px 12px;
  background: #7f5fff;
  color: #000000;
  border-radius: 8px;
}

.benefits {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 24px;
}

.benefits .wide {
  grid-column: 1/3;
}

.caution {
  text-align: left;
}

footer {
  margin-top: 160px;
  padding: 64px 180px 80px;
  background-color: #14161f;
}

.footer-content {
  display: grid;
  grid-template:
    repeat(2, 1fr) /
    repeat(6, 1fr);
  gap: 24px;
}

.footer-content a {
  color: #ffffff;
  text-decoration: none;
}

.footer-info {
  grid-column: span 3;
  color: #ffffff;
  color: rgba(255, 255, 255, 0.4);
}


## 뮤직 매거진

<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="utf-8">
  <title>Codeit Music - Magazine</title>
  <link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&family=Poppins:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <main>
    <section>
      <div class="featured">
        <img class="featured-thumb" src="images/img_main_banner.png" alt="두바이 프레임 풍경 사진">
        <div class="featured-content">
          <div class="featured-tag">뮤직 매거진</div>
          <h2 class="featured-title">
            여행에서<br>
            다시 일상으로
          </h2>
          <p class="featured-description">
            비행기 표를 예매하고 짐을 챙기는 순간부터 여행이 시작된 것 같은 기분이죠.
            화려한 여행지의 추억을 뒤로하고 다시 일상으로 돌아온 사람들을 위한 파워풀한 음악을 준비했습니다.
            여행에서 재충전한 에너지를 모아 모아서힘찬 한 주를 시작해보는 건 어떨까요?
          </p>
        </div>
      </div>
    </section>
    <section>
      <h2 class="section-title">이달의 플레이리스트</h2>
      <div class="playlists">
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_1.png">
          <div class="playlist-title">
            여행을 떠나요
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_2.png">
          <div class="playlist-title">
            금요일 저녁의 카페에서
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_3.png">
          <div class="playlist-title">
            이제 집중할 시간
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_4.png">
          <div class="playlist-title">
            몰디브 한 잔
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_5.png">
          <div class="playlist-title">
            K-Pop 믹스
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_6.png">
          <div class="playlist-title">
            공부를 위한 클래식
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_7.png">
          <div class="playlist-title">
            한국 시티팝 20선
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_8.png">
          <div class="playlist-title">
            편안하게 느긋하게
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_9.png">
          <div class="playlist-title">
            고요한 밤을 위한 BGM
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
      </div>
    </section>
    <section>
      <h2 class="section-title">추천 아티스트</h2>
      <div class="artists">
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_1.png">
          <div class="artist-name">Neon 5</div>
        </div>
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_2.png">
          <div class="artist-name">곤잘레스</div>
        </div>
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_3.png">
          <div class="artist-name">케이시 킹</div>
        </div>
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_4.png">
          <div class="artist-name">Frake</div>
        </div>
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_5.png">
          <div class="artist-name">체인스모킹</div>
        </div>
      </div>
    </section>
    <section>
      <h2 class="section-title">느낌 별 스테이션</h2>
      <div class="stations">
        <img class="station" src="images/img_station_1.png">
        <img class="station" src="images/img_station_2.png">
        <img class="station" src="images/img_station_3.png">
        <img class="station" src="images/img_station_4.png">
        <img class="station" src="images/img_station_5.png">
        <img class="station" src="images/img_station_6.png">
        <img class="station" src="images/img_station_7.png">
        <img class="station" src="images/img_station_8.png">
        <img class="station" src="images/img_station_9.png">
      </div>
    </section>
    <section>
      <div class="charts-header">
        <h2 class="section-title charts-title">이달의 Top 100</h2>
        <a class="charts-see-all" href="#">
          모두보기
        </a>
      </div>
      <ol class="charts">
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_1.png" alt="사건의 수평선">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                1<br>
              </div>
              <span class="chart-change up">▲</span>
            </div>
            <div>
              <div class="chart-title">사건의 수평선</div>
              <div class="chart-artist">은하</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_2.png" alt="FRAGILE">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                2<br>
              </div>
              <span class="chart-change down">▼</span>
            </div>
            <div>
              <div class="chart-title">FRAGILE</div>
              <div class="chart-artist">세라핌</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_3.png" alt="Hype Girl">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                3<br>
              </div>
              <span class="chart-change">―</span>
            </div>
            <div>
              <div class="chart-title">Hype Girl</div>
              <div class="chart-artist">OldJeans</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_4.png" alt="사랑은 늘 찾아와">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                4<br>
              </div>
              <span class="chart-change">―</span>
            </div>
            <div>
              <div class="chart-title">사랑은 늘 찾아와</div>
              <div class="chart-artist">임빌런</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_5.png" alt="Black Venom">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                5<br>
              </div>
              <span class="chart-change up">▲</span>
            </div>
            <div>
              <div class="chart-title">Black Venom</div>
              <div class="chart-artist">PinkPink</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_6.png" alt="사건의 수평선">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                6<br>
              </div>
              <span class="chart-change down">▼</span>
            </div>
            <div>
              <div class="chart-title">취중고백</div>
              <div class="chart-artist">멜로</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_7.png" alt="Snowman">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                7<br>
              </div>
              <span class="chart-change up">▲</span>
            </div>
            <div>
              <div class="chart-title">Snowman</div>
              <div class="chart-artist">지아</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_8.png" alt="Hollywood">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                8<br>
              </div>
              <span class="chart-change up">▲</span>
            </div>
            <div>
              <div class="chart-title">Hollywood</div>
              <div class="chart-artist">검정바지</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_9.png" alt="I Think I Like Her">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                9<br>
              </div>
              <span class="chart-change down">▼</span>
            </div>
            <div>
              <div class="chart-title">I Think I Like Her</div>
              <div class="chart-artist">찰리 원더</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_10.png" alt="London">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                10<br>
              </div>
              <span class="chart-change">―</span>
            </div>
            <div>
              <div class="chart-title">London</div>
              <div class="chart-artist">체인스모킹</div>
            </div>
          </div>
        </li>
      </ol>
    </section>
  </main>
</body>
</html>


# style.css
* {
  box-sizing: border-box;
}

html {
  word-break: keep-all;
  font-family: Pretendard, sans-serif;
  font-size: 16px;
  line-height: 19px;
}

body {
  background-color: #000;
  color: #d9d9d9;
  margin: 0;
}

section {
  max-width: 1120px;
  width: 100%;
  margin: 80px auto;
  padding: 0 36px;
}

.section-title {
  font-weight: 700;
  font-size: 32px;
  line-height: 38px;
  margin: 40px 0;
}

.featured {
  display: flex;
  gap: 40px;
}

.featured-thumb {
  flex-shrink: 0;
  border-radius: 24px;
}

.featured-content {
  display: flex;
  gap: 24px;
  flex-direction: column;
}

.featured-tag {
  width: fit-content;
  background-color: #18181b;
  border-radius: 16px;
  padding: 8px 16px;
  font-weight: 500;
  font-size: 20px;
  line-height: 24px;
  color: #565662;
}

.featured-title {
  font-weight: 700;
  font-size: 40px;
  line-height: 48px;
  color: #d9d9d9;
  margin: 0;
}

.featured-description {
  margin: 0;
  color: #868686;
}

.playlists {
  display: flex;
  flex-wrap: wrap;
  gap: 24px;
}

.playlist {
  flex-basis: 23%;
}

.playlist-thumb {
  width: 100%;
  border-radius: 16px;
}

.playlist-title {
  font-weight: 700;
  font-size: 24px;
  line-height: 29px;
  margin: 16px 0 8px;
}

.playlist-artist {
  color: #868686;
  margin: 0;
}

.artists {
  display: flex;
  gap: 32px;
}

.artist {
  width: 120px;
  text-align: center;
  border-radius: 50%;
}

.artist-profile {
  width: 100%;
  border-radius: 50%;
}

.artist-name {
  font-weight: 500;
  font-size: 24px;
  line-height: 29px;
  margin: 24px 0 0;
}

.stations {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 40px;
}

.station {
  width: 100%;
  aspect-ratio: 1;
  border-radius: 16px;
}

.charts {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-auto-rows: 160px;
  list-style: none;
  padding: 0;
  margin: 0;
  gap: 32px;
}

.charts-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 32px 0;
}

.charts-title {
  margin: 0;
}

.charts-see-all {
  font-weight: 500;
  font-size: 24px;
  line-height: 29px;
  text-decoration: none;
  color: #d9d9d9;
}

.chart {
  width: 100%;
  display: flex;
  align-items: center;
  gap: 30px;
}

.chart-info {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.chart-rank {
  display: flex;
  align-items: center;
  gap: 8px;
}

.chart-number {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  background: #1a1a1a;
  font-weight: 700;
  font-size: 24px;
  line-height: 29px;
}

.chart-change {
  font-size: 14px;
  color: rgba(255, 255, 255, 0.2);
}

.chart-change.up {
  color: #d93045;
}

.chart-cover {
  flex: 0 0;
  width: 160px;
  height: 160px;
  border-radius: 16px;
}

.chart-title {
  font-weight: 700;
  font-size: 32px;
  line-height: 38px;
}

.chart-artist {
  font-weight: 500;
  font-size: 24px;
  line-height: 29px;
  color: #868686;
}



## 플레이 리스트
# index.html

<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="utf-8">
      <title>Codeit Music</title>
    <link
      rel="stylesheet"
      as="style"
      crossorigin
      href="https://cdn.jsdelivr.net/gh/orioncactus/pretendard@v1.3.6/dist/web/static/pretendard.css"
   >
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <header>
      <div class="wrap">Codeit Music</div>
    </header>
    <main class="wrap">
      <div class="info">
        <div class="cover">
          <img
            class="cover-image"
            src="images/img_cafe.png"
            alt="카페에서 일할 때 커버 이미지"
         >
          <img
            src="images/icon_play.png"
            alt="재생 아이콘"
            class="cover-play-icon"
         >
        </div>
        <h1 class="playlist-title">
          카페에서 일할 때
          <span class="hot-badge"> 인기 </span>
        </h1>
        <div class="artist">
          <img
            src="images/img_codeit.png"
            alt="코드잇 프로필"
            class="artist-profile"
         >
          코드잇
        </div>
        <div class="description">
          차분하게 흐르는 따뜻한 음악과 함께하는 휴식. Codeit Music 에디터가
          매달 업데이트하는 플레이리스트입니다. 마음에 드는 곳이 있다면 보관함에
          추가해 보세요.
        </div>
        <button class="play-button">▶️ 지금 듣기</button>
      </div>
      <div class="tracks">
        <div class="track">
          <div class="track-number">1</div>
          <div class="track-title">자주자주(디깅클럽부산 Ver.)</div>
          <div class="track-artist">지조</div>
          <img
            class="track-icon"
            src="images/icon_playlist.svg"
            alt="플레이리스트에 넣기"
         >
          <img class="track-icon" src="images/icon_more.svg" alt="더 보기">
        </div>
        <div class="track">
          <div class="track-number">2</div>
          <div class="track-title">All</div>
          <div class="track-artist">천예린</div>
          <img
            class="track-icon"
            src="images/icon_playlist.svg"
            alt="플레이리스트에 넣기"
         >
          <img class="track-icon" src="images/icon_more.svg" alt="더 보기">
        </div>
        <div class="track active">
          <div class="track-number">3</div>
          <div class="track-title">나는 어떻게 (Feat. 천예린)</div>
          <div class="track-artist">심원찬</div>
          <img
            class="track-icon"
            src="images/icon_playlist.svg"
            alt="플레이리스트에 넣기"
         >
          <img class="track-icon" src="images/icon_more.svg" alt="더 보기">
        </div>
        <div class="track">
          <div class="track-number">4</div>
          <div class="track-title">시간을 거슬러(Feat. 지조)</div>
          <div class="track-artist">오키</div>
          <img
            class="track-icon"
            src="images/icon_playlist.svg"
            alt="플레이리스트에 넣기"
         >
          <img class="track-icon" src="images/icon_more.svg" alt="더 보기">
        </div>
        <div class="track">
          <div class="track-number">5</div>
          <div class="track-title">우르르</div>
          <div class="track-artist">핫트</div>
          <img
            class="track-icon"
            src="images/icon_playlist.svg"
            alt="플레이리스트에 넣기"
         >
          <img class="track-icon" src="images/icon_more.svg" alt="더 보기">
        </div>
        <div class="track">
          <div class="track-number">6</div>
          <div class="track-title">당신이 맞다는 대답을 할 거예요</div>
          <div class="track-artist">이강하</div>
          <img
            class="track-icon"
            src="images/icon_playlist.svg"
            alt="플레이리스트에 넣기"
         >
          <img class="track-icon" src="images/icon_more.svg" alt="더 보기">
        </div>
      </div>
    </main>
  </body>
</html>


# style.css
* {
  box-sizing: border-box;
}

html {
  word-break: keep-all;
  font-family: Pretendard, sans-serif;
}

body {
  margin: 0;
  background-color: #000;
  color: #fff;
}

.wrap {
  margin: 0 auto;
  padding: 32px;
  max-width: 1080px;
  width: 100%;
}

header {
  position: sticky;
  top: 0;
  z-index: 1;
  padding: 16px;
  background-image: linear-gradient(
    180deg,
    #000000 15.1%,
    rgba(0, 0, 0, 0) 100%
  );
  font-weight: 700;
}

.info {
  margin-bottom: 40px;
  padding: 40px;
  border-bottom: 1px solid #595864;
}

.cover {
  width: 252px;
  height: 252px;
  border-radius: 24px;
  overflow: hidden;
  position: relative;
}

.cover-image {
  width: 100%;
  height: 100%;
}

.cover-play-icon {
  display: none;
  width: 72px;
  height: 72px;
  position: absolute;
  left: 28px;
  bottom: 28px;
}

.cover:hover .cover-play-icon {
  display: block;
}

.playlist-title {
  margin: 40px 0 16px;
  font-weight: 700;
  font-size: 40px;
  line-height: 48px;
}

.hot-badge {
  position: relative;
  top: -20px;
  padding: 4px 8px;
  border-radius: 8px;
  background-color: #2a2a31;
  color: #8e8ea0;
  font-weight: 700;
  font-size: 16px;
  line-height: 19px;
}

.artist {
  display: flex;
  align-items: center;
  color: #7d7c8a;
  font-weight: 400;
  font-size: 16px;
  line-height: 19px;
  gap: 8px;
}

.artist-profile {
  overflow: hidden;
  width: 24px;
  height: 24px;
  border-radius: 50%;
}

.description {
  margin: 16px 0 32px;
  color: #7d7c8a;
  font-weight: 400;
  font-size: 16px;
  line-height: 19px;
}

.play-button {
  padding: 12px 24px;
  border: none;
  border-radius: 8px;
  background-color: #4b1bb1;
  color: #ffffff;
  font-weight: 500;
  font-size: 16px;
  line-height: 19px;
}

.track {
  display: flex;
  align-items: center;
  padding: 24px 32px;
  gap: 16px;
}

.track.active {
  border-radius: 16px;
  background-color: #19191f;
}

.track-title {
  flex: 1 1 auto;
}

.track-icon {
  width: 16px;
  height: 16px;
}


## 음악플레이어
주어진 코드를 수정해서 음악 플레이어 화면을 완성해 봅시다. 왼쪽의 사이드 바와 아래쪽의 플레이어가 항상 고정된 상태로 보이도록 배치해 주세요.

이번 레슨에서는 포지션, 플렉스박스, 그리드를 사용해서 사이트 전체를 배치해 보는 것이 목표이니까 세세한 여백이나 크기는 다르더라도 괜찮습니다.

# 해설
이번 해설에서는 디자인에서 가장 중요한 사이드바 영역과 플레이어 영역의 배치에 대해서만 설명하겠습니다.

우선 .sidebar와 .player가 항상 고정된 상태로 떠 있도록 배치해 볼게요. fixed 포지션을 사용하면 되겠죠? .sidebar는 너비가 240px인데요. 위쪽에서 0px, 아래쪽에서 0px, 왼쪽에서 0px 위치로 배치할게요.

그리고 .player는 높이가 100px인데요. 오른쪽에서 0px, 아래쪽에서 0px, 왼쪽에서 0px 위치에 배치하겠습니다.

여기서 주의할 점이 하나 있는데요. fixed 포지션은 자리를 차지하지 않습니다. 페이지를 맨 아래까지 완전히 스크롤했을 때 본문과 플레이어가 겹치지 않도록, <main> 태그에 여백(margin-bottom)을 추가해 주는 것도 잊지 마세요.

.sidebar {
  padding: 16px;
  background-color: #161519;
  color: #8c8993;
  width: 240px;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
}

/* ... */

main {
  margin-left: 240px;
  margin-bottom: 100px;
}

.player {
  height: 100px;
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
}

# index.html
<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="utf-8">
  <title>Codeit Music - Magazine</title>
  <link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&family=Poppins:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div class="sidebar">
    <img class="logo" src="images/logo.svg">
    <ul class="menu-items">
      <li class="menu-item">
        <img src="images/icon_home.svg" alt="뮤직 홈" width="14" height="14">
        뮤직 홈
      </li>
      <li class="menu-item">
        <img src="images/icon_album.svg" alt="추천 앨범" width="14" height="14">
        추천 앨범
      </li>
      <li class="menu-item active">
        <img src="images/icon_playlist.svg" alt="뮤직 매거진" width="14" height="14">
        뮤직 매거진
      </li>
      <li class="menu-item">
        <img src="images/icon_genre.svg" alt="장르 별 보기" width="14" height="14">
        장르 별 보기
      </li>
    </ul>
    <ul class="menu-items">
      <li class="menu-item">혼자 보내는 조용한...</li>
      <li class="menu-item">꼭 들어야 할 해외...</li>
      <li class="menu-item">90년대 힙합 개론</li>
      <li class="menu-item">스타벅스 음악 023</li>
      <li class="menu-item">+ New Playlist</li>
    </ul>
  </div>
  <main>
    <section>
      <div class="featured">
        <img class="featured-thumb" src="images/img_main_banner.png" alt="두바이 프레임 풍경 사진">
        <div class="featured-content">
          <div class="featured-tag">뮤직 매거진</div>
          <h2 class="featured-title">
            여행에서<br>
            다시 일상으로
          </h2>
          <p class="featured-description">
            비행기 표를 예매하고 짐을 챙기는 순간부터 여행이 시작된 것 같은 기분이죠.
            화려한 여행지의 추억을 뒤로하고 다시 일상으로 돌아온 사람들을 위한 파워풀한 음악을 준비했습니다.
            여행에서 재충전한 에너지를 모아 모아서힘찬 한 주를 시작해보는 건 어떨까요?
          </p>
        </div>
      </div>
    </section>
    <section>
      <h2 class="section-title">이달의 플레이리스트</h2>
      <div class="playlists">
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_1.png">
          <div class="playlist-title">
            여행을 떠나요
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_2.png">
          <div class="playlist-title">
            금요일 저녁의 카페에서
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_3.png">
          <div class="playlist-title">
            이제 집중할 시간
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_4.png">
          <div class="playlist-title">
            몰디브 한 잔
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_5.png">
          <div class="playlist-title">
            K-Pop 믹스
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_6.png">
          <div class="playlist-title">
            공부를 위한 클래식
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_7.png">
          <div class="playlist-title">
            한국 시티팝 20선
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_8.png">
          <div class="playlist-title">
            편안하게 느긋하게
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
        <div class="playlist">
          <img class="playlist-thumb" src="images/img_playlist_9.png">
          <div class="playlist-title">
            고요한 밤을 위한 BGM
          </div>
          <div class="playlist-artist">
            Codeit Music
          </div>
        </div>
      </div>
    </section>
    <section>
      <h2 class="section-title">추천 아티스트</h2>
      <div class="artists">
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_1.png">
          <div class="artist-name">Neon 5</div>
        </div>
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_2.png">
          <div class="artist-name">곤잘레스</div>
        </div>
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_3.png">
          <div class="artist-name">케이시 킹</div>
        </div>
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_4.png">
          <div class="artist-name">Frake</div>
        </div>
        <div class="artist">
          <img class="artist-profile" src="images/img_artist_5.png">
          <div class="artist-name">체인스모킹</div>
        </div>
      </div>
    </section>
    <section>
      <h2 class="section-title">느낌 별 스테이션</h2>
      <div class="stations">
        <img class="station" src="images/img_station_1.png">
        <img class="station" src="images/img_station_2.png">
        <img class="station" src="images/img_station_3.png">
        <img class="station" src="images/img_station_4.png">
        <img class="station" src="images/img_station_5.png">
        <img class="station" src="images/img_station_6.png">
        <img class="station" src="images/img_station_7.png">
        <img class="station" src="images/img_station_8.png">
        <img class="station" src="images/img_station_9.png">
      </div>
    </section>
    <section>
      <div class="charts-header">
        <h2 class="section-title charts-title">이달의 Top 100</h2>
        <a class="charts-see-all" href="#">
          모두보기
        </a>
      </div>
      <ol class="charts">
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_1.png" alt="사건의 수평선">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                1<br>
              </div>
              <span class="chart-change up">▲</span>
            </div>
            <div>
              <div class="chart-title">사건의 수평선</div>
              <div class="chart-artist">은하</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_2.png" alt="FRAGILE">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                2<br>
              </div>
              <span class="chart-change down">▼</span>
            </div>
            <div>
              <div class="chart-title">FRAGILE</div>
              <div class="chart-artist">세라핌</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_3.png" alt="Hype Girl">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                3<br>
              </div>
              <span class="chart-change">―</span>
            </div>
            <div>
              <div class="chart-title">Hype Girl</div>
              <div class="chart-artist">OldJeans</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_4.png" alt="사랑은 늘 찾아와">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                4<br>
              </div>
              <span class="chart-change">―</span>
            </div>
            <div>
              <div class="chart-title">사랑은 늘 찾아와</div>
              <div class="chart-artist">임빌런</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_5.png" alt="Black Venom">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                5<br>
              </div>
              <span class="chart-change up">▲</span>
            </div>
            <div>
              <div class="chart-title">Black Venom</div>
              <div class="chart-artist">PinkPink</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_6.png" alt="사건의 수평선">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                6<br>
              </div>
              <span class="chart-change down">▼</span>
            </div>
            <div>
              <div class="chart-title">취중고백</div>
              <div class="chart-artist">멜로</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_7.png" alt="Snowman">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                7<br>
              </div>
              <span class="chart-change up">▲</span>
            </div>
            <div>
              <div class="chart-title">Snowman</div>
              <div class="chart-artist">지아</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_8.png" alt="Hollywood">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                8<br>
              </div>
              <span class="chart-change up">▲</span>
            </div>
            <div>
              <div class="chart-title">Hollywood</div>
              <div class="chart-artist">검정바지</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_9.png" alt="I Think I Like Her">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                9<br>
              </div>
              <span class="chart-change down">▼</span>
            </div>
            <div>
              <div class="chart-title">I Think I Like Her</div>
              <div class="chart-artist">찰리 원더</div>
            </div>
          </div>
        </li>
        <li class="chart">
          <img class="chart-cover" src="images/img_chart_10.png" alt="London">
          <div class="chart-info">
            <div class="chart-rank">
              <div class="chart-number">
                10<br>
              </div>
              <span class="chart-change">―</span>
            </div>
            <div>
              <div class="chart-title">London</div>
              <div class="chart-artist">체인스모킹</div>
            </div>
          </div>
        </li>
      </ol>
    </section>
  </main>
  <div class="player">
    <div class="progress-bar">
      <div class="progress"></div>
    </div>
    <div class="player-main">
      <div class="info">
        <img class="current" src="images/img_current_song.png" alt="현재 재생 중인 곡">
        <div class="title">After Sunset</div>
        <div class="artist">Benjamin</div>
      </div>
      <div class="controls">
        <img src="images/icon_before.svg" alt="이전 곡" width="48" height="48">
        <img src="images/icon_pause.svg" alt="일시정지" width="48" height="48">
        <img src="images/icon_after.svg" alt="다음 곡" width="48" height="48">
      </div>
      <div class="time">
        2:34 / 5:67
      </div>
    </div>
  </div>
</body>
</html>


# style.css
* {
  box-sizing: border-box;
}

html {
  font-family: Pretendard, sans-serif;
  word-break: keep-all;
}

body {
  margin: 0;
  background-color: #000;
  color: #fff;
  font-size: 16px;
  line-height: 24px;
}

.sidebar {
  padding: 16px;
  background-color: #161519;
  color: #8c8993;
  width: 240px;
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
}

.logo {
  padding: 24px 28px;
  font-weight: 900;
}

.menu-items {
  margin: 0;
  margin-bottom: 48px;
  padding: 0;
  list-style: none;
}

.menu-item {
  display: flex;
  align-items: center;
  padding: 8px 24px;

  gap: 8px;
}

.menu-item.active {
  background-color: rgba(205, 187, 255, 0.1);
  color: #ffffff;
}

main {
  margin-left: 240px;
  margin-bottom: 100px;
}

.player {
  height: 100px;
  position: fixed;
  right: 0;
  bottom: 0;
  left: 0;
  display: flex;
  flex-direction: column;
}

.progress-bar {
  flex: 0 0 6px;
  height: 6px;
  background: linear-gradient(0deg, #4d4d54, #4d4d54),
    linear-gradient(0deg, #4d4d54, #4d4d54), #4d4d54;
}

.progress {
  width: 70%;
  height: 100%;
  background-color: #7000ff;
}

.player-main {
  display: flex;
  align-items: center;
  flex: 1 0 auto;
  justify-content: space-between;
  padding: 16px 40px;
  background-color: rgba(48, 48, 55, 0.7);

  backdrop-filter: blur(15px);
}

.info,
.time {
  flex-basis: 300px;
}

.info {
  display: flex;
  align-items: center;

  gap: 16px;
}

.current {
  border-radius: 14px;
}

.title {
  color: #d9d9d9;
}

.artist {
  color: #8c8993;
}

.playing {
  width: 48px;
  height: 48px;
}

.icon {
  width: 24px;
  height: 24px;
}

.controls {
  display: flex;
  align-items: center;
  justify-content: center;
}

.time {
  display: flex;
  justify-content: flex-end;
  color: #8c8993;
}

section {
  max-width: 1120px;
  width: 100%;
  margin: 80px auto;
  padding: 0 36px;
}

.section-title {
  font-weight: 700;
  font-size: 32px;
  line-height: 38px;
  margin: 40px 0;
}

.featured {
  display: flex;
  gap: 40px;
}

.featured-thumb {
  flex-shrink: 0;
  border-radius: 24px;
}

.featured-content {
  display: flex;
  gap: 24px;
  flex-direction: column;
}

.featured-tag {
  width: fit-content;
  background-color: #18181b;
  border-radius: 16px;
  padding: 8px 16px;
  font-weight: 500;
  font-size: 20px;
  line-height: 24px;
  color: #565662;
}

.featured-title {
  font-weight: 700;
  font-size: 40px;
  line-height: 48px;
  color: #d9d9d9;
  margin: 0;
}

.featured-description {
  margin: 0;
  color: #868686;
}

.playlists {
  display: flex;
  flex-wrap: wrap;
  gap: 24px;
}

.playlist {
  flex-basis: 23%;
}

.playlist-thumb {
  width: 100%;
  border-radius: 16px;
}

.playlist-title {
  font-weight: 700;
  font-size: 24px;
  line-height: 29px;
  margin: 16px 0 8px;
}

.playlist-artist {
  color: #868686;
  margin: 0;
}

.artists {
  display: flex;
  gap: 32px;
}

.artist {
  width: 120px;
  text-align: center;
  border-radius: 50%;
}

.artist-profile {
  width: 100%;
  border-radius: 50%;
}

.artist-name {
  font-weight: 500;
  font-size: 24px;
  line-height: 29px;
  margin: 24px 0 0;
}

.stations {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 40px;
}

.station {
  width: 100%;
  aspect-ratio: 1;
  border-radius: 16px;
}

.charts {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-auto-rows: 160px;
  list-style: none;
  padding: 0;
  margin: 0;
  gap: 32px;
}

.charts-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 32px 0;
}

.charts-title {
  margin: 0;
}

.charts-see-all {
  font-weight: 500;
  font-size: 24px;
  line-height: 29px;
  text-decoration: none;
  color: #d9d9d9;
}

.chart {
  width: 100%;
  display: flex;
  align-items: center;
  gap: 30px;
}

.chart-info {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.chart-rank {
  display: flex;
  align-items: center;
  gap: 8px;
}

.chart-number {
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  background: #1a1a1a;
  font-weight: 700;
  font-size: 24px;
  line-height: 29px;
}

.chart-change {
  font-size: 14px;
  color: rgba(255, 255, 255, 0.2);
}

.chart-change.up {
  color: #d93045;
}

.chart-cover {
  flex: 0 0;
  width: 160px;
  height: 160px;
  border-radius: 16px;
} 

.chart-title {
  font-weight: 700;
  font-size: 32px;
  line-height: 38px;
}

.chart-artist {
  font-weight: 500;
  font-size: 24px;
  line-height: 29px;
  color: #868686;
}


## 코멘트
CSS를 작성하다 보면 코드에 설명을 적고 싶을 때가 있습니다.
예를들어서 .zzim-button 이라는 클래스를 만들었는데, 코드를 처음 보는 사람들은 이게 어디에 쓰이는지 잘 모를 수도 있고, 내가 작성한 코드라도 한참 뒤에 본다면 헷갈릴 수 있으니까요.
이럴 땐 ‘코멘트라는 걸 사용하면 됩니다.

# 코멘트 문법
/* 찜하기 버튼 */
.zzim-button {
  font-size: 24px;
  padding: 8px;
}
코멘트는 /* 로 시작해서 */ 로 끝나는 코드인데요.
코드를 읽는 사람들을 위한 거고, 실행에는 아무런 영향을 주지 않습니다.

/*
  마켓 코드잇 CSS
  v1.5.0
*/

/* 찜하기 버튼 */
.zzim-button {
  font-size: 24px;
  padding: 8px; /* 임시로 정한 값 */
}
이런 식으로 코멘트는 여러 줄로 쓸 수도 있고,
CSS 규칙 안에도 들어갈 수 있습니다.

# 코멘트는 언제 다는 게 좋을까?
코멘트는 실행에 영향을 주지 않으니까 얼마든지 사용할 수 있는데요.
코멘트를 너무 많이 달아도 읽기 어려운 코드가 됩니다.
그럼 언제 코멘트를 달아야 할까요?
저는 아래처럼 생각해보는 걸 추천드릴게요.

CSS 선택자를 쉽게 이해할 수 있도록 고쳐 본다.
그래도 이해가 어려울 거 같으면 코멘트를 단다.
사실 앞에서 본 코드에서 .zzim-button은  .wishlist-button이라고 이름을 바꿀 수 있는데요.
이렇게 하면 클래스 이름만 봐도 어떤 것인지 대충 짐작할 수 있기 때문에
굳이 코멘트를 달지 않아도 될 거 같네요.

/*
  마켓 코드잇 CSS
  v1.5.0
*/

.wishlist-button {
  font-size: 24px;
  padding: 8px; /* 임시로 정한 값 */
}


## 텍스트 스타일링 정리
# 글자 색 color
# html
  <span class="red">빨강</span>
  <span class="orange">주황</span>
  <span class="yellow">노랑</span>

# css
 .red {
    color: #F23030;
  }

  .orange {
    color: #F28705;
  }

  .yellow {
    color: #F2CB05;
  }

# 글자 크기 font-size
# html
  <span class="large">크게</span>
  <span class="medium">중간</span>
  <span class="small">작게</span>
# CSS
  .large {
    font-size: 24px;
  }

  .medium {
    font-size:  16px; 
  }

  .small {
    font-size: 8px;
  }


# 글꼴 font-family
글꼴 이름을 쉼표로 연결해서 여러 개를 쓸 수 있는데요, 웹 브라우저가 차례대로 확인하면서 적용 가능한 글꼴로 보여 줍니다. 아래 코드는 구글 폰트에서 Poppins와 Noto Sans KR을 웹 폰트로 불러와서 쓴 예시인데요.
영문은 Poppins라는 글꼴에서 보여 주고, 한글은 Poppins에 없기 때문에 Noto Sans KR로 보여 주는 코드입니다. 이때 Noto Sans KR은 글꼴 이름에 띄어쓰기가 있기 때문에 따옴표로 감싸 주었습니다.

# html
  <html>
  <head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR&family=Poppins&display=swap" rel="stylesheet">
  </head>
  <body>
    <p id="with-poppins">Poppins 있는 노토 산스 케이알</p>
    <p id="without-poppins">Poppins 없는 노토 산스 케이알</p>
  </body>
  </html>

# css
  #with-poppins {
    font-family: Poppins, "Noto Sans KR", sans-serif;
  }

  #without-poppins {
    font-family: "Noto Sans KR", sans-serif;
  }


# 글자 굵기 font-weight
100, 200, 300, ..., 900까지 100 단위로 씁니다.

# html
  <span class="bold">굵게</span>
  <span class="regular">중간</span>
  <span class="light">얇게</span>

# css
  .bold {
    font-weight: 600;
  }

  .regular {
    font-weight: 400; 
  }

  .light {
    font-weight: 200;
  }

# 줄 높이 line-height
줄과 줄 사이의 간격을 조절할 때 CSS에서는 줄의 높이로 조절합니다. 줄 높이의 값인 line-height는 단위 없이 쓰는 글자 크기에 상대적인 값인데요. 예를 들어서 font-size가 16px이라면 line-height: 1은 16px * 1 = 16px이 되고, line-height: 1.5는 16px * 1.5 = 24px이 되는 식입니다.

# html
  <p class="loose">
    넓게<br>
    넓게<br>
    넓게
  </p>
  <p class="regular">
    보통<br>
    보통<br>
    보통
  </p>
  <p class="tight">
    좁게<br>
    좁게<br>
    좁게
  </p>

# css
  .loose {
    font-size: 16px;
    line-height: 1.7; /* 16px * 1.7 = 27.2px */
  }

  .regular {
    font-size: 16px;
    line-height: 1.5; /* 16px * 1.5 = 24px */
  }

  .tight {
    font-size: 16px;
    line-height: 1; /* 16px * 1 = 16px */
  }


# 텍스트 꾸미기 text-decoration
텍스트에 밑줄을 넣거나, 취소선을 넣거나 하는 데 사용하는 속성입니다. 속성 값으로는 none, underline, line-through 등이 있는데요. 이 중에서도 none은 <a> 태그에 기본으로 들어 간 밑줄을 없애는 데 많이 사용합니다. 그 외에 underline도 많이 쓰고, 가끔 line-through를 사용하기도 합니다.

# html
  <a href="https://codeit.kr">
    링크
  </a>
  <br>
  <a class="none" href="https://codeit.kr">
    밑줄 없는 링크
  </a>
  <br>
  <span class="underline">
    밑줄
  </span>
  <br>
  <span class="line-through">
    취소선
  </span>

# css
  .none {
    text-decoration: none;
  }

  .underline {
    text-decoration: underline;
  }

  .line-through {
    text-decoration: line-through;
  }




## 코드잇 베리타스
# 실습 설명
앞에서 배운 텍스트 스타일링 속성 중에 줄 높이와 텍스트 꾸미기 속성을 사용해서 뉴스 기사를 수정해 봅시다.

적용할 스타일
<p> 태그에서
줄 높이를 글자 크기의 1.5배
<a> 태그에서
밑줄이 보이지 않게
실습 결과
코드잇 베리타스 실행결과

# 해설
우선 <p> 태그의 줄 높이부터 바꿔 볼게요. 줄 높이는 line-height 속성을 쓰면 되는데요, 글자 크기에 상대적인 값이기 때문에 1.5배라면 단위 없이 1.5만 써 주면 됩니다. line-height: 1.5 이렇게요. 모든 <p> 태그에 적용하려면 아래처럼 규칙을 만들어 주면 됩니다.

p {
  line-height: 1.5;
}
이제 <a> 태그의 밑줄을 없애 봅시다. text-decoration: none이라고 하면 밑줄을 제거할 수 있었는데요. 이미 주어진 코드에 <a> 태그에 대한 CSS 규칙이 있으니까 여기다 추가해 주겠습니다.

a {
  color: #792eb4;
  text-decoration: none;
}

# 모범 답안
# style.css

body {
  background: #fdfafc;
  font-family: 'Noto Sans KR', sans-serif;
  font-size: 16px;
  margin: 0;
}

a {
  color: #792eb4;
  text-decoration: none;
}

p {
  line-height: 1.5;
}

.header {
  background-color: #fcfcfc;
  border-bottom: 1px solid #efefef;
  font-family: 'Abril Fatface';
  font-size: 20px;
  padding: 14px;
  text-align: center;
}

.info {
  margin: 32px 0;
  text-align: center;
}

.title {
  font-size: 30px;
  font-weight: 900;
  margin: 8px 0;
}

.date {
  color: #bdbdbd;
  font-size: 12px;
  font-weight: 400;
  margin: 8px 0 32px;
}

.cover {
  width: 611px;
}

.content {
  margin: 32px auto;
  width: 468px;
}

.headline {
  font-weight: 700;
}

.author {
  color: #bdbdbd;
  font-size: 12px;
}


## 배경 이미지: background-image

. card {
background-image: url('pizza.png');  //이미지 주소
background-repeat: no-repeat;  // 이미지 반복 안함
background-position: center;  // 이미지 위치
background-size: cover;  // 이미지를 꽉 차게 설정
color: #ffffff;
line-height: 1.7;
margin: 40px auto;
padding: 40px;
width: 480px;
}

background-image: linear-gradient(rgba(0, 0, 0, 1), rgba(0, 0, 0, 0,));  //그래디언트
background-image: linear-gradient(90deg, rgba(0, 0, 0, 1) 40%, rgba(0, 0, 0, 0,));  //반대 90도

https://cssgradient.io/

background-image: 
  linear-gradient(90deg, rgba(0, 0, 0, 1) 40%, rgba(0, 0, 0, 0,)),  //반대 90도
  url('pizza.png');  // 그라디언트와 이미지를 함께 표현 해서 글이 잘 보이도록 한다.



## 그림자: box-shadow
box-shadow: 10px 15px 20px 5px rgba(0, 0, 0, 0.4);
# 가로 / 세로 / 블러(흐림) / 퍼지는 값 / 색상


## 불투명도: opacity
0 ~ 1의 값
opacity: 0.5;



## 자유여행 액티비티

# 실습 설명
적용할 스타일과 아래 실습 결과를 참고해서 여행 액티비티 사이트를 완성해 봅시다.

적용할 스타일
각 카드에 그림자 추가하기
위치: 가로 0px 세로 4px
흐린 정도(Blur): 28px
색상: rgba(0, 0, 0, 0.2)
오리 구경 카드에 불투명도 0.3
템플릿 코드 설명
각 액티비티에는 .activity라는 클래스로 스타일을 적용하고 있는데요.

각각 #desert, #paragliding, #ducks, #versailles라는 아이디로 따로 구분해서 배경 이미지를 넣어 주고 있습니다.

여기서 오리 구경에 해당하는 #ducks만 마감되었습니다.

# 해설
우선 .activity 클래스에 그림자부터 넣어 볼게요. 그림자는 box-shadow라는 속성을 사용하는데요, 주어진 값을 하나씩 보면서 완성해 봅시다. 우선 가로 세로의 값이 각각 0px, 4px이니까, box-shadow: 0px 4px로 써주면 됩니다. 여기다 블러 값 28px을 추가하면 box-shadow: 0px 4px 28px이 되고요. 마지막으로 그림자 색상을 추가하면 아래처럼 쓰면 되겠네요.

box-shadow: 0px 4px 28px rgba(0, 0, 0, 0.2);
각각의 액티비티 항목은 .activity라는 클래스로 스타일링하고 있으니까 여기다가 추가할게요.

.activity {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  box-shadow: 0px 4px 28px rgba(0, 0, 0, 0.2);
  color: #ffffff;
  height: 185px;
  margin: 24px auto;
  padding: 40px;
  width: 520px;
}
이제 불투명도를 추가합시다. 오리 구경 액티비티는 마감이 되어서 불투명도를 0.3으로 바꿔 줘야 하는데요. 불투명도는 opacity라는 속성을 썼으니까 아래와 같은 코드를 추가하면 됩니다.

opacity: 0.3;
오리 구경 액티비티는 #ducks라는 아이디로 꾸며 주고 있으니까 여기다가 추가해 주면 되겠죠?

#ducks {
  background-image: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)),
    url('./activity-duck.png');
  opacity: 0.3;
}

# 모범 답안
body {
  font-family: 'Noto Sans KR', sans-serif;
  margin: 0 0 140px;
}

.header {
  background-color: #f3f3f3;
  margin-bottom: 32px;
  padding: 64px 0px 32px;
}

.header-container {
  margin: 0 auto;
  width: 600px;
}

.header-title {
  font-size: 32px;
  font-weight: 700;
  line-height: 46px;
  margin: 8px 0;
}

.header-description {
  color: #a6a6a6;
  font-size: 16px;
  font-weight: 400;
  line-height: 23px;
  margin: 8px 0;
}

#desert {
  background-image: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)),
    url('./activity-desert.png');
}

#paragliding {
  background-image: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)),
    url('./activity-paragliding.png');
}

#ducks {
  background-image: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)),
    url('./activity-duck.png');
  opacity: 0.3;
}

#versailles {
  background-image: linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0)),
    url('./activity-versailles.png');
}

.activity {
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  box-shadow: 0px 4px 28px rgba(0, 0, 0, 0.2);
  color: #ffffff;
  height: 185px;
  margin: 24px auto;
  padding: 40px;
  width: 520px;
}

.activity-title {
  font-size: 20px;
  font-weight: 700;
  line-height: 29px;
  margin: 0;
}

.activity-date {
  font-size: 12px;
  font-weight: 400;
  margin: 8px 0;
}

.activity-join {
  background: rgba(0, 0, 0, 0.15);
  display: inline-block;
  font-size: 12px;
  font-weight: 700;
  margin: 22px 0;
  padding: 8px 24px;
}



## 새로 배운 CSS 속성 정리
# 배경 이미지 background-image
url(...)이라는 문법으로 배경 이미지를 넣습니다.

background-image: url('flowers.png');
참고로 배경 이미지는 여러 개 넣을 수 있습니다.

아래처럼 이미지를 배경으로 넣으면 a.png 아래에 b.png가 깔리고, 맨 밑에는 c.png가 깔립니다.

background-image:
  url('a.png'), /* 제일 위에 보이는 이미지 */
  url('b.png'),
  url('c.png');

# 배경의 위치 background-position
기본값은 left top(왼쪽 위)이고, 가운데 정렬을 하려면 아래처럼 center를 쓰면 됩니다.

background-position: top; /* 위 */
background-position: right; /* 오른쪽 */
background-position: bottom; /* 아래 */
background-position: left; /* 왼쪽 */
background-position: left top; /* 왼쪽 위 (지정하지 않았을 때 기본값) */
background-position: center;

# 배경의 반복 background-repeat
기본값은 repeat(반복)이고, no-repeat으로 하면 반복되지 않게 할 수 있습니다.

background-repeat: repeat; /* 반복하기 (지정하지 않았을 때 기본값) */
background-repeat: no-repeat; /* 반복 안 함 */

# 배경의 크기 background-size
직접 가로 세로 크기를 지정할 수도 있고, 비율을 유지하면서 영역에 꽉 차게(cover)하거나, 영역 안에서 최대한 크게(contain)할 수도 있습니다.

background-size: cover; /* 비율 유지하면서 꽉 차게. 이미지 잘릴 수 있음 */
background-size: contain; /* 비율 유지하면서 최대한 크게. 이미지 잘리지 않음 */
background-size: 40px 30px; /* 가로 40px 세로 30px */

# 그라디언트 linear-gradient()
기본적으로 시작 색상과 종료 색상으로 사용할 수 있습니다.

 background-image: linear-gradient(#000000, #ffffff);
기본 방향의 각도는 180도인데요. (위에서 아래로 내려오는 방향)
이 각도를 바꾸고 싶다면 맨 앞에다가 각도를 써 주면 됩니다. 각도의 단위는 deg입니다.

background-image:
  linear-gradient(45deg, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.2));

# 그림자 box-shadow
가로, 세로 위치, 흐린 정도(Blur), 퍼지는 정도(Spread), 색상의 순서로 씁니다.


box-shadow: 5px 10px 15px 8px rgba(0, 0, 0, 0.6);
/*
  가로: 5px
  세로: 10px
  흐린 정도(Blur): 15px
  퍼지는 정도(Spread): 8px
  색상: rgba(0, 0, 0, 0.6)
*/

# 불투명도 opacity
요소 전체의 불투명도를 조절할 때 사용합니다. 0에서 1 사이의 소수 값으로 단위 없이 쓰면 됩니다.

opacity: 0; /* 투명 */
opacity: 0.6;
opacity: 1; /* 불투명 */


## 박스 모델
# 다양한 padding, margin 표기법

padding과 margin은 각각 안쪽 여백, 바깥 여백을 넣을 때 쓴다고 배웠습니다.
이번 노트에서는 이것들의 사용법을 복습해보고, 좀 더 복잡한 방법도 알아볼게요.

# Padding
영역 안쪽에 여백을 넣을 때 사용했습니다.

상하좌우 한 번에
padding: 8px;

상하, 좌우 각각
padding: 16px 8px;

상, 좌우, 하
padding: 16px 8px 24px;

숫자의 순서는 시계 방향으로 0시 → 3시 → 6시 순서로 외우시면 됩니다.

상, 우, 하, 좌
padding: 16px 8px 24px 10px;

숫자의 순서는 시계 방향으로 0시 → 3시 → 6시 → 9시 순서로 외우시면 됩니다.

# padding- 속성
패딩 값을 각각 주고 싶을 때 쓰는 속성들입니다.
앞에서 상, 우, 하, 좌 값을 따로 썼던 걸 속성으로 나눈 거라고 생각하시면 됩니다.
아래 두 코드는 똑같은 코드입니다.

padding: 16px 8px 24px 10px;
padding-top: 16px;
padding-right: 8px;
padding-bottom: 24px;
padding-left: 10px;

# Margin
영역 바깥쪽 여백을 넣을 때 사용했습니다.
특히 좌우 바깥 여백의 경우에는 auto라는 걸 사용해서 자동으로 채울 수 있는데요.
여기서 주의할 점은 요소의 width 속성이 정해져 있어야 자동으로 채울 수 있습니다.

상하좌우
margin: 8px;

상하, 좌우
margin: 16px 8px;

자동으로 채우기
width: 520px; /* 반드시 너비가 정해져 있어야 자동으로 채울 수 있음 */
margin: 16px auto;

상, 좌우, 하
margin: 16px 8px 24px;


순서를 외울 때 마찬가지로 시계 방향으로 외웁니다.

상, 우, 하, 좌
margin: 16px 8px 24px 10px;

순서를 외울 때 마찬가지로 시계 방향으로 외웁니다.

# margin- 속성
padding 이랑 마찬가지로 값을 각각 주고 싶을 때 쓰는 속성들입니다.
아래 두 코드는 똑같은 코드입니다.

margin: 16px 8px 24px 10px;
margin-top: 16px;
margin-right: 8px;
margin-bottom: 24px;
margin-left: 10px;


## border와 border-radius
border: 1px solid #dedede;
border-radius: 8px;


## 자동차 광고
# 실습 설명
아래 적용할 스타일과 실습 결과를 참고해서 자동차 광고를 완성해 봅시다.

적용할 스타일
광고 (.car)
모서리가 32px 정도로 둥글게
해시 태그 (.hashtag)
테두리는 1px 실선으로 연회색(#bababa)
모서리가 10px 만큼 둥글게

# 해설
모서리를 둥글게 하려면 border-radius라는 속성을 씁니다. .car에다가 아래처럼 추가하면 모서리가 32px 만큼 둥글게 됩니다.

.car {
  /* ... */
  border-radius: 32px;
}
해시 태그에서는 테두리를 넣고 모서리를 둥글게 할 건데요. 아래처럼 border 속성을 추가해 줄게요.

.hashtag {
  /* ... */
  border: 1px solid #bababa;
}
모서리를 둥글게 하려면 border-radius값을 10px로 주면 됩니다.

.hashtag {
  /* ... */
  border: 1px solid #bababa;
  border-radius: 10px;
}

# 모범 답안
@font-face {
  font-family: 'GmarketSansLight';
  font-style: normal;
  font-weight: normal;
  src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/noonfonts_2001@1.1/GmarketSansLight.woff')
    format('woff');
}

body {
  background: #ffffff;
  font-family: 'Noto Sans KR', sans-serif;
}

.car {
  background-color: #000000;
  border-radius: 32px;
  color: #ffffff;
  font-size: 24px;
  margin: 40px auto;
  padding: 32px 0 24px;
  text-align: center;
  width: 600px;
}

.car-heading {
  font-family: GmarketSansLight;
  font-size: 24px;
  font-weight: 300;
  margin: 0;
}

.car-description {
  color: #bababa;
  font-size: 10px;
  font-weight: 400;
  line-height: 14px;
  margin: 8px 0;
}

.car-image {
  width: 100%;
}

.hashtag {
  background: rgba(255, 255, 255, 0.05);
  border: 1px solid #bababa;
  border-radius: 10px;
  color: #bababa;
  font-family: 'Noto Sans KR';
  font-size: 8px;
  font-weight: 400;
  line-height: 12px;
  margin: 0 8px;
  padding: 4px 8px;
}



## box-sizing
box-sizing: border-box;  // 보더에서 테두리(패팅과 보더)값을 제외하고 content 크기를 줄여서 설정

* {
  box-sizing: border-box;
}  // *은 모든 요소에 적용


## overflow
// 내용이 넘칠때 (약관 같이 스크롤 해서 볼때 사용)
height: 324px
overflow: scroll;

# 가로로 스크롤이 필요할때
overflow: scroll;
white-space: nowrap;  // 자동으로 줄바꿈을 안함.


## 마진 상쇄
세로 마진은 서로 겹쳐서 마진이 상쇄 될 수 있다.


## 박스 모델 정리
# 박스 모델(Box Model)
summary00

HTML/CSS에서 요소는 기본적으로 박스 형태인데요. 밖에서부터 차례대로 바깥 여백인 마진, 테두리인 보더, 테두리와 실제 내용 사이의 여백인 패딩, 그리고 실제 내용이 들어가는 콘텐트 박스가 있습니다.

border 속성
주로 굵기, 테두리 종류, 색상 순서로 씁니다. 예를 들어서 아래 코드는 2px 굵기의 실선으로 옅은 회색(#ededed)을 사용한 겁니다.

border: 2px solid #ededed;
border-radius 속성
박스 모델의 모서리를 둥글게 만들 때 사용합니다. border 속성 없이도 쓸 수 있습니다. 아래 코드는 16px 만큼 둥글게 하는 코드입니다.

border-radius: 16px;
# html
<div class="card">
  엉뚱한수박님의 홈페이지
</div>
# css
.card {
  padding: 20px;
  background-color: #ededed;
  border-radius: 16px;
}

결과 확인
팁 1. 타원 만들기
아래 코드는 50% 만큼 둥글게 하는 코드인데요, 이렇게 하면 타원 형태가 됩니다.

border-radius: 50%;
# html
<div class="card">
  엉뚱한수박님의 홈페이지
</div>
# css
.card {
  padding: 20px;
  background-color: #ededed;
  border-radius: 50%;
}

결과 확인
팁 2. 알약 만들기
아래 코드는 9999px 만큼 둥글게 하는 코드인데요, 이렇게 아주 큰 값을 지정하면 알약 형태가 됩니다.

border-radius: 9999px;
# html
.card {
  padding: 20px;
  background-color: #ededed;
  border-radius: 9999px;
}
# css
.card {
  padding: 20px;
  background-color: #ededed;
  border-radius: 9999px;
}

결과 확인
box-sizing속성
기본적으로 요소에 크기를 지정하면 그 크기는 박스 모델에서 콘텐트 영역에 대한 크기입니다. 예를 들어서 아래 #box 요소의 실제 너비는 100 + 30 + 30 = 160이 됩니다.

#box {
  margin: 20px;
  padding: 30px;
  width: 100px;
}
만약에 이런 게 아니라 좀 더 직관적으로 크기를 지정하고 싶다면, box-sizing 속성을 바꿔 주면 됩니다. 기본 값인 content-box 대신에 border-box를 사용하면 되는데요.

#box {
  margin: 20px;
  padding: 30px;
  width: 100px;
  box-sizing: border-box;
}
이렇게 하면 테두리까지 모두 합친 영역의 크기가 100px이 됩니다.

overflow 속성
박스의 크기를 지정했을 때 가끔 안에 있는 내용이 많아서  삐져나올 때가 있습니다. 이런 걸 오버플로우라고 하는데요. 이때 박스에 스크롤이 되도록 하거나 삐져나온 걸 감춰줄 수 있습니다.

예시 1. 넘치는 것 감추기
overflow: hidden;
# html
<div class="card">
    애플 수박은 생긴 건 수박이지만 사과처럼 작고 껍질이 얇은 과일이다. 대한민국 경북 문경에서 박인규씨가 처음으로 재배하기 시작했고 전국적으로 퍼지기 시작했다. 무게는 1kg 정도로 한 손으로 들어 올릴 수 있다. 먹기는 수박보다 편하지만 맛은 일반 수박에 비해 못한 편이라고 한다. 일반 수박에 비해서 덜 아삭하고 마치 멜론같은 식감이 난다.
</div>
# css
.card {
  width: 200px;
  height: 100px;
  padding: 20px;
  background-color: #ededed;
  overflow: hidden;
}

결과 확인
예시 2. 넘치면 스크롤 하게 만들기
overflow: auto;
htmlcss
<div class="card">
    애플 수박은 생긴 건 수박이지만 사과처럼 작고 껍질이 얇은 과일이다. 대한민국 경북 문경에서 박인규씨가 처음으로 재배하기 시작했고 전국적으로 퍼지기 시작했다. 무게는 1kg 정도로 한 손으로 들어 올릴 수 있다. 먹기는 수박보다 편하지만 맛은 일반 수박에 비해 못한 편이라고 한다. 일반 수박에 비해서 덜 아삭하고 마치 멜론같은 식감이 난다.
</div>
# css
.card {
  width: 200px;
  height: 100px;
  padding: 20px;
  background-color: #ededed;
  overflow: auto;
}

결과 확인
예시 3. 항상 스크롤 하게 만들기
overflow: scroll;
# html
<div class="card">
    애플 수박은 생긴 건 수박이지만 사과처럼 작고 껍질이 얇은 과일이다. 대한민국 경북 문경에서 박인규씨가 처음으로 재배하기 시작했고 전국적으로 퍼지기 시작했다. 무게는 1kg 정도로 한 손으로 들어 올릴 수 있다. 먹기는 수박보다 편하지만 맛은 일반 수박에 비해 못한 편이라고 한다. 일반 수박에 비해서 덜 아삭하고 마치 멜론같은 식감이 난다.
</div>
# css
.card {
  width: 200px;
  height: 100px;
  padding: 20px;
  background-color: #ededed;
  overflow: scroll;
}

결과 확인
마진 상쇄 (Margin Collapsing)
일반적으로 세로 마진은 서로 겹쳐서 화면에 나타나는데요. 서로 이웃한 태그에서는 세로로 마진을 겹쳐서 적용하고, 부모 자식 관계인 태그에서도 세로로 마진을 겹쳐서 적용합니다. 이때 부모에 padding이나 border가 있으면 경계가 있다고 생각하고 세로 마진을 겹치지 않습니다.

예시 1. 서로 이웃한 태그
#a와 #b의 마진을 겹치면 둘 사이의 마진은 30px이 됩니다.

<div id="a">a</div>
<div id="b">b</div>
#a {
  margin: 30px;
}

#b {
  margin: 20px;
}
summary01a

예시 2. 부모자식 태그
#b와 #c는 부모 자식 관계입니다. #b에는 따로 경계가 없으니까 둘의 마진을 겹쳐서 위쪽 마진은 40px이 됩니다. 이 마진 값을 이웃한 #a와 겹치면, #a와 #b 사이의 마진은 40px이 됩니다.

<div id="a">
  a
</div>
<div id="b">
  <div id="c">
    c
  </div>
  b
</div>
#a {
  margin: 30px;
}

#b {
  margin: 20px;
}

#c {
  margin: 40px;
}


## 코드잇 미술관: 로그인 화면
# 실습 설명

# 템플릿 코드 설명
<label>, <input> 이라는 태그랑 <button> 태그, 그리고 <form> 태그는 앞에서 배운 적이 없는 태그입니다. 이 태그를 사용하면 사용자의 입력을 받을 수 있는데요. 이번 실습에서는 이 태그들에 대해서 자세히 모르더라도 충분히 실습할 수 있으니까 참고해 주세요.

# <input> 태그
인풋 태그에는 값을 입력하지 않았을 때 기본적으로 보여주는 메시지가 있습니다. 이런 걸 placeholder 라고 하는데요. placeholder라는 속성으로 추가합니다.

<input name="username" placeholder="Email 또는 전화번호">
이때 placeholder 의 디자인을 바꾸려면 CSS 선택자로 아래처럼 ::placeholder 를 활용하면 됩니다.

input::placeholder {
  color: #dddddd;
}

# 모범 답안
# index.html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>로그인</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <form class="login">
      <h1 class="login-title">로그인</h1>
      <label>아이디</label>
      <input
        name="username"
        type="text"
        placeholder="Email 또는 전화번호"
      />
      <label>비밀번호</label>
      <input
        name="password"
        type="password"
        placeholder="비밀번호"
      />
      <div class="login-forgot">
        <a class="login-forgot-link" href="#">비밀번호를 잊으셨나요?</a>
      </div>
      <button>로그인</button>
      <div class="login-signup">
        회원이 아니신가요?
        <a class="login-signup-link" href="#">가입하기</a>
      </div>
    </form>
  </body>
</html>

# style.css

html {
  font-family: 'Noto Sans KR', sans-serif;
  font-size: 16px;
  font-weight: 400;
}

label {
  color: #2c2c2c;
  display: block;
  margin: 16px 0 8px;
}

input {
  border: 1px solid #d1d1d1;
  color: #ababab;
  display: block;
  font-size: 16px;
  line-height: 24px;
  margin: 8px 0;
  padding: 16px 24px;
  width: 100%;
}

button {
  background-color: #2c2c2c;
  border: none;
  color: #ffffff;
  display: block;
  font-size: 18px;
  font-weight: 700;
  margin: 24px 0;
  padding: 16px;
  width: 100%;
}

* {
  box-sizing: border-box;
}

.login {
  margin: 120px auto;
  width: 360px;
}

.login-title {
  color: #4e4e4e;
  font-size: 36px;
  font-weight: 700;
  margin: 24px 0;
  text-align: center;
}

.login-forgot {
  text-align: right;
}

.login-forgot-link {
  font-size: 14px;
  color: #ababab;
}

.login-signup {
  font-size: 14px;
  text-align: center;
  color: #ababab;
}

.login-signup-link {
  color: #2c2c2c;
}



## 블록과 인라인
# 블록(block)
<h1>,<p>,<div>
위에서부터 아래로 배치됨
너비와 높이를 지정할 수 있다.

# 인라인(inline)
<a>,<span>
평소에 글 쓰는 방향
화면에 꽉차면 다음 줄로 넘어감
너비나 높이를 지정할 수 없음.
(예외적으로 <img> 같은건 가능)


## Normal Flow
박스의 종류에는 크게 블록과 인라인이 있다고 배웠는데요. 마치 글을 쓰듯이 블록이랑 인라인이 배치되는 방식을  Normal Flow라고 부릅니다. 이번 노트에서는 Normal Flow와 관련된 흥미로운 사실들을 소개해 드릴게요

# Direction
Normal Flow에서는 글을 쓰듯이 요소를 배치하는데요. 이때 항상 왼쪽에서 오른쪽으로 배치되는 건 아닙니다. 예를 들어서 유튜브 사이트에서 언어 설정을 아랍어 (العربية) 로 바꿔 볼게요.

아랍어 유튜브 스크린샷

보시면 아랍어는 오른쪽에서 왼쪽으로 쓰기 때문에 블록은 그대로 배치되지만, 인라인은 오른쪽에서 왼쪽으로 배치됩니다.

개발자 도구 유튜브 스크린샷

크롬 개발자 도구에서 보면 direction이라는 값이 rtl (right to left)라고 나오는데요. direction이라는 속성은 인라인의 방향을 정할 때 씁니다.

Writing Mode

만약에 세종대왕이 CSS를 쓴다면 어떨까요? 조선시대에는 오른쪽에서 왼쪽으로 위에서 아래로 글을 썼는데요. 그러니까 블록은 오른쪽에서 왼쪽으로 배치되고, 인라인은 위에서 아래로 배치되는 방식입니다. 이런 CSS를 자주 쓸 일은 없지만 writing-mode라는 걸 쓰면 흉내 낼 수 있습니다.

저는 위키피디아 훈민정음 페이지에서 이걸 테스트해 봤는데요. 개발자 도구를 열어서 <body> 태그에다가 writing-mode: vertical-rl이라고 한번 추가해 볼게요. 그럼 화면이 좀 깨지긴 하지만 본문을 보면 이렇게 옛날 훈민정음처럼 글이 보입니다.

훈민정음 같은 위키피디아

여기서도 개발자 도구를 열어서 확인해 보시면 블록은 오른쪽에서 왼쪽으로, 인라인은 위에서 아래로 배치된다는 걸 확인하실 수 있을 겁니다.




## 인라인 블록
display: inline-block;


## float  // 위치를 주고 주변 인라인 속성의 글과 겹치지 않도록 한다.

float: right;
margin-left: 10px; // 이미지를 오른쪽에 배치하고 왼쪽에 마진값을 준다.

float: left;
margin-right: 10px; // 이미지를 왼쪽에 배치하고 오른쪽에 마진값을 준다.



## 코드잇 미술관
# 실습 설명
사이트 도면을 보고 코드를 작성해 봅시다. 지금까지 배운 내용을 복습한다는 생각으로 자유롭게 만들어 보세요.

# 모범 답안
# index.html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>코드잇 미술관</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link
      href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&display=swap"
      rel="stylesheet"
    >
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <div class="header">
      <img id="logo" src="logo.png">
      <div class="nav">
        <a class="nav-menu" href="#">소개</a>
        <a class="nav-menu" href="#">관람·참여</a>
        <a class="nav-menu" href="#">전시</a>
        <a class="nav-menu" href="#">교육</a>
      </div>
    </div>
    <div class="content">
      <div class="section">
        <h2 class="title">
          인상주의 거장들과 함께하는<br>
          &lt;모네, 빛을 그리다&gt; 展
        </h2>
        <h3 class="date">2025-05-02 ~ 2025-08-07</h3>
        <div class="artworks">
          <img class="artwork" src="547239.jpg">
          <img class="artwork" src="547250.jpg">
          <img class="artwork" src="547252.jpg">
          <img class="artwork" src="547266.jpg">
          <img class="artwork" src="547292.jpg">
          <img class="artwork" src="547293.jpg">
          <img class="artwork" src="547310.jpg">
          <img class="artwork" src="930543.jpg">
        </div>
        <a class="button" href="#">모든 작품 보기</a>
      </div>
      <div class="section">
        <h2 class="title">공간 소개</h2>
        <p class="description">
          보국산 끝자락에 자리잡은 코드이트 보국은 천혜의 자연 경관과 함께하며 그 자체로 지친 몸과 마음을 쉬게 해 줄 힐링의 공간입니다.
          김수곤 건축가의 작품인 본 갤러리는 캔버스 화폭을 형상화하여 입면을 하늘로 가져 간 전시실이 특징이며,
          한국의 전통 가옥을 연상시키는 천정과 부드러운 자연광이 들어올 수 있게 설계한 쾌적한 전시공간을 연출하고 있습니다.
        </p>
        <img class="full" src="space.jpg">
      </div>
    </div>
  </body>
</html>

# style.css

body {
  font-family: "Noto Sans KR", sans-serif;
  font-size: 16px;
  margin: 0;
}

.header {
  border-bottom: 1px solid #000000;
  font-size: 52px;
  font-weight: 800;
  margin: 0;
}

#logo {
  display: block;
  width: 104px;
  margin-bottom: 24px;
}

.nav {
  font-size: 22px;
  font-weight: 700;
  line-height: 32px;
}

.nav-menu {
  color: #000000;
  margin-right: 16px;
  text-decoration: none;
}

.header {
  padding-bottom: 24px;
  padding-top: 68px;
}

.header,
.content {
  padding-left: 48px;
  padding-right: 48px;
}

.section {
  margin: 40px 0 72px;
}

.title {
  font-size: 24px;
  font-weight: 700;
  line-height: 35px;
  margin: 8px 0;
}

.date {
  font-size: 16px;
  font-weight: 400;
  line-height: 23px;
  margin: 8px 0;
}

.artworks {
  margin: 24px -48px;
  overflow: scroll;
  white-space: nowrap;
}

.artwork {
  height: 194px;
  margin-right: 8px;
}

a.button {
  display: inline-block;
  background: #000000;
  color: #ffffff;
  padding: 12px 24px;
  text-decoration: none;
}

.description {
  font-size: 16px;
  font-weight: 400;
  line-height: 23px;
  margin: 16px 0;
}

img.full {
  margin: 24px 0;
  width: 100%;
}



## 선택자 목록
// 여러 클래스와 id를 선택해서 목록을 만들고 동시에 css를 적용할 수 있다.
.title,
.text {
  // CSS 명령어
}

## 선택자 붙여 쓰기
html 에서 class에 클래스명을 두개를 준다.
<p id="book" class="delay book-info"></p>

css에서 두개의 클래스명을 붙여서 사용
#book.p.delay.book-info {
  // css 명령어
}

# // id, class 모두를 가지고 있는 요소만 찾아서 적용한다.


## 자식, 자손 선택하기
// > 를 이용해서 부모 요소의 자식 요소를 선택한다.
.book-container > .title {
  //css
}

// [스페이스] 를 이용해서 부모 요소의 자손 요소를 선택한다.
.book-container .title {
  //css
}

// 이런 방법보다는 클래스명을 추가해서 쓰는게 좋다.


## Chainit: 상장 코인
# 실습 설명
암호화폐 거래소 Chainit의 상장 코인 페이지를 수정해 봅시다. 주어진 코드에서는 코인 이미지 사이즈가 들쭉날쭉이고 디자인이 적용되어 있지 않아서 아래처럼 엉망인데요.

HTML을 수정하지 않은 채로 자식, 자손 선택자를 활용해서 각 코인 항목의 디자인을 실행 결과처럼 만들어 주세요.

적용할 스타일
각 코인의 <div> 태그

padding: 8px 0;
코인 이미지

width: 16px;
margin-right: 8px;
각 코인의 <span> 태그

font-size: 12px;
color: #8287A4;


# 해설
자식 결합자는 오른쪽 꺾쇠(>)로 선택자를 이어 주면 됩니다. 코인 목록은 .coin-list라는 <div> 태그 안에 있는데요. 그래서 자식 결합자로 .coin-list > div처럼 각 항목을 선택할 수 있습니다. 여기다가 패딩을 추가하면 이렇게 추가할 수 있겠죠.

.coin-list > div {
  padding: 8px 0;
}
마찬가지로 <img> 태그와 <span> 태그에 디자인을 적용해 줄게요. 마찬가지로 자식 결합자를 써도 되지만, 이번에는 자식 결합자가 아니라 자손 결합자를 조합해서 표현해 보겠습니다. 예를 들어서 각 항목의 자손 중 <img>를 선택하는 선택자는 .coin-list > div img 이런 식으로 쓸 수 있습니다. 디자인을 적용해 보면 아래처럼 써 줄 수 있겠네요.

.coin-list > div img {
  width: 16px;
  margin-right: 8px;
}

.coin-list > div span {
  font-size: 12px;
  color: #8287A4;
}

# 전체 코드입니다.

body {
  font-family: Poppins, 'Noto Sans KR', sans-serif;
  margin: 40px;
  font-size: 16px;
  line-height: 27px;
  color: #4c497b;
}

.title {
  color: #161346;
  font-weight: 700;
  font-size: 36px;
  line-height: 54px;
}

.coin-list > div {
  padding: 8px 0;
}

.coin-list > div img {
  width: 16px;
  margin-right: 8px;
}

.coin-list > div span {
  font-size: 12px;
  color: #8287A4;
}



## 가상 클래스
a:hover {
  text-decoration: underline;
}

:active
:hover
:focus
:visited


## 선택자 정리
# CSS 선택자(CSS Selector)
CSS 규칙에서 맨 앞에 적어 주는 걸 CSS 선택자라고 부릅니다. 선택자를 사용해서 이 규칙을 어떤 요소들에 적용할지 선택할 수 있습니다.

선택자 {
  선언;
  선언;
  선언;
}

# 선택자 목록
콤마(,)로 선택자를 연결하면 여러 선택자에 같은 규칙을 적용할 수 있습니다.

선택자1,
선택자2 {
  ...
}

# 선택자 붙여 쓰기
여러 조건을 동시에 만족하는 요소를 선택하고 싶다면 선택자를 붙여서 쓸 수 있습니다. 예를 들어서 아래 HTML 코드에 있는 태그를 선택해 볼게요.

<h2 id="mongolia" class="large title">몽골 대자연으로 떠나는 여행</h2> 
예시 1. 아이디 + 클래스
#mongolia.title
예시 2. 클래스 + 클래스
.large.title
예시 3. 태그 + 아이디 + 클래스
h2#mongolia.large.title

# 자식 결합자 (Child Combinator)
오른쪽 꺾쇠로 선택자를 이어 줍니다. 예를 들어서 아래 코드에서 tesla-y-2025.png를 보여 주는 이미지 태그를 선택하려면 .article > img로 선택할 수 있습니다.

<div class="article">
  <img src="tesla-y-2025.png">
  ...
</div>
.article > img {
  width: 100%;
}

# 자손 결합자 (Descendant Combinator)
스페이스(띄어쓰기)로 선택자를 이어 줍니다. 예를 들어서 아래 코드에서 tesla-w-2025.png를 보여주는 이미지 태그를 선택하려면 .article img로 선택할 수 있습니다.

<div class="article">
    <p> 이번에 리뷰해 볼 차량은 테슬라 모델 W 입니다.
      <img src="tesla-w-2025.png">
  </p>
  ...
</div>
.article img {
  width: 100%;
}

# 가상 클래스 (Pseudo-class)
가상 클래스는 의사 클래스, 가짜 클래스라고도 부릅니다. 요소의 상태 같은 걸 선택할 때 사용하는 클래스입니다. 정해진 이름 앞에 콜론(:)을 붙여서 사용합니다. 대표적으로 :hover(마우스를 올렸을 때),  :active(클릭한 상태), :visited(방문한 적이 있는 링크), :focus(포커싱 됐을 때)등이 있습니다. 예를 들어서 밑줄이 없는 링크에 마우스를 올렸을 때 밑줄이 생기도록 하려면 :hover를 활용하면 됩니다.

a {
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}



## 전체 선택자 (Universal Selector)
* 라는 선택자는 모든 요소를 선택하는 선택자입니다.

# 모든 요소를 선택하기
* {
  box-sizing: border-box;
}

# .gallery의 모든 자식 요소 선택하기
.gallery > * {
  width: 120px;
  height: 90px;
}

# n번째 자식 선택자(n-th child Selector)
:nth-child()를 사용합니다. 괄호 안에는 숫자나 even, odd, 2n 같은 값이 들어갈 수 있는데요. 혹시 다른 프로그래밍 언어를 쓰신 경험이 있다면 0부터 시작할 거라고 생각하실 수도 있지만, 여기서는 1부터 시작합니다. (첫 번째 자식은 1이고, 세 번째 자식은 3임)

# .gallery의 세 번째 자식
.gallery :nth-child(3) { ... }

# .gallery의 짝수 번째 자식
.gallery :nth-child(even) { ... }
.gallery :nth-child(2n) { ... }

# .gallery 의 홀수 번째 자식
.gallery :nth-child(odd) { ... }
.gallery :nth-child(2n+1) { ... }

# 특히 첫 번째 자식, 마지막 자식은 아래처럼 선택합니다
.gallery :first-child { ... }
.gallery :last-child { ... }


# 선택자는 최대한 단순하게
앞에서 다양한 선택자와 조합 방법을 배웠는데요. 저는 클래스, 가짜 클래스 한 두 개만 조합해서 최대한 단순하게 쓰시는 걸 추천합니다. 복잡하게 조합하다 보면 나중에 코드를 고칠 때마다 어디서 뭐가 바뀔지 알기 힘들어지거든요!

그래도 선택자를 조합해서 쓰면 정말 유용한 경우가 있는데요. 이번 노트에서는 선택자 조합을 어떻게 쓰면 좋을지 몇 가지 예시를 통해 알려 드릴게요.

모든 곳에서 border-box를 쓰고 싶을 때
앞에서 박스 모델의 크기는 기본적으로 콘텐트(content-box)를 기준으로 정해진다고 배웠는데요. 모든 요소의 크기를 테두리(border-box)를 기준으로 하고 싶다면, 아래처럼 추가하고 쓰면 됩니다. 항상 이 코드를 추가하는 것도 좋습니다.

* {
  box-sizing: border-box;
}
같은 클래스지만 변화를 주고 싶을 때
똑같은 상품 버튼이지만, 품절된 상품의 버튼을 보여줄 때나 똑같은 이미지이지만 유저가 선택한 이미지를 보여줄 때처럼 같은 클래스지만 살짝 다른 경우에 쓰면 좋습니다.

예를 들어서 아래 예시는 홈페이지의 메뉴를 만든 건데요. 똑같은 menu-link 클래스지만, 현재 보고 있는 페이지가 소개 페이지인 경우라서 해당하는 메뉴만 selected 클래스를 추가로 넣었습니다.

#html
<div class="menu">
  <a class="menu-link" href="/">메인</a>
  <a class="menu-link selected">소개</a>
  <a class="menu-link" href="/blog">글</a>
</div>

#css
.menu {
  background-color: #000000;  
  padding: 16px;
}

.menu-link {
  color: #ffffff;
  font-weight: bold;
  text-decoration: none;
}

.menu-link.selected,
.menu-link:hover {
  color: #aaaaaa;
}

결과 확인
# 클래스를 넣어 줄 태그가 너무 많을 때
자손 조합자는 적용해야 할 태그가 너무 많아서, 일일이 적용하기 어려울 때 쓰면 좋습니다. 예를 들어서 아래 코드에서 <a> 태그에다가 전부 클래스를 추가하기보다는 자손 조합자를 쓰는 게 훨씬 효율적입니다. 여기서 자식 조합자 (.info > a)를 쓰지 않고 자손 조합자를 쓴 것도 참고해 주세요. 만약에 <a> 태그 위치가 <div> 안에서 자식이 아니라 자손으로 바뀌어도 그대로 동작할 겁니다.

#html
<div class="info">
  부엉이는
  <a href="/wiki/%EC%98%AC%EB%B9%BC%EB%AF%B8%EB%AA%A9" title="올빼미목">올빼미목</a>
  <a href="/wiki/%EC%98%AC%EB%B9%BC%EB%AF%B8%EA%B3%BC" title="올빼미과">올빼미과</a>의
  <a href="/wiki/%ED%95%9C%EA%B5%AD" title="한국">한국</a>에 서식하는
  <a href="/wiki/%EB%A7%B9%EA%B8%88%EB%A5%98" title="맹금류">맹금류</a> 중
  <a href="/wiki/%EC%86%94%EB%B6%80%EC%97%89%EC%9D%B4" title="솔부엉이">솔부엉이</a>,
  <a href="/wiki/%EC%88%98%EB%A6%AC%EB%B6%80%EC%97%89%EC%9D%B4" title="수리부엉이">수리부엉이</a>,
  <a href="/wiki/%EC%B9%A1%EB%B6%80%EC%97%89%EC%9D%B4" title="칡부엉이">칡부엉이</a>,
  <a href="/wiki/%EC%87%A0%EB%B6%80%EC%97%89%EC%9D%B4" title="쇠부엉이">쇠부엉이</a> 등을 통틀어 이르는 통칭이다.
  <a href="/wiki/%EA%B7%80%EA%B9%83" title="귀깃">귀깃</a>(우각)의 차이로
  <a href="/wiki/%EC%98%AC%EB%B9%BC%EB%AF%B8" title="올빼미">올빼미</a>와
  구분한다고도 하지만 솔부엉이와 쇠부엉이는 귀깃이 없기 때문에 이는 정확한 구분법은 아니다.
  주로 밤에 활동하는 야행성이다.
</div>

#css
.info a {
  color: #379379;
  text-decoration: none;
}


결과 확인
# 가로 마진을 일정하게 하고 싶을 때
이 내용은 종이랑 연필을 가지고 와서, 직접 그려보면서 생각해 보시는 것도 좋습니다. 앞에서 마진 상쇄(Margin Collapsing)에 대해 배운 거 기억나시나요? 쉽게 말해서 "세로 마진은 겹친다"라는 규칙이었는데요. 예를 들어서 세로로 article이라는 클래스의 <div> 태그를 배치하고, 세로 마진을 24px로 준다고 해볼게요. <div> 태그는 블록 요소니까 위에서부터 아래로 배치됩니다.

#html
<div class="article">
  하나
</div>
<div class="article">
  둘
</div>
<div class="article">
  셋
</div>

#css
.article {
  margin: 24px 0;
  background-color: #ededed;
}

결과 확인
그러면 세로 마진은 겹치니까 article 사이의 간격은 24px이 될 텐데요. 만약에 세로가 아니라 가로 배치되면 어떨까요? 앞에서 배웠던 인라인 요소인 <span> 태그를 다음과 같이 배치해 보겠습니다.
#html
<span class="chip">섬</span>
<span class="chip">해변</span>
<span class="chip">오두막</span>

#css
.chip {
  background-color: #dedede;
  text-align: center;
  display: inline-block;
  width: 100px;
  padding: 16px;
  margin: 0 24px;
  border-radius: 9999px;
}

결과 확인
이렇게 하면 가로로 24px 만큼씩 여백이 생기는데, 가로 마진은 안 겹치니까 chip과 chip 사이에는 24 더하기 24, 총 48px 만큼 간격이 생길 겁니다. 만약에 가로로 전부 일정하게 24px로 주고 싶으면 어떻게 해야할까요?

예를 들어서 아래 3개의 chip에 가로 마진을 24px로 주면 chip들 사이의 가로 마진은 24 + 24해서 48px이 됩니다. 이럴 때는 margin-left(왼쪽 마진), margin-right(오른쪽 마진)라는 속성과 함께 :fist-child나 :last-child를 활용하면 좋습니다.

#html
<span class="chip">섬</span>
<span class="chip">해변</span>
<span class="chip">오두막</span>

#css
.chip {
  background-color: #dedede;
  text-align: center;
  display: inline-block;
  width: 100px;
  padding: 16px;
  margin-right: 24px;
  border-radius: 9999px;
}

.chip:first-child {
  margin-left: 24px;
}


## Chainit
# index.html

<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Chainit</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&family=Poppins:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
  </head>
  <body>
    <div class="header">
      <div class="header-title">
        <span class="header-title-accent">CHAIN</span>IT
      </div>
      <div class="header-content">
        <h1 class="header-tagline-small">세상 모든 화폐를 바꾸다</h1>
        <h2 class="header-tagline">Exchange<br>THE WORLD.</h2>
        <p class="header-description">
          2014년, 국내 최초로 시작한 암호화폐 거래소<br>
          블록체인 기술로 세계를 선도합니다.
        </p>
      </div>
    </div>
    <div class="section">
      <div class="container">
        <h2 class="title">CHAINIT</h2>
        <img class="cover" src="chainit.png">
        <p class="description">
          체인잇은 2014년 국내 최초로 암호화폐 거래소 Chainit Exchange 개발을 시작으로, 현재 탈중앙 암호화폐 교환 플랫폼 Chainit DEX를 운영 중입니다. 여기서 얻은 노하우를 바탕으로 블록체인을 이용한 다양한 사업 분야로 영역을 넓혀가고 있습니다.
        </p>
        <div class="button-container">
          <a class="button" href="https://codeit.kr">
            거래소 둘러보기
          </a>
        </div>
      </div>
    </div>
    <div class="section dark">
      <div class="container">
        <h2 class="title">CHAINIFY</h2>
        <img class="cover" src="chainify.png">
        <p class="description">
          Chainify는 체인잇 회원들이 보유한 암호화폐를 체인잇에서 하는 블록체인 서비스에 투자할 수 있는
          서비스입니다. 체인잇 생태계에서 기축통화 역할을 하는 체인잇 코인(CNB)으로 보상을 받을 수 있습니다.
        </p>
        <div class="button-container">
          <a class="button" href="https://codeit.kr">
            Chainify 둘러보기
          </a>
        </div>
      </div>
    </div>
    <div class="section">
      <div class="container">
        <h2 class="title">CHAINIT NANO</h2>
        <img class="cover" src="chainit-nano.png">
        <p class="description">
          암호화폐를 안전하게 보관할 수 있는 지갑입니다.
          타이완의 제조기업 하이낸스와의 협업으로 Chainit Nano 시리즈를 출시하였습니다.
        </p>
        <div class="button-container">
          <a class="button" href="https://codeit.kr">
            자세히 알아보기
          </a>
        </div>
      </div>
    </div>
    <div id="career" class="section">
      <h2 class="title">Careers</h2>
      <p class="description">블록체인의 미래를 함께 만들어 갈 여러분들을 기다립니다.</p>
      <a class="button round" href="https://codeit.kr">
        채용공고 보기
      </a>
    </div>
    <div id="footer" class="section">
      <div class="container">
        <p>
          Chainit<br>
          Copyright © Chainit, Inc. All rights reserved.
        </p>
      </div>
    </div>
  </body>
</html>

# style.css

* {
  box-sizing: border-box;
}

body {
  font-family: "Noto Sans KR", sans-serif;
  margin: 0;
}

.header {
  background-image: url("bg.png");
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  color: #ffffff;
}

.header-title {
  font-family: Poppins;
  font-size: 20px;
  line-height: 30px;
  padding: 12px 40px;
}

.header-title-accent {
  font-weight: 700;
}

.header-tagline-small {
  color: #8287a4;
  font-size: 20px;
  font-weight: 500;
  line-height: 29px;
  margin: 12px 0;
}

.header-tagline {
  color: #ffffff;
  font-family: Poppins;
  font-size: 56px;
  font-weight: 700;
  line-height: 74px;
  margin: 0;
}

.header-description {
  color: #8287a4;
  font-size: 14px;
  font-weight: 400;
  line-height: 27px;
  margin: 14px 0;
}

.header-content {
  margin: 0 auto;
  padding: 80px 0 280px;
  width: 720px;
}

.section {
  padding: 32px 0;
}

.section.dark {
  background-color: #f1f4fa;
}

.container {
  margin: 0 auto;
  width: 720px;
}

.title {
  color: #161346;
  font-family: Poppins;
  font-size: 36px;
  font-weight: 700;
  line-height: 54px;
  margin-bottom: 42px;
  margin-top: 42px;
}

.description {
  color: #4c497b;
  font-size: 16px;
  font-weight: 500;
  line-height: 27px;
  margin: 32px 0;
}

.cover {
  border-radius: 24px;
  width: 100%;
}

#career.section {
  background-color: #161346;
  color: #ffffff;
  text-align: center;
}

#footer.section {
  background-color: #120f3f;
  color: #d9d9d9;
  font-size: 16px;
  font-weight: 400;
  line-height: 20px;
}

#career .title {
  color: #ffffff;
  font-size: 32px;
  font-weight: 500;
  line-height: 48px;
  margin: 8px 0;
}

#career .description {
  color: #8287a4;
  font-size: 16px;
  font-weight: 400;
  line-height: 23px;
  margin: 8px 0;
}

.button-container {
  text-align: center;
}

a.button {
  background: #413c91;
  border-radius: 8px;
  color: #ffffff;
  display: inline-block;
  font-size: 16px;
  font-weight: 700;
  line-height: 23px;
  margin: 32px 0;
  padding: 16px 32px;
  text-align: center;
  text-decoration: none;
}

a.button:hover {
  background-color: #504ba8;
}

a.button.round {
  border-radius: 9999px;
}


## 캐스케이드
계단 형식으로 이전에 작성한 css 를 새로 작성한 css 가 덮어서 작성됨.
# 캐스케이드 순서
코드에서 나중에 적은 코드가 우선적이다. (아래쪽에 있는 코드)
개발자 모드에서는 위쪽에 있는 코드

# specificity calculator 선택자 명시도 계산기



# 코드잇 항공: 매진 항공편
해설
우선 개발자 도구로 "매진"이라는 링크를 조사해 봅시다. Styles 탭을 보면 우선 .flight-card .footer > a라는 선택자로 글자색을 우선적으로 설정하고, 그 아래에 보면 .flight-card .soldout이라는 선택자로 글자색을 설정하는데 우선순위가 낮아서 취소선이 그어진 거 보이시나요? 우리가 원하는 건 .flight-card .soldout의 글자색을 적용하는 건데요.

개발자 도구 스크린샷 00

간단히 생각해 보면 둘다 클래스가 하나씩 있고, .flight-card .footer > a 에는 태그가 하나 더 있으니 이쪽이 더 명시도가 높겠죠? 실제로 계산해 보면 .flight-card .footer > a 는 아이디 0개, 클래스 2개, 태그 1개입니다. 반면에 .flight-card .soldout은 아이디 0개, 클래스 2개, 태그 0개입니다.

명시도 점수가 더 낮아서 낮은 우선순위가 된 건데요. 그럼 명시도를 올려 주면 문제가 해결되겠네요.

.flight-card .soldout은 사실 .flight-card .footer > a에서 조건이 추가된 거라고 볼 수 있으니까 클래스를 붙여서 써도 됩니다. .flight-card .footer > a.soldout 이렇게요. 이 선택자는 .flight-card의 자손 중에 .footer라는 클래스를 태그 안에서, 자식 태그 중에 <a> 태그이면서 .soldout이라는 클래스를 갖고 있는 요소를 선택합니다. 명시도를 계산해보면 아이디 0개 클래스 3개 태그 1개 이렇게 됩니다. .flight-card .footer > a  보다 명시도가 높죠? 그래서 캐스캐이딩할 때는 우선순위가 더 높습니다.

선택자를 .flight-card .footer > a.soldout으로 바꾸고 실행해 보면 우리가 원하는 대로 잘 나오고, 예상했던 것처럼 명시도가 높아져서 우선순위도 높아졌네요.

.flight-card .footer > a.soldout {
  color: #dce0e8;
}

# 명시도는 아이디 개수, 클래스 개수, 요소 개수를 순서대로 숫자를 나열해서 점수를 매깁니다.


## 스타일 계산하기 정리
# 캐스케이드(Cascade)
최종적으로 적용할 CSS 속성들을 결정할 때, 계단식 폭포처럼 CSS 규칙을 순서에 따라 합쳐서 적용하는 걸 말하는데요. 한국어로는 "종속"이라고 번역하기도 합니다. 우선순위가 높은 규칙일수록 우선적으로 속성을 적용합니다.

# 스타일 시트의 종류
브라우저에서 기본으로 제공하는 스타일시트(User Agent Stylesheet)는 똑같은 선택자를 쓰고 있다면 우리가 작성한 코드보다 우선순위가 낮습니다.

예를 들어서 브라우저 기본 CSS에서 아래처럼 쓰고 있다고 가정해 볼게요.

h2 {
  display: block;
  font-size: 1.5em;
  ...
  font-weight: bold;
}
이때, 우리가 style.css 파일에서 아래처럼 쓰면, 우리가 작성한 스타일시트(Author Stylesheet)의 우선순위가 더 높기 때문에 글자 크기는 2em이 됩니다.

h2 {
  font-size: 2em;
}

# 코드 상의 순서
코드에서 아래 쪽에 쓴 코드일수록 우선순위가 높습니다. 예를 들어서 아래 코드에서 글자 크기는 2em이 됩니다.

<span class="address">강원특별자치도 춘천시 중앙로 1</span> 
.address {
    font-size: 1em;
}

.address {
  font-size: 2em;
}

# 명시도
선택자마다 명시도 점수가 있는데요. 간단히 말해서 아이디 개수, 클래스 개수, 태그 개수를 적어서 점수를 비교합니다. 예를 들어서 아래 코드에서 a.order는 0 1 1 이지만 a#info는 1 0 1이기 때문에 명시도는 a#info가 더 높습니다.

a.order { /* 아이디 0, 클래스 1, 태그 1 = 명시도 0 1 1 */
  ...
}

a#info { /* 아이디 1, 클래스 0, 태그 1 = 명시도 1 0 1 */
  ...
}

# 상속
부모 태그에 적용된 CSS 규칙은 자손에게도 상속되는데요. 모든 속성이 상속되는 건 아니고, 상속되는 속성들이 정해져 있습니다.

상속된 속성의 우선순위
조상 태그들에서 스타일이 모두 계산된 상태에서 우선순위를 따지는데요. 가까운 조상에게 물려받은 속성일수록 우선순위가 높습니다. 예를 들어서 아래 코드에서 a.order 태그(.order 클래스가 있는 <a> 태그)에 적용되는 글자색은 #cccccc 입니다.

<body>
    <div id="info">
      <p class="description">
        ...<a class="order" ...>주문</a>
      </p>
    </div>
</body>
body {
  color: #000000;
}

#info {
  color: #aaaaaa;
}

.description {
  color: #bbbbbb;
}

.order {
  color: #cccccc;
}
a.order 태그에 적용되는 속성들을 캐스케이딩의 우선순위가 높은 순으로 나열해보면 다음과 같습니다.

.order {
  color: #cccccc;
}
/* p.description 태그(부모 태그)에서 상속받은 속성 */
{
  color: #bbbbbb;
}
/* div#info 태그(조부모 태그)에서 상속받은 속성 */
{
  color: #aaaaaa;
}
/* body 태그(증조부모 태그)에서 상속받은 속성 */
{
  color: #000000;
}

# 상속되는 속성들
대표적으로 다음 속성들은 상속이 되는데요.

color, font-family, font-size, font-weight, line-height, text-align, … .

어떤 속성이 상속되는지 전부 외우실 필요는 없고, 만약 어떤 속성이 상속되는지 알고 싶다면 그때그때 검색할 수만 있으면 충분합니다.

MDN 사이트를 예로 들자면, CSS 속성 페이지를 보시면 아래 스크린샷처럼 "Formal definition"라는 섹션이 있는데요. 여기서 "Inherited"를 보시면 이 속성이 상속되는지 안 되는지 알 수 있습니다. color는 상속되는 대표적인 속성인데, Formal definition에 보면 Inherited: yes라고 되어 있네요.



