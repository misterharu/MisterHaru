# Git


echo "# codingNote" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/MisterHaru9/codingNote.git
git push -u origin main





1. 레포지토리(repository)
프로젝트 디렉토리 .git

2. 커밋(commit)

# Git 명령어
$ mkdir 폴더명 //폴더 새로 만들기
$ ls -al   //폴더안의 파일 리스트를 불러 올때
$ cd .git   //폴더로 들어 갈때
$ git config user.name "MisterHaru"
$ git config user.email "misterharu9@gmail.com"

$ git add calculator.py  // 커밋할 파일을 지정
$ git add License
$ git commit -m "Create calculator.py and License" //커밋
// 지정한 파일 커밋 할 경우 오류.
$ git status 상태를 보여줌
$ touch 파일명 // 파일을 추가
$ git reset 파일명  //커밋 취소 및 이전으로 돌림
$ git help [add]   //해당 커맨드에 관한 내용을 볼수 있다. ($ git help 커맨드)
$ man git-add // 커맨드 확인 가능 (리눅스 쉘 커맨드 이다. 햣 윈도우에서 작동 안함)
$ git [command] -h  //간단하게 커맨드 확인
$ git [command] --help    //자세한 커맨드 확인

git init : 현재 디렉토리를 Git이 관리하는 프로젝트 디렉토리(=working directory)로 설정하고 그 안에 레포지토리(.git 디렉토리) 생성
git config user.name 'codeit' : 현재 사용자의 아이디를 'codeit'으로 설정(커밋할 때 필요한 정보)
git config user.email 'teacher@codeit.kr' : 현재 사용자의 이메일 주소를 'teacher@codeit.kr'로 설정(커밋할 때 필요한 정보)
git add [파일 이름] : 수정사항이 있는 특정 파일을 staging area에 올리기
git add [디렉토리명] : 해당 디렉토리 내에서 수정사항이 있는 모든 파일들을 staging area에 올리기
git add . : working directory 내의 수정사항이 있는 모든 파일들을 staging area에 올리기
git reset [파일 이름] : staging area에 올렸던 파일 다시 내리기
git status : Git이 현재 인식하고 있는 프로젝트 관련 내용들 출력(문제 상황이 발생했을 때 현재 상태를 파악하기 위해 활용하면 좋음)
git commit -m "커밋 메시지" : 현재 staging area에 있는 것들 커밋으로 남기기
git help [커맨드 이름] : 사용법이 궁금한 Git 커맨드의 공식 메뉴얼 내용 출력

$ git add .  //전체를 지정

#Github
$ git push  //깃허브로 업로드
$ git pull  // 깃허브에 있는 최신 내용을 로컬로 내려 받아서 최신으로 바꿈

git push --set-upstream origin master
git push

git clone // GitHub 상 주소는 https://github.com/django/django.git인데요. Django의 프로젝트 디렉토리를 그대로 가져올때 사용

https://github.com/MisterHaru9/MisterHaru_Home
# 오픈 소스 소프트웨어

numpy(이전 영상에서 살펴본 파이썬 수치 계산용 라이브러리, https://github.com/numpy/numpy)
Linux(위에서 말한 리눅스, https://github.com/torvalds/linux)
MySQL Server(데이터베이스 프로그램, https://github.com/mysql/mysql-server)
WordPress(설치형 블로그 프로그램, https://github.com/WordPress/WordPress)
React Native(페이스북에서 만든 모바일 UI 프레임워크, https://github.com/facebook/react-native)
Vue.js(웹 UI 프레임워크, https://github.com/vuejs/vue)
Tensorflow(머신러닝 프레임워크, https://github.com/tensorflow/tensorflow)

//markdown .md
# 이것은 1단계 제목입니다.
## 이것은 2단계 제목입니다.
### 이것은 3단계 제목입니다.
#### 이것은 4단계 제목입니다.
***
-

git push -u origin master : 로컬 레포지토리의 내용을 처음으로 리모트 레포지토리에 올릴 때 사용합니다.(-u origin master가 무슨 뜻인지는 'Git에서 브랜치 사용하기' 챕터에서 배울 거니까 걱정마세요!)
git push : 로컬 레포지토리의 내용을 리모트 레포지토리에 보내기
git pull : 리모트 레포지토리의 내용을 로컬 레포지토리로 가져오기
git clone [프로젝트의 GitHub 상 주소] : GitHub에 있는 프로젝트를 내 컴퓨터로 가져오기


$ git log
$ git log --pretty=oneline
$ git show 0815(커밋 아이디중에 4자리만 쳐도 됨)
$ git show [commit id]

$ git commit 입력시 내용을 추가 입력 할수 있다.(mac, vim프로그램:메모장)
q 밖으로 빠져나옴
wq 저장하고 빠져나옴

$ git commit --amend  // 추가 커밋을 할 경우

$ git history   //커밋 된 히스토리를 확인
$ git diff [이전 commit id] [이후 commit id] //차이점을 확인
- 이전 커밋 내용
+ 이후 커밋 내용
- git config alias.history 'log --pretty=oneline'
git config alias.[새로운 별명] [길이가 긴 커맨드]의 형식으로 쓰면 길이가 긴 커맨드를 짧은 별명만 타이핑해도 실행할 수 있습니다. alias는 별명이라는 뜻이고 이렇게 별명을 붙이는 행위를 aliasing(앨리어싱)이라고 합니다.


HEAD = 보통 가장 최근에 한 커밋을 가리킴.
# HEAD가 가리키는 커밋에 따라 working directory 구성
작업중인 폴더 : working directory / working textarea

$ cat [파일명]   //파일 내용 확인


커밋(commit)은 Git에서 가장 핵심적인 개념입니다. 커밋은 staging area의 현 상태를 그대로 하나의 버전으로 남기는 작업, 또는 그 결과물을 가리키는 말이라고 했는데요.

커밋에는 크게 다음과 같은 3가지 정보가 있습니다.

(1) 커밋을 한 사용자 아이디

(2) 커밋한 날짜, 시간

(3) 커밋 메시지

특정 프로젝트 디렉토리가 어떻게 변해왔는지를 한 눈에 잘 파악하기 위해서는 커밋의 이런 정보들이 아주 중요합니다. 그런데 (1), (2)는 커밋을 할 때 Git에서 자동으로 기록해주지만, (3) 커밋 메시지는 커밋을 하는 사람이 매번 직접 작성하는 것이기 때문에 사람마다 그 분량이나 스타일이 제각각일 수 있습니다.

개인 프로젝트의 경우에는 커밋 메시지를 어떻게 작성하든 큰 상관이 없을 수 있지만, 회사에서 여러 명이 참여하는 프로젝트의 경우에는 이 커밋 메시지가 아주 중요합니다. 그래서 커밋 메시지를 어떻게 작성해야하는지에 대한 규칙이 정해져있는 경우가 많은데요.

그 규칙들은 회사마다 전부 다르겠죠? 그래도 커밋 메시지를 어떻게 작성하면 좋은지에 대한 일반론적인 가이드라인은 있습니다. 잠깐 살펴보자면 다음과 같습니다.

1. 커밋 메시지 작성 가이드라인
(1) 커밋 메시지의 제목과 상세 설명 사이에는 한 줄을 비워두세요.



이전 영상에서 커밋 메시지를 남길 때 봤던 장면인데 기억나시나요? 지금 1번이 커밋 메시지의 제목(title), 2번이 커밋 메시지의 상세 내용(body)이라고 생각하시면 됩니다. 뭔가 상세한 설명이 필요한 커밋인 경우에는 커밋 메시지 한 줄보다는 이런 식으로 제목과 상세 내용으로 구분해서 적어주면 좋은데요. 이럴 때 제목과 상세 내용 사이에 한 줄을 띄워놓아야 나중에 커밋 메시지를 볼 때 좀더 편하게 볼 수 있습니다. 그리고 이렇게 비어있는 한 줄을 두는 것이 Git에서 공식적으로 권장하는 사항(예를 들어, 특정 명령어가 이 한 줄을 기준으로 제목과 상세 내용을 구분해서 사용한다고 합니다)이기도 하니까 꼭 지켜주세요.

(2) 커밋 메시지의 제목 뒤에 온점(.)을 붙이지 마세요.

(3) 커밋 메시지의 제목의 첫 번째 알파벳은 대문자로 작성하세요.

(4) 커밋 메시지의 제목은 명령조로 작성하세요.(Fix it / Fixed it / Fixes it)

(5) 커밋의 상세 내용에는 이런 걸 적으면 좋습니다.

왜 커밋을 했는지
어떤 문제가 있었고
적용한 해결책이 어떤 효과를 가지는지
(6) 다른 사람들이 자신의 코드를 바로 이해할 수 있다고 가정하지 말고 최대한 친절하게 작성하세요.

어떤가요? 이런 것들을 신경쓰면서 커밋 메시지를 남겨야 남들이 여러분이 한 커밋에 대해 더 잘 이해할 수 있겠죠?

그런데 사실 커밋 메시지를 작성하는 방법뿐만 아니라 커밋을 남기는 것 자체에 관해서도 일종의 가이드라인이 있습니다. 그것들을 정리해보면 아래와 같은데요.

2. 커밋할 때 알아야할 가이드라인
(1) 하나의 커밋에는 하나의 수정사항, 하나의 이슈(issue)를 해결한 내용만 남기도록 하세요. 다양하게 수정을 하고나서 하나의 커밋으로 남기는 것은 좋지 않습니다. 하나의 커밋이 하나의 사실만을 갖고 있어야 나중에 이해하기 쉽습니다.

이 말은 결국 최대한 작은 단위의 변화를 기준으로 커밋을 하라는 뜻입니다. 예를 들어 여러분이 A라는 파일에서 기존 함수를 3개 삭제하고, B라는 파일에서 기존 함수 2개를 삭제, C라는 파일에서 기존 함수를 1개 삭제했다고 합시다. 그 다음 프로그램을 실행해봤는데 오류가 생겼다면 과연 A, B, C 파일 중 무엇때문에 문제가 생긴건지 일일이 확인해보지 않는 이상 알 수 없겠죠? 이처럼 다양한 종류의 수정을 다 하고나서야 커밋을 하면 바로 그 다음에 프로그램에 문제가 생겼을 때 그 원인을 파악하는데 시간이 더 오래 걸립니다. 그리고 이렇게 하면 커밋 간의 독립성이 사라져서 나중에 프로젝트의 이력을 파악하는 일도 어려워지기도 하죠.

하지만 어느 정도의 수정사항을 하나의 단위로 볼 것인지는 상황에 따라 조금씩 다를 수 있습니다. 회사의 규칙에 따라 다를 수도 있구요. 어찌 됐든 너무 많은 작업의 결과를 하나의 커밋으로 담지 않아야겠다는 생각을 하면서 커밋을 해야합니다.

(2) 현재 프로젝트 디렉토리의 상태가 그 내부의 전체 코드를 실행했을 때 에러가 발생하지 않는 상태인 경우에만 커밋을 하도록 하세요. 나중에 동료 개발자가 특정 커밋의 코드로 실행했을 때 에러가 발생한다면 혼란을 줄 수 있습니다.

커밋으로 보관된 특정 시점의 전체 코드는 항상 문제없이 실행되는 상태여야 합니다. 이미 과거의 커밋이 되어버렸다고 우리에게 쓸모없는 커밋이 되는 건 절대 아닙니다. 과거의 커밋이라도

과거 버전의 프로그램을 사용해야하거나
과거 커밋을 시작점으로 한 다른 방향의 별도 프로젝트를 시작하거나
아예 그 커밋으로 현재 프로젝트를 리셋할 수도 있습니다.
따라서 매 커밋의 코드들은 항상 정상 실행되는 상태의 코드여야 합니다. 그렇지 않으면 나중에 그 커밋을 위와 같은 용도로 사용하려고 할 때 문제가 생길 수 있습니다. 그리고 협업하는 상황을 생각해봐도 내가 남긴 커밋을 동료 개발자가 실행해봤는데 에러가 나고 실행이 되지 않는다면 좀 민망하겠죠? 따라서 커밋을 하기 전에 프로그램이 정상 실행되는지 점검하고 커밋하는 것이 좋습니다.

자, 이때까지 커밋에 관한 가이드라인들을 살펴봤습니다. 사실 이런 가이드라인은 회사마다 다를 수 있고, 절대적인 규칙이 있는 것도 아닙니다. 어떤 경우든지 본인이 다니는 회사의 가이드라인을 잘 준수하는 것이 좋겠죠? 혹시 가이드라인이 없다고 할지라도

나중에 다시 봤을 때 이해하는데 어려움이 없도록
다른 동료 개발자와 협업하는 데 방해가 되지 않도록
커밋을 남기고, 그 때마다 커밋 메시지를 잘 작성하는 것이 중요합니다.


이때까지 영상에서 계속 커밋 히스토리를 보기위해

git log

커맨드를 사용해왔습니다.

그리고 커밋 하나당 한 줄씩 보기 위해

--pretty=oneline

이라는 옵션을 붙여서 사용하고 있죠.

그런데 옵션이 좀 길죠? 이렇게 긴 옵션을 매번 붙여서 사용하는 건 좀 힘들 것 같은데요.

Git에는 이렇게 길이가 긴 경우의 커맨드 전체에 별명을 붙여서 그 별명을 사용할 수 있도록 해주는 기능이 있습니다.

이 때 붙이는 별명을 alias라고 하고, 별명을 붙이는 행위를 aliasing이라고 합니다.

그럼 한번 aliasing을 해보겠습니다.

git log --pretty=oneline을
git history라는 별명으로
aliasing해보겠습니다. 어떻게 하면 될까요?

혹시 예전에 Git으로 가장 첫 번째 커밋을 하기 전에 이런 설정을 했던 거 기억나시나요?

git config user.name 'codeit'
git config user.email 'codeit@codeit.kr'
누가 커밋을 남기는지 그 사용자 정보를 저장하기 위해 했던 설정으로 사용자의 아이디와 이메일 주소를 설정하는 커맨드였습니다.

aliasing을 할 때도 이렇게

git config

커맨드를 사용하면 되는데요. 바로 보여드릴게요. 이렇게 적으면 됩니다.

git config alias.history 'log --pretty=oneline'
이렇게 쓰고 실행하고 나면 앞으로 git histroy라고만 써도 자동으로 git log --pretty=oneline을 실행하게 됩니다.

다음 영상부터는 git log --pretty=oneline 대신 git history를 사용하도록 하겠습니다. history는 원래 git에 있는 커맨드가 아니라 단지 제가 만든 alias라는 걸 기억하세요.

그리고 앞으로 여러분도 여러 커맨드와 옵션들을 배울 때 길이가 너무 길어서 짧게 나타내고 싶은 것이 생기면 방금 배운 aliasing을 활용해보세요.


#09. 이전 커밋으로 git reset하기
과거 커밋으로 아예 돌아가고 싶을때

# git reset [옵션] [커밋 아이디]
# $ git reset --hard HEAD^  // 이전 커밋으로 리셋 할때 사용
# $ git reset --hard HEAD~2  // 두단계 이전의 커밋으로 리셋

$ git reset --hard [commit id]
// 지정한 [commit id]로 working directory가 지정되며 이전 커밋으로 돌아간다.

#커맨더 옵션
--hard  //working directory의 내부도 그 과거 커밋의 모습처럼 바뀜
--soft
--mixed

// git add로 지정해서 staging area에 마지막으로 남아 있는 커밋은 상관없이 계속 남아 있음.




$ git add .
$ git status
$ git history
$ git reset --soft [commit id]
$ cat [파일명]

$ git push 깃허브에 업로드
$ git pull 깃허브에 업로드 해놓은 최신 파일들을 가져옴





# commit에 관한 주의사항
1. 처음으로 커밋을 하기 전 사용자의 이름과 이메일 주소를 설정!
2. 커밋 메시지 남기기(옵션 -m)
3. 커밋할 파일을 git add로 지정해주기


MisterHaru@MisterHaru MINGW64 ~
$ cd MathTool

MisterHaru@MisterHaru MINGW64 ~/MathTool
$ git init
Initialized empty Git repository in C:/Users/MisterHaru/MathTool/.git/

MisterHaru@MisterHaru MINGW64 ~/MathTool (master)



# 파이썬
add 더하기
subtract 빼기

def add(a, b):
	return a+b

def subtract(a, b):
	return a-b

# 커밋에 태그 달기
$ git tag [태그 이름] [커밋 아이디]
$ git show [태그 이름]



git log : 커밋 히스토리를 출력

git log --pretty=oneline : --pretty 옵션을 사용하면 커밋 히스토리를 다양한 방식으로 출력할 수 있습니다. --pretty 옵션에 oneline이라는 값을 주면 커밋 하나당 한 줄씩 출력해줍니다. --pretty 옵션에 대해 더 자세히 알고싶으면 이 링크를 참고하세요.

git show [커밋 아이디] : 특정 커밋에서 어떤 변경사항이 있었는지 확인

git commit --amend : 최신 커밋을 다시 수정해서 새로운 커밋으로 만듦

git config alias.[별명] [커맨드] : 길이가 긴 커맨드에 별명을 붙여서 이후로 별명으로 해당 커맨드를 실행할 수 있도록 설정

git diff [커밋 A의 아이디] [커밋 B의 아이디] : 두 커밋 간의 차이 비교

git reset [옵션] [커밋 아이디] : 옵션에 따라 하는 작업이 달라짐(옵션을 생략하면 --mixed 옵션이 적용됨)

(1) HEAD가 특정 커밋을 가리키도록 이동시킴(--soft는 여기까지 수행)

(2) staging area도 특정 커밋처럼 리셋(--mixed는 여기까지 수행)

(3) working directory도 특정 커밋처럼 리셋(--hard는 여기까지 수행)

그리고 이때 커밋 아이디 대신 HEAD의 위치를 기준으로 한 표기법(예 : HEAD^, HEAD~3)을 사용해도 됨

git tag [태그 이름] [커밋 아이디] : 특정 커밋에 태그를 붙임


# branch 나뭇가지

무료와 유로로 구분 할때

$ git branch [branch 명]  // branch 생성
$ git checkout [branch 명]  // branch로 이동

$ git branch -d [branch 명] // branch 삭제
$ git checkout -b [branch 명]  // branch 생성후 자동으로 이동

git checkout 커맨드에서 -b 옵션은 특정 브랜치를 생성하고 바로 거기로 이동하게 해줍니다.

그러니까 git checkout -b test = git branch test(브랜치 생성) + git checkout test(브랜치로 이동) 입니다.

d 옵션은 특정 브랜치를 삭제해줍니다.


# branch merge
$ git merge [branch 명]  // 가져올 브랜치 선택

:wq 저장

# conflict //merge 하는 중 어떤것을 머지 할지 결정되지 않을때 컨플릭트 오류

$ git merge --abort  //merge를 취소하는 커맨드

만약 꼭 머지를 해야하는 상황이라면 이전 영상에서 봤던 것처럼 Conflict를 해결하고 커밋을 하는 게 정석입니다.

하지만

Conflict가 발생한 파일들이 너무 많아서 Conflict를 최소화할 수 있는 방식으로 파일들을 다시 수정하고 커밋한 다음에 머지를 하고 싶다거나
그냥 좀더 나중에 머지하고 싶을 때라면
방금처럼 그냥 머지 자체를 취소해도 됩니다.

여러 개의 파일에서 conflict가 발생했을 때도 앞으로 잘 해결할 수 있겠죠? 파일 여러개가 conflict가 났을 때는

파일 하나씩 conflict를 해결하고 git add [파일 이름] 커맨드로 하나씩 staging area에 올리거나(중간중간에 git status 커맨드로 현재 상태 확인하면서)
모든 파일들의 conflict를 다 해결하고, git add . 커맨드로 한번에 staging area에 올리고
커밋을 하면 됩니다.

# 처음 PUSH
$ git remote add origin https://github.com/kyuri-dev/Math_Box.git
$ git push -u origin master



# 1. origin이란?
먼저 첫 번째 커맨드를 봅시다.

git remote add origin https://github.com/kyuri-dev/Math_Box.git

이 커맨드에서 remote는 리모트 레포지토리에 관한 작업을 할 때 쓰는 커맨드입니다.

그리고 그 뒤의 add는 새로운 리모트 레포지토리를 등록하겠다는 뜻입니다.

그 다음에는 origin https://github.com/kyuri-dev/Math_Box.git이라고 써있죠?

이 표현은 https://github.com/kyuri-dev/Math_Box.git 리모트 레포지토리를 origin이라는 이름으로 등록하겠다는 뜻입니다.

그러니까 이 커맨드를 실행하고 나면 https://github.com/kyuri-dev/Math_Box.git를 origin으로 간단하게 나타낼 수 있게 되는 거죠.

그럼 왜 하필 origin이라고 하는 걸까요? origin이 아닌 여러분이 원하는 다른 단어를 입력해도 큰 상관은 없습니다. 하지만 Git에서는 리모트 레포지토리를 최초로 추가할 때 origin이라는 이름으로 가리키는 것이 관례화되어 있습니다.

origin은 ‘근원’, ‘기원’이라는 뜻을 가집니다. 아마도 다른 사람의 리모트 레포지토리를 자신의 컴퓨터로 가져와서 작업을 하는 사람의 입장에서는 리모트 레포지토리가 프로젝트의 근원이 되는 존재이기 때문에 그런 관습이 생긴 것으로 추측됩니다.

사실

git remote add hello https://github.com/kyuri-dev/Math_Box.git

처럼 origin 대신 우리가 원하는 단어(hello)를 써도 상관은 없지만, 되도록 관례에 따라 origin을 써주는 게 좋겠죠?

2. Remote Repositoy에 있는 브랜치
이제 두 번째 커맨드를 설명해드릴게요.

git push -u origin master

이 커맨드의 뜻은

현재 로컬 레포지토리에 있는 master 브랜치의 내용(=master 브랜치와 관계된 모든 커밋들)을
origin이라는 리모트 레포지토리로 보낸다는 뜻입니다.
이때 같은 이름의 브랜치로 전송하게 되는데 만약 origin이라는 리모트 레포지토리에 master 브랜치가 없으면 master 브랜치를 새로 생성하고 푸시합니다.
그런데 여기서 옵션 -u는 무슨 뜻일까요? -u는 --set-upstream이라는 옵션의 약자입니다.

이렇게 --set-upstream(-u) 옵션을 주면

로컬 레포지토리에 있는 master 브랜치가
origin에 있는 master 브랜치를 tracking(추적)하는 걸로 설정됩니다.
tracking이라는 건 로컬 레포지토리의 한 브랜치가 리모트 레포지토리의 한 브랜치와 연결되어 그것을 계속 바라보는 상태가 되는 것이라고 생각하시면 됩니다. 이렇게 맺어진 연결 상태를 tracking connection이라고 합니다.

만약

로컬 레포지토리에 A라는 브랜치가 있고,
리모트 레포지토리에 B라는 브랜치가 있을 때
이런 tracking connection이 서로 맺어진 경우,
B 브랜치를 A 브랜치의 upstream branch라고 합니다.
지금은 구별하기 위해서 A와 B라고 표현했지만 보통은 같은 이름인 경우가 대부분입니다.
이렇게 tracking connection이 한번 설정되고 나면,
사용자가 현재 master 브랜치에 위치해있을 때,

# git push
라고만 써도 자동으로 리모트 레포지토리의 master 브랜치를 대상으로 git push가 동작하고,

# git pull
라고만 써도 리모트 레포지토리의 master 브랜치를 대상으로 git pull이 동작합니다.

사실 --set-upstream(-u) 옵션을 주지 않아도 그 후에 git push와 git pull을 할 수 있기는 합니다. 하지만 맨 처음에 이 옵션을 주지 않으면 tracking connection이 없기 때문에 나중에 git push를 하고 싶을 때

git push origin master:master
이런 식으로 적어줘야 합니다. 여기서

origin은 리모트 레포지토리를 나타내고,
master:master에서 더 먼저 나오는 master는 로컬 레포지토리의 master 브랜치(~에서)/더 뒤에 나오는 master는 리모트 레포지토리의 master 브랜치(~으로)를 나타냅니다.
그러니까 tracking connection이 없으면 매번 이런 식으로 git push를 해줘야 합니다. git pull도 마찬가지로 이런 식의 복잡한 표현이 필요하게 됩니다.

그러니까 그냥 처음부터 tracking connection을 설정하고 그 이후부터는 git push, git pull이라고만 써서 편하게 푸시와 풀을 하는 게 좋겠죠? 이게 바로 제가 맨 처음에 로컬 레포지토리의 내용을 리모트 레포지토리로 보낼 때 -u라는 옵션을 썼던 이유입니다.

#git fetch
현재 브랜치의 upstream 브랜치의 내용을 단지 가져오기만 합니다. 따라서 내용을 가져와서 머지까지 하는 git pull과는 다른데요.

두 커맨드 사이에는 git pull = git fetch + git merge 관계가 성립합니다.

그럼 언제 git fetch를 사용할까요? 업스트림 브랜치의 신규 커밋들을 현재 브랜치에 바로 머지하기보다는 일단 한번 살펴볼 필요가 있을 때 git fetch를 사용합니다.

만약 살펴봤는데 괜찮다면 로컬 레포지토리의 브랜치에 바로 머지하면 되죠.

괜찮지 않다면

(1) 그 작업을 한 다른 개발자와 상의해서 리모트 레포지토리의 내용을 수정해달라고 부탁하거나

(2) 일단은 내가 머지를 하고 제대로 수정해서 커밋한 다음에 git push를 하면 되구요.




3. origin/master의 의미
자, 이제

로컬 레포지토리의 master 브랜치
리모트 레포지토리의 master 브랜치
이렇게 같은 이름이지만, 서로 다른 2개의 브랜치가 있다는 걸 알겠죠?

그럼 리모트 레포지토리에 있는 master 브랜치는 어떻게 볼 수 있을까요? GitHub 페이지에서 보면 될 겁니다.

하지만 제 컴퓨터에서도 확인할 수 있는 방법이 있습니다. 잠깐 커밋 히스토리를 살펴보면



위 그림에서

master가 로컬 레포지토리의 master 브랜치를 나타내고
origin/master가 리모트 레포지토리의 master 브랜치를 나타냅니다.
이때까지 로컬 레포지토리의 master 브랜치에서 여러 커밋을 했지만 그러고나서 git push를 해준 적은 없었습니다. 그래서 위 그림처럼 origin/master가 master보다 이전의 커밋을 가리키고 있는 겁니다.

다음 영상에서는 master, premium 브랜치 둘 다에서 리모트 레포지토리로 git push 하겠습니다. 그러고 나면 이제 origin/master도 master와 같은 커밋을 가리키게 될 것입니다.


--set-upstream //처음 커밋할때 해야함.



두 브랜치가, 커밋 히스토리 상에서 분리된 2개의 선에 각각 존재할 때 머지를 하면 머지 커밋이 새롭게 생기는 거구요. .

그리고 이런 머지는 3-way merge라고 합니다. 이름이 3-way인 이유는 지금 1, 2, 3 표시한 3가지 커밋을 고려해서 머지를 하기 때문입니다. 지금 각각

(1)번 : 두 갈래로 갈라지기 전 공통 조상이 되는커밋
(2)번 : 한 브랜치가 가리키는 커밋
(3)번 : 다른 브랜치가 가리키는 커밋
인데요. 3-way merge는 자신만의 방식을 갖고 이 3가지 커밋을 기준으로 머지 커밋을 자동으로 만들어냅니다.

그 방식에 대해서 간단하게 알려드릴게요. 아래 표에는 master 브랜치와 premium 브랜치를 머지했을 때 다양한 상황별로 그 결과가 정리되어 있는데요.


각 컬럼(column, 열)에 대해서 설명할게요. 지금 모든 커밋에 sample.txt 파일이 있다고 가정할게요.

base : 두 브랜치의 공통 부모 커밋의 sample.txt 파일의 내용 중 일부 = 위 그림 (1)번
master : 마스터 브랜치의 최신 커밋의 sample.txt 파일의 내용 중 일부 = 위 그림 (2)번
premium : 프리미엄 브랜치의 sample.txt 파일의 내용 중 일부 = 위 그림 (3)번
머지 결과 : master 브랜치에서 premium 브랜치를 머지했을 때의 최종 결과
자, 각각의 경우에 왜 표와 같은 머지 결과가 생기는 건지 설명해드릴게요.

case1

지금 base가 A이고, master는 A, premium은 B죠? 그럼 base를 기준으로 볼 때, master에서는 변화가 없었지만, premium에서는 A가 B로 변경된 상태입니다. 3-way merge는 base에서 변화가 발생한 것을 우선 채택합니다. 그래서 머지 결과는 'B'가 됩니다.

case2

지금 base가 1이고, master는 2, premium은 1이죠? 이 경우에도 base에서 변화가 발생한 2가 머지 결과가 됩니다.

case3

지금 base가 "hello"이고, master는 "hello"를 삭제한 공백 상태, premium은 "hello"입니다. "hello"를 삭제해서 공백 상태가 된 것이 변화가 더 발생한 것이기 때문에 머지 결과는 공백이 됩니다.

case4

지금 base가 "bye", master가 "fighting", premium이 "please" 인데요. 지금은 이전 경우들과 좀 다르네요. 둘 다 base 때와는 다른 변화가 일어났는데요. 이렇게 두 브랜치에서 다 변화가 있을 때 Git은 어떤 변화를 선택해야할까요? 정답은 바로 'Git도 모른다!' 입니다. 사실, 바로 이런 경우에 여러분이 배운 Conflict가 발생합니다. 이전에 Conflict가 발생했을 때 그것을 해결하고 머지를 마무리했던 거 기억나시죠? 바로 이런 경우였던 겁니다.

3-way merge가 어떤 방식으로 이루어지는지 아시겠죠?

base때의 내용과 비교했을 때 달라진 부분이 있는 것이 우선시되고,
두 브랜치에서 둘다 변화가 일어났을 때는 Conflict를 발생시켜서 사용자가 스스로 선택하게끔 한다는 걸 기억하시면 됩니다.
자, 이때까지 머지에 대해서 좀 깊게 배워봤습니다. 방금 배운 내용을 다 기억하지 못하더라도

머지의 종류에는 크게

Fast-forward 머지
3-way 머지
이렇게 두 가지 종류가 있다는 사실만큼은 꼭 기억하세요.


# 정리
git branch [새 브랜치 이름]: 새로운 브랜치를 생성
git checkout -b [새 브랜치 이름]: 새로운 브랜치를 생성하고 그 브랜치로 바로 이동
git branch -d [기존 브랜치 이름]: 브랜치 삭제
git checkout [기존 브랜치 이름]: 그 브랜치로 이동
git merge [기존 브랜치 이름]: 현재 브랜치에 다른 브랜치를 머지
git merge --abort: 머지를 하다가 conflict가 발생했을 때, 일단은 머지 작업을 취소하고 이전 상태로 돌아감



# $ git fetch   //리모트 레포지토리에서 가져온 브랜치의 내용을 머지하기 전에 점검해야할 필요가 있을때 사용


# 누가 커밋을 했는지 확인 할 때
$ git blame [파일명]   // 커밋 정보를 확인하기 위한 커맨드
어떤 파일의 내용 한줄한줄이 각각 어떤 커밋에 의해 탄생했는지를 확인하려면 아래와 같은 커맨드를 써야합니다

$ git show [commit id]  // 커밋을 누가 했는지 세부 정보를 알수 있다.

$ git revert [commit id] //이전 커밋으로 되돌리기 위해 사용하지만 삭제하는게 아니라 다음 단계에 되돌린 커밋을 추가 한다.

$ git revert [commit id]..[commit id]  // 이전 커밋과 최종 커밋 아이디를 적어서 이전 커밋으로 리버트 한다.



## git push -f 을 할 경우 아예 로컬 레포지토리의 내용으로 리모트 레포지토리의 내용을 밀어버리고 덮어써버릴 수 있기는 합니다. 여기서 -f는 force의 약자로 강제로 푸시를 하라는 뜻입니다. 하지만 이 커맨드는 최대한 사용하면 안 됩니다. 만약 다른 개발자들이 추가해놓은 커밋들이 리모트 레포지토리에 이미 많은 상황인데 제가 이걸 무시하고 제 로컬 레포지토리로 덮어쓰면 안되겠죠? 정말 큰일날 수 있으니까 조심하세요! 다만, 혼자서 하는 개인 프로젝트를 하는 경우에는 알아두면 좋은 옵션이기에 소개하는 것입니다.


# 정리
git fetch: 로컬 레포지토리에서 현재 HEAD가 가리키는 브랜치의 업스트림(upstream) 브랜치로부터 최신 커밋들을 가져옴(가져오기만 한다는 점에서, 가져와서 머지까지 하는 git pull과는 차이가 있음)
git blame: 특정 파일의 내용 한줄한줄이 어떤 커밋에 의해 생긴 것인지 출력
git revert: 특정 커밋에서 이루어진 작업을 되돌리는(취소하는) 커밋을 새로 생성

usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
        [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
        [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
        [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
        [--config-env=<name>=<envvar>] <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
    clone     Clone a repository into a new directory
    init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
    add       Add file contents to the index
    mv        Move or rename a file, a directory, or a symlink
    restore   Restore working tree files
    rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
    bisect    Use binary search to find the commit that introduced a bug
    diff      Show changes between commits, commit and working tree, etc
    grep      Print lines matching a pattern
    log       Show commit logs
    show      Show various types of objects
    status    Show the working tree status

grow, mark and tweak your common history
    branch    List, create, or delete branches
    commit    Record changes to the repository
    merge     Join two or more development histories together
    rebase    Reapply commits on top of another base tip
    reset     Reset current HEAD to the specified state
    switch    Switch branches
    tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
    fetch     Download objects and refs from another repository
    pull      Fetch from and integrate with another repository or a local branch
    push      Update remote refs along with associated objects

# log 전체 커밋 내용을 확인
$ git log --pretty=oneline

# reflog
	reflog(reference log) 지금까지 헤드가 가리켜왔던 커밋을 보여줌



# git reset --hard [commit id]
// 리셋을 한다고 최신 커밋이 사라지는것은 아니다. 다시 최신으로 리셋이 가능하다.
(reflog를 이용해서 리셋 이후 최근 커밋으로 돌아갈 때 사용한다.)

$ git reflog
최근 커밋 아이디 확인 또는 HEAD넘버 확인후 리셋으로 돌아 온다.
$ git reset --hard HEAD@{1}  헤드가 최신으로 가리키며 최신으로 이동


$ git log --pretty=online --all --graph
// 그래프 옵션으로 커밋 앞쪽에 연결된 선을 확인 할 수 있다.


# sourcetree 프로그램 https://www.sourcetreeapp.com/
// 커밋 관리를 편하게 할 수 있는 프로그램


# git rebase
$ git rebase test
// 커밋을 테스트 파일 커밋으로 재배치
// 컨플릭트 발생하면 파일 수정후 저장
$ git rebase --continue
//컨플릭트 발생으로 제대로 진행 되지 않은것을 진행하라는 커맨드

// merge 두 브랜치를 합쳤다는 정보가 커밋히스토리에 꼭 남아야 하는 경우
// rebase 커밋히스토리를 깔끔하게 유지하는게 더 중요한 경우

$ git branch test
$ add .
$ git commit -m "test version"
$ git checkout test
// 테스트 내용 수정후 저장
$ git add .
$ git commit -m "test version 1"
// 테스트 내용을 머지 할 경우
$ git checkout HaruHome
$ git merge test
// conflit 발생시 내용 수정후 저장
$ git add .
$ git commit
wq

# git stash // 어떤 브랜치에서 하던 작업을 아직 커밋하지 않았는데 다른 브랜치로 가야하는 상황에서 사용, 저장후 헤드 이동가능.

$ git stash list 스태쉬 된 내용을 확인
$ git stash apply // stack 스택에 있는 내용을 적용

# 잘못된 브랜치에서 작업하고 있을때 stash 사용법
$ git stash
$ git checkout HaruHome
$ git stash list
$ git stash apply stash@{0}
//conflict 발생, 필요없는 부분 삭제 후 저장
$ git add .
$ git commit -m "메모"

# stack에 쌓인 stash 삭제하는 방법
$ git stash drop [stash id]

$ git stash drop stash@{0}  // stack 삭제

# 정리
1. 작업 내용 저장

git stash
2. 작업 내용 조회(=스택 살펴보기)

git stash list
3. 작업 내용 적용

git stash apply [작업 내용의 아이디]
작업 내용의 아이디를 생략하면 가장 최근의 작업 내용이 적용됨
4. 작업 내용 제거

git stash drop [작업 내용의 아이디]
작업 내용의 아이디를 생략하면 가장 최근의 작업 내용이 제거됨
이전 영상에서 저는 적용(apply)한 작업 내용은 스택에서 제거(drop)해주는 게 좋다고 했었죠?

그래서 git stash apply를 쓰고 git stash drop을 바로 해줬었는데요.

그런데 사실 이런 식으로 번거롭게 할 필요없이, 작업 내용을 적용하면서 동시에 스택에서 제거도 해주는 커맨드가 있습니다.

그건 바로


// stack에 저장하지 않고 바로 삭제하고 적용
$ git stash pop [작업 내용의 아이디]
이라는 커맨드입니다. 이 커맨드를 쓰면 특정 작업 내용을 적용함과 동시에 그것을 스택에서 제거합니다.


# $ git stash pop [작업 내용의 아이디]

$ git stash pop [작업 내용의 stash id]

git stash pop 커맨드는

[작업 내용의 아이디]를 인자로 주면, 특정 작업 내용을 적용하면서 스택에서 제거합니다.

[작업 내용의 아이디]를 인자로 주지 않으면, 가장 최근에 한 작업 내용을 적용하면서 스택에서 제거합니다.


# git cherry-pick
// 특정 커밋을 선택해서 가져오는 커맨드
//git cherry-pick 커맨드는 다른 브랜치를 merge하고 싶지는 않지만 해당 브랜치의 커밋 히스토리 중 마음에 드는 특정 커밋만을 가져와서 현재 브랜치에 반영하고 싶을 때 사용합니다. cherry-pick은 '마음에 드는 것만 골라먹다'라는 뜻을 가지는데요. 실제 그 기능과 어울리는 단어인 것 같죠?

$ git cherry-pick [commit id]


# 여러 커밋을 하나의 커밋으로 만들기
$ git reset --soft [commit id]

4! = 1 * 2 * 3 * 4 = 24


# 총 정리

# Git 써보기
git init : 현재 디렉토리를 Git이 관리하는 프로젝트 디렉토리(=working directory)로 설정하고 그 안에 레포지토리(.git 디렉토리) 생성
git config user.name 'codeit' : 현재 사용자의 아이디를 'codeit'으로 설정(커밋할 때 필요한 정보)
git config user.email 'teacher@codeit.kr' : 현재 사용자의 이메일 주소를 'teacher@codeit.kr'로 설정(커밋할 때 필요한 정보)
git add [파일 이름] : 수정사항이 있는 특정 파일을 staging area에 올리기
git add [디렉토리명] : 해당 디렉토리 내에서 수정사항이 있는 모든 파일들을 staging area에 올리기
git add . : working directory 내의 수정사항이 있는 모든 파일들을 staging area에 올리기
git reset [파일 이름] : staging area에 올렸던 파일 다시 내리기
git status : Git이 현재 인식하고 있는 프로젝트 관련 내용들 출력(문제 상황이 발생했을 때 현재 상태를 파악하기 위해 활용하면 좋음)
git commit -m "커밋 메시지" : 현재 staging area에 있는 것들 커밋으로 남기기
git help [커맨드 이름] : 사용법이 궁금한 Git 커맨드의 공식 메뉴얼 내용 출력

# GitHub 시작하기
git push -u(또는 --set-upstream) origin master : 로컬 레포지토리의 내용을 처음으로 리모트 레포지토리에 올릴 때 사용합니다.
git push : 위의 커맨드를 한번 실행하고 난 후에는 git push라고만 쳐도 로컬 레포지토리의 내용을 리모트 레포지토리에 올릴 수 있습니다.
git pull : 바로 위의 위에 있는 커맨드를 한번 실행하고 난 후에는 git pull이라고만 쳐도 리모트 레포지토리의 내용을 로컬 레포지토리로 가져옵니다.
git clone [프로젝트의 GitHub 상 주소] : GitHub에 있는 프로젝트를 내 컴퓨터로 가져오기

# Git에서 커밋 다루기
git log : 커밋 히스토리를 출력

git log --pretty=oneline : --pretty 옵션을 사용하면 커밋 히스토리를 다양한 방식으로 출력할 수 있습니다. --pretty 옵션에 oneline이라는 값을 주면 커밋 하나당 한 줄씩 출력해줍니다. --pretty 옵션에 대해 더 자세히 알고싶으면 이 링크를 참고하세요.

git show [커밋 아이디] : 특정 커밋에서 어떤 변경사항이 있었는지 확인

git commit --amend : 최신 커밋을 다시 수정해서 새로운 커밋으로 만듦

git config alias.[별명] [커맨드] : 길이가 긴 커맨드에 별명을 붙여서 이후로는 별명으로도 해당 커맨드를 실행할 수 있게 설정

git diff [커밋 A의 아이디] [커밋 B의 아이디] : 두 커밋 간의 차이 비교

git reset [옵션] [커밋 아이디] : 옵션에 따라 하는 작업이 달라짐(옵션을 생략하면 --mixed 옵션이 적용됨)

(1) HEAD가 특정 커밋을 가리키도록 이동시킴(--soft는 여기까지 수행)

(2) staging area도 특정 커밋처럼 리셋(--mixed는 여기까지 수행)

(3) working directory도 특정 커밋처럼 리셋(--hard는 여기까지 수행)

그리고 이때 커밋 아이디 대신 HEAD의 위치를 기준으로 한 표기법(예 : HEAD^, HEAD~3)을 사용해도 됨

git tag [태그 이름] [커밋 아이디] : 특정 커밋에 태그를 붙임

# Git에서 브랜치 사용하기
git branch [새 브랜치 이름] : 새로운 브랜치를 생성
git checkout -b [새 브랜치 이름] : 새로운 브랜치를 생성하고 그 브랜치로 바로 이동
git branch -d [기존 브랜치 이름] : 브랜치 삭제
git checkout [기존 브랜치 이름] : 그 브랜치로 이동
git merge [기존 브랜치 이름] : 현재 브랜치에 다른 브랜치를 머지
git merge --abort : 머지를 하다가 conflict가 발생했을 때, 일단은 머지 작업을 취소하고 이전 상태로 돌아감

# Git 실전 I
git fetch : 로컬 레포지토리에서 현재 HEAD가 가리키는 브랜치의 업스트림(upstream) 브랜치로부터 최신 커밋들을 가져옴(가져오기만 한다는 점에서, 가져와서 머지까지 하는 git pull과는 차이가 있음)
git blame : 특정 파일의 내용 한줄한줄이 어떤 커밋에 의해 생긴 것인지 출력
git revert : 특정 커밋에서 이루어진 작업을 되돌리는(취소하는) 커밋을 새로 생성

# Git 실전 Ⅱ
git reflog : HEAD가 그동안 가리켜왔던 커밋들의 기록을 출력
git log --all --graph : 모든 브랜치의 커밋 히스토리를, 커밋 간의 관계가 잘 드러나도록 그래프 형식으로 출력
git rebase [브랜치 이름] : A, B 브랜치가 있는 상태에서 지금 HEAD가 A 브랜치를 가리킬 때, git rebase B를 실행하면 A, B 브랜치가 분기하는 시작점이 된 공통 커밋 이후로부터 존재하는 A 브랜치 상의 커밋들이 그대로 B 브랜치의 최신 커밋 이후로 이어붙여짐(git merge와 같은 효과를 가지지만 커밋 히스토리가 한 줄로 깔끔하게 된다는 차이점이 있음)
git stash : 현재 작업 내용을 스택 영역에 저장
git stash apply [커밋 아이디] : 스택 영역에 저장된 가장 최근의(혹은 특정) 작업 내용을 working directory에 적용
git stash drop [커밋 아이디] : 스택 영역에 저장된 가장 최근의(혹은 특정) 작업 내용을 스택에서 삭제
git stash pop [커밋 아이디] : 스택 영역에 저장된 가장 최근의(혹은 특정) 작업 내용을 working directory에 적용하면서 스택에서 삭제
git cherry-pick [커밋 아이디] : 특정 커밋의 내용을 현재 커밋에 반영
! 그 밖에 알아야할 사실

(1) git commit이라고만 쓰고 실행하면 커밋 메시지를 입력할 수 있는 텍스트 에디터 창이 뜹니다. 거기서 커밋 메시지를 입력하고 저장하고 나면 커밋이 이루어집니다.

(2) git push와 git pull은 그 작업 단위가 브랜치입니다. 예를 들어, master 브랜치에서 git push를 하면 master 브랜치의 내용만 리모트 레포지토리의 master 브랜치로 전송되지, premium 브랜치의 내용이 전송되는 것은 아닙니다.(git push에 --all이라는 옵션을 주면 모든 브랜치의 내용을 전송할 수 있기는 합니다.)

